{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"themes/hexo-theme-skapp/source/fonts/iconfont.eot","path":"fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/fonts/iconfont.ttf","path":"fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/fonts/iconfont.svg","path":"fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/fonts/iconfont.woff","path":"fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/img/android-chrome-144x144.png","path":"img/android-chrome-144x144.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/img/android-chrome-192x192.png","path":"img/android-chrome-192x192.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/img/android-chrome-256x256.png","path":"img/android-chrome-256x256.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/img/android-chrome-36x36.png","path":"img/android-chrome-36x36.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/img/android-chrome-384x384.png","path":"img/android-chrome-384x384.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/img/android-chrome-48x48.png","path":"img/android-chrome-48x48.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/img/android-chrome-512x512.png","path":"img/android-chrome-512x512.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/img/android-chrome-72x72.png","path":"img/android-chrome-72x72.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/img/android-chrome-96x96.png","path":"img/android-chrome-96x96.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/img/apple-touch-icon-1024x1024.png","path":"img/apple-touch-icon-1024x1024.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/img/apple-touch-icon-114x114.png","path":"img/apple-touch-icon-114x114.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/img/apple-touch-icon-120x120.png","path":"img/apple-touch-icon-120x120.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/img/apple-touch-icon-144x144.png","path":"img/apple-touch-icon-144x144.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/img/apple-touch-icon-152x152.png","path":"img/apple-touch-icon-152x152.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/img/apple-touch-icon-167x167.png","path":"img/apple-touch-icon-167x167.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/img/apple-touch-icon-180x180.png","path":"img/apple-touch-icon-180x180.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/img/apple-touch-icon-57x57.png","path":"img/apple-touch-icon-57x57.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/img/apple-touch-icon-60x60.png","path":"img/apple-touch-icon-60x60.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/img/apple-touch-icon-72x72.png","path":"img/apple-touch-icon-72x72.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/img/apple-touch-icon-76x76.png","path":"img/apple-touch-icon-76x76.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/img/apple-touch-icon.png","path":"img/apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/img/apple-touch-icon-precomposed.png","path":"img/apple-touch-icon-precomposed.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/img/article_default.jpg","path":"img/article_default.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/img/bg.jpg","path":"img/bg.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/img/browserconfig.xml","path":"img/browserconfig.xml","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/img/favicon-16x16.png","path":"img/favicon-16x16.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/img/favicon-32x32.png","path":"img/favicon-32x32.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/img/favicon-48x48.png","path":"img/favicon-48x48.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/img/loader.gif","path":"img/loader.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/img/logo.png","path":"img/logo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/img/manifest.json","path":"img/manifest.json","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/img/mstile-144x144.png","path":"img/mstile-144x144.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/img/mstile-150x150.png","path":"img/mstile-150x150.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/img/mstile-310x150.png","path":"img/mstile-310x150.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/img/mstile-310x310.png","path":"img/mstile-310x310.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/img/mstile-70x70.png","path":"img/mstile-70x70.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/img/qrcode.png","path":"img/qrcode.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/img/quotes.png","path":"img/quotes.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/js/md5.min.js","path":"js/md5.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/img/development-manual/jwt_title.png","path":"img/development-manual/jwt_title.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/img/development-manual/oath2_title.png","path":"img/development-manual/oath2_title.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/img/golang/channel_title.png","path":"img/golang/channel_title.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/img/golang/context_title.png","path":"img/golang/context_title.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/img/golang/interface_title.png","path":"img/golang/interface_title.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/img/golang/json_title.png","path":"img/golang/json_title.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/img/golang/protobuffer_plugin_title.png","path":"img/golang/protobuffer_plugin_title.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/img/network-deploy/dns_title.png","path":"img/network-deploy/dns_title.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/img/network-deploy/docker_title.png","path":"img/network-deploy/docker_title.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/img/network-deploy/git_title.png","path":"img/network-deploy/git_title.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/img/network-deploy/https_title.png","path":"img/network-deploy/https_title.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/img/network-deploy/nginx_title.png","path":"img/network-deploy/nginx_title.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/img/technology-sense/code_version_title.png","path":"img/technology-sense/code_version_title.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/img/technology-sense/data_repeated_title.png","path":"img/technology-sense/data_repeated_title.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/img/technology-sense/hash_crash_title.png","path":"img/technology-sense/hash_crash_title.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/img/technology-sense/optimize_invation_code_title.png","path":"img/technology-sense/optimize_invation_code_title.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/img/technology-sense/fission_exception_title.png","path":"img/technology-sense/fission_exception_title.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/img/technology-sense/optimize_live_room_title.png","path":"img/technology-sense/optimize_live_room_title.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/img/technology-sense/optimize_sensitive_words_title.png","path":"img/technology-sense/optimize_sensitive_words_title.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/img/technology-sense/request_repeated_title.png","path":"img/technology-sense/request_repeated_title.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/img/technology-sense/sql_inject_title.png","path":"img/technology-sense/sql_inject_title.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/img/technology-sense/sum_big_file_hash_value_title.png","path":"img/technology-sense/sum_big_file_hash_value_title.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/js/common/animation.js","path":"js/common/animation.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/js/common/pack.js","path":"js/common/pack.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/js/common/utils.js","path":"js/common/utils.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/js/layout/back-top.js","path":"js/layout/back-top.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/js/layout/loading.js","path":"js/layout/loading.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/js/layout/header.js","path":"js/layout/header.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/js/layout/post.js","path":"js/layout/post.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/js/libs/axios.min.js","path":"js/libs/axios.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/js/page/post.js","path":"js/page/post.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/js/libs/lunr.min.js","path":"js/libs/lunr.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/js/page/search.js","path":"js/page/search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/scss/base/index.scss","path":"scss/base/index.scss","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/scss/views/page/about.scss","path":"scss/views/page/about.scss","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/scss/views/page/archive.scss","path":"scss/views/page/archive.scss","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/scss/views/page/category.scss","path":"scss/views/page/category.scss","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/scss/views/page/error.scss","path":"scss/views/page/error.scss","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/scss/views/page/index.scss","path":"scss/views/page/index.scss","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/scss/views/page/post.scss","path":"scss/views/page/post.scss","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/scss/views/page/search.scss","path":"scss/views/page/search.scss","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/scss/views/page/tag.scss","path":"scss/views/page/tag.scss","modified":0,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/img/document-tool/hexo_title.png","path":"img/document-tool/hexo_title.png","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"308f7cb4c684104087d4cdef9aff7b9307a199c4","modified":1615854243371},{"_id":"source/favicon.ico","hash":"a507ef7ce3be6c89ae070d4bc86b257ba955bafe","modified":1615840238589},{"_id":"source/_data/contact.yml","hash":"ab509b1ed0fa8bbbeca476637935b45a92f959e1","modified":1615808005027},{"_id":"source/_data/favicons.json","hash":"74b8bfed1e01ab261aa7f8ec046598ab8a2662c7","modified":1615927392787},{"_id":"source/_posts/development-manual-jwt.md","hash":"69f8a760fe3c73226775833244a503534e7b80c3","modified":1615921006700},{"_id":"source/_posts/development-manual-oath2.md","hash":"a4b13ec3819c822924e41565e7491e2196d53526","modified":1615920540639},{"_id":"source/_posts/golang-channel.md","hash":"21eafb62e25fc4ea52ecc1e1db4e26d518b2b415","modified":1615924510211},{"_id":"source/_posts/golang-interface.md","hash":"2b85a4c660b840e1872006362ec7df86d62b5b2f","modified":1615922309549},{"_id":"source/_posts/golang-context.md","hash":"3eb6648b0db808c0c185086051efe2ed89c6ed28","modified":1615923742396},{"_id":"source/_posts/golang-protobuffer-plugin.md","hash":"de90bdd8e258aa2b7e4c73425401c539a1aee057","modified":1615926756551},{"_id":"source/_posts/golang-json.md","hash":"9b30145c8417fff8f1edb278e907a4d693e25ed5","modified":1615922744946},{"_id":"source/_posts/hello-world2.md","hash":"4f71b97e9aec9be6152e84b66b6ecb27b3f2fecc","modified":1615810775537},{"_id":"source/_posts/hello-world.md","hash":"3e6a609ba2f7a9a1a4a3aed1e3e99d4aab8e02b3","modified":1615813346566},{"_id":"source/_posts/network-deploy-dns.md","hash":"b206b128edfa84ddf823c8e866547bd656c5be9d","modified":1615928190056},{"_id":"source/_posts/network-deploy-docker.md","hash":"eb886ada1be22935cfbdceb878c507471dfbd1fa","modified":1615826682862},{"_id":"source/_posts/network-deploy-git.md","hash":"0d1f75f0db5edff0127fdd6196a673ec71cb0feb","modified":1615839284205},{"_id":"source/_posts/network-deploy-https.md","hash":"81cc4198e467db9f6ea951ecf1be75a7efee728a","modified":1615826067016},{"_id":"source/_posts/network-deploy-nginx.md","hash":"ad5ac8edb483c238d1bbadfa703135b772736357","modified":1615826422700},{"_id":"source/_posts/technology-sense-code-version.md","hash":"501c0d096388b1522c8b760d193a3bd521bfddeb","modified":1615925036395},{"_id":"source/_posts/technology-sense-fission-exception.md","hash":"fad4395b7d5ec1fc49e943d95b310be672c0797a","modified":1615927572510},{"_id":"source/_posts/technology-sense-hash-crash.md","hash":"df92ce91561b2cd338e76ab05520fed1f0089342","modified":1615927578422},{"_id":"source/_posts/technology-sense-network-request-repeated.md","hash":"1129b193a4e900fbdbd861d2202b43a3ee412f26","modified":1615828443604},{"_id":"source/_posts/technology-sense-optimize-invation-code.md","hash":"d493d0d230c4412dc0d267c09cfa58d67186f73d","modified":1615927586939},{"_id":"source/_posts/technology-sense-optimize-live-room.md","hash":"b9130971aee4d0240ca9b5e0337b89606c4db229","modified":1615927365976},{"_id":"source/_posts/technology-sense-optimize-sensitive-words.md","hash":"91b79002f470fc305208d339bb625923ee4fd793","modified":1615927601758},{"_id":"source/_posts/technology-sense-sql-inject.md","hash":"ad5afbe5a135d902214175d33bf76104fa8f14d6","modified":1615927600127},{"_id":"source/_posts/technology-sense-sql-order-repeated.md","hash":"bf78f38d308c7b34c28c2b0d90af20f1e8e320f0","modified":1615827897959},{"_id":"source/_posts/technology-sense-sum-big-file-hash-value.md","hash":"cd4e390f9f6cd9d637234315bb5cb36b53ea3f22","modified":1615919516774},{"_id":"source/_posts/development-manual-jwt/1.png","hash":"ea0b25b93a72ed641b7a745cab6e1b5f1e9f4b0e","modified":1615920824155},{"_id":"source/_posts/development-manual-jwt/2.png","hash":"97754edd37e1e6187a3599585fdd17b1ea87bade","modified":1615920846059},{"_id":"source/_posts/development-manual-oath2/1.png","hash":"1338282afa02344f21ba88f63aaa95d860598386","modified":1615920127986},{"_id":"source/_posts/development-manual-oath2/2.png","hash":"a636597b4fcf6254edaa6757670f8cfeb1590b02","modified":1615920160344},{"_id":"source/_posts/development-manual-oath2/3.png","hash":"1e141f6c9983dd11303c736bdb36e3089075990a","modified":1615920173894},{"_id":"source/_posts/development-manual-oath2/7.png","hash":"00a1bf3b7b492b84debbbc99757d1ae066654cb2","modified":1615920368865},{"_id":"source/_posts/development-manual-oath2/8.png","hash":"79d9ace7f6b3b1171404ab6ce9a034fae4914363","modified":1615920433768},{"_id":"source/_posts/development-manual-oath2/title.png","hash":"7810b694d4bdd008b72de6bc94b7880cd01f14ff","modified":1615919745691},{"_id":"source/_posts/hello-world/image-20210315203750702.png","hash":"19827394851e5cbb3ed54463a032f11f627ea1e8","modified":1615811878098},{"_id":"source/_posts/network-deploy-git/acc.png","hash":"5f85480bb6caa6be4b2c74478176e35427a60a55","modified":1615831865197},{"_id":"source/_posts/technology-fission-exception/title.png","hash":"9aaf3b04a401b95d589b585a0941b68beb2026e5","modified":1615916065404},{"_id":"themes/hexo-theme-skapp/source/scss/base/_input.scss","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1615799843967},{"_id":"themes/hexo-theme-skapp/.gitignore","hash":"82ef2f3b23b55ea98c542341063157af2e059619","modified":1615799843842},{"_id":"themes/hexo-theme-skapp/_config.yml","hash":"3efae5bd03a319bd14ac00f6604609c637627c3e","modified":1615812896200},{"_id":"themes/hexo-theme-skapp/package-lock.json","hash":"dc4ee1f15b3b73041b48c235daa2dcedf46894d7","modified":1615799863954},{"_id":"themes/hexo-theme-skapp/LICENSE","hash":"35e1d1fbdb2b983d6a269988411e626e2e49fc46","modified":1615799843843},{"_id":"themes/hexo-theme-skapp/package.json","hash":"4e1b664cceaaad0d36238b8cc699bce37a656cfe","modified":1615799843918},{"_id":"themes/hexo-theme-skapp/languages/en.yml","hash":"1a4f5bce3b60ca76b0e905957172051900091299","modified":1615799843851},{"_id":"themes/hexo-theme-skapp/languages/zh-cn.yml","hash":"88757f002e1589fb18ad1747b92978d92dfe171d","modified":1615799843853},{"_id":"themes/hexo-theme-skapp/layout/_layout.swig","hash":"591b38e1257c663c425121e9d7d143418bed1a74","modified":1615853955125},{"_id":"themes/hexo-theme-skapp/layout/about.swig","hash":"9f6cea58373ddc0635ee2416fbcd8dad407bdfa7","modified":1615799843906},{"_id":"themes/hexo-theme-skapp/layout/archive.swig","hash":"eaf468f189f068af58805d8142055008b392d981","modified":1615799843908},{"_id":"themes/hexo-theme-skapp/README.md","hash":"16ad533b44c15789764f9bad3166421893628deb","modified":1615799843847},{"_id":"themes/hexo-theme-skapp/README-cn.md","hash":"3598c30bf4797ce98670b6299d6d28881d083a81","modified":1615799843845},{"_id":"themes/hexo-theme-skapp/layout/category.swig","hash":"7fcb568f095d3c313cd2643e4b9933b62316d67f","modified":1615799843909},{"_id":"themes/hexo-theme-skapp/layout/error.swig","hash":"fa7acb45c6cf022a0a6e3736095444d9066706b3","modified":1615799843910},{"_id":"themes/hexo-theme-skapp/layout/index.swig","hash":"bfd8af9f057dbb6edb3af5c0ebdb18ecb0ad3a98","modified":1615799843912},{"_id":"themes/hexo-theme-skapp/layout/post.swig","hash":"43984751ff19fc3976f5f15bf0c8a5dabffe7c53","modified":1615799843914},{"_id":"themes/hexo-theme-skapp/layout/search.swig","hash":"6352de699394e756d529216181103f7e2e8ac1a0","modified":1615799843915},{"_id":"themes/hexo-theme-skapp/layout/tag.swig","hash":"48caf533976c533241d7a709931d2945303e2c36","modified":1615799843916},{"_id":"themes/hexo-theme-skapp/scripts/helper.js","hash":"e5bb3f9b58b794349c4a25750f0bf1ab556a115d","modified":1615799843921},{"_id":"themes/hexo-theme-skapp/scripts/renderer.js","hash":"433f140c0d506b4b6807232872549451407ae527","modified":1615799843922},{"_id":"themes/hexo-theme-skapp/source/fonts/iconfont.svg","hash":"34f7c2b49d2f9339d944a7419989498b2cc2f76b","modified":1615799843929},{"_id":"themes/hexo-theme-skapp/source/fonts/iconfont.woff","hash":"37b11e65abc366b2b4a212a302b36f7152921625","modified":1615799843933},{"_id":"themes/hexo-theme-skapp/source/img/404.jpg","hash":"9f47a79e8ed23cda7708c7b870dffaf7f30ef188","modified":1615807131501},{"_id":"themes/hexo-theme-skapp/source/fonts/iconfont.eot","hash":"87bd2f3e4f3b26d80fe97943b8deec98168affc2","modified":1615799843927},{"_id":"themes/hexo-theme-skapp/source/img/android-chrome-144x144.png","hash":"f68f2abae37de4216b2125695aa6f1598753d82f","modified":1615927392814},{"_id":"themes/hexo-theme-skapp/source/fonts/iconfont.ttf","hash":"cbe6cffb573ef986e91c6705c9839a9c53edb1c8","modified":1615799843931},{"_id":"themes/hexo-theme-skapp/source/img/android-chrome-192x192.png","hash":"e453fd09e6bece00eaa37e0a85c05a129909cce5","modified":1615927392816},{"_id":"themes/hexo-theme-skapp/source/img/android-chrome-256x256.png","hash":"80b8da536a02ce6cf2d16a58bfe8026f1eb158d3","modified":1615927392818},{"_id":"themes/hexo-theme-skapp/source/img/android-chrome-36x36.png","hash":"2009e441e84b92f39d10c913c6998f3f5944720e","modified":1615927392807},{"_id":"themes/hexo-theme-skapp/source/img/android-chrome-48x48.png","hash":"d9cc589a6258fe734a6fdfe98dcc0385e6f81abe","modified":1615927392809},{"_id":"themes/hexo-theme-skapp/source/img/android-chrome-72x72.png","hash":"a212b8ab0b734810e8bdb20e58c9d7408ebd4f86","modified":1615927392810},{"_id":"themes/hexo-theme-skapp/source/img/android-chrome-96x96.png","hash":"8492f33f0b78345214d91b41e067329913f8d1c4","modified":1615927392812},{"_id":"themes/hexo-theme-skapp/source/img/apple-touch-icon-114x114.png","hash":"37491bc5bf5eeada5b866579884f5b9a2a4a1c20","modified":1615927392842},{"_id":"themes/hexo-theme-skapp/source/img/apple-touch-icon-120x120.png","hash":"4942aa68c6a5a993f3d207a967ea16e2a0f61d90","modified":1615927392844},{"_id":"themes/hexo-theme-skapp/source/img/apple-touch-icon-144x144.png","hash":"f68f2abae37de4216b2125695aa6f1598753d82f","modified":1615927392846},{"_id":"themes/hexo-theme-skapp/source/img/apple-touch-icon-152x152.png","hash":"4454fb3cf28be2101cff71626aac0c5967e6fc0a","modified":1615927392848},{"_id":"themes/hexo-theme-skapp/source/img/apple-touch-icon-167x167.png","hash":"8d12c59988e6bca5980d2412631cc3a8f2a562e8","modified":1615927392850},{"_id":"themes/hexo-theme-skapp/source/img/apple-touch-icon-180x180.png","hash":"5c50538deba5ce458d9b95ecea4ebdcab1e49d0a","modified":1615927392851},{"_id":"themes/hexo-theme-skapp/source/img/apple-touch-icon-57x57.png","hash":"8c214c315782be54d0b1f9e406779d6fde7d78ea","modified":1615927392833},{"_id":"themes/hexo-theme-skapp/source/img/apple-touch-icon-60x60.png","hash":"553f2a1b1e3c40a49a0db72f7fe454025cf4fb74","modified":1615927392836},{"_id":"themes/hexo-theme-skapp/source/img/apple-touch-icon-72x72.png","hash":"a212b8ab0b734810e8bdb20e58c9d7408ebd4f86","modified":1615927392838},{"_id":"themes/hexo-theme-skapp/source/img/apple-touch-icon-76x76.png","hash":"2e2a85640b52c416b60b0e528f893b52b05cbc98","modified":1615927392840},{"_id":"themes/hexo-theme-skapp/source/img/apple-touch-icon.png","hash":"5c50538deba5ce458d9b95ecea4ebdcab1e49d0a","modified":1615927392856},{"_id":"themes/hexo-theme-skapp/source/img/apple-touch-icon-precomposed.png","hash":"5c50538deba5ce458d9b95ecea4ebdcab1e49d0a","modified":1615927392857},{"_id":"themes/hexo-theme-skapp/source/img/article_default.jpg","hash":"d7582abaa968f61c0d2cf63156437df79af5ca65","modified":1615806080408},{"_id":"themes/hexo-theme-skapp/source/img/bg.jpg","hash":"a9de124ccc98b611531bdef75764637a0b8fd36e","modified":1615806417555},{"_id":"themes/hexo-theme-skapp/source/img/browserconfig.xml","hash":"fdf64346d968f84f0d72f86e9f4c6cdb5ddeb625","modified":1615927392791},{"_id":"themes/hexo-theme-skapp/source/img/favicon-16x16.png","hash":"4a4bd7faabeb5e003597d5873cdba0fa22a95117","modified":1615927392799},{"_id":"themes/hexo-theme-skapp/source/img/favicon-32x32.png","hash":"66bcfbd194d1bd88f82b9114d38aad333364ae97","modified":1615927392801},{"_id":"themes/hexo-theme-skapp/source/img/favicon-48x48.png","hash":"d9cc589a6258fe734a6fdfe98dcc0385e6f81abe","modified":1615927392803},{"_id":"themes/hexo-theme-skapp/source/img/favicon.ico","hash":"a507ef7ce3be6c89ae070d4bc86b257ba955bafe","modified":1615927392805},{"_id":"themes/hexo-theme-skapp/source/img/loader.gif","hash":"ed66db39f70b6240bd1cdcd8afa0d9c29cb2c7f3","modified":1615807163912},{"_id":"themes/hexo-theme-skapp/source/img/logo.png","hash":"ce0a4ef1745f9f30cc2e14084316081f3a6f09af","modified":1615804466336},{"_id":"themes/hexo-theme-skapp/source/img/manifest.json","hash":"cd1ab9b5862f510052f5074c61e1ad82817e04ba","modified":1615927392789},{"_id":"themes/hexo-theme-skapp/source/img/mstile-144x144.png","hash":"f68f2abae37de4216b2125695aa6f1598753d82f","modified":1615927392861},{"_id":"themes/hexo-theme-skapp/source/img/mstile-150x150.png","hash":"05f0a170af71bae4e0b98ffa5dd21754e0ec72b8","modified":1615927392863},{"_id":"themes/hexo-theme-skapp/source/img/mstile-310x150.png","hash":"bc28b44c3ea2ec4e6755c37f10c01c8e7412dce4","modified":1615927392865},{"_id":"themes/hexo-theme-skapp/source/img/mstile-70x70.png","hash":"a3b06af5f8126e14a8734f32509135d68db0ee95","modified":1615927392859},{"_id":"themes/hexo-theme-skapp/source/img/quotes.png","hash":"4510107c2b0ea522ac2dc2048cb7471b468af5ff","modified":1615799843935},{"_id":"themes/hexo-theme-skapp/source/scss/_theme.scss","hash":"5d63a2c2a326d3951fbe4096fe11cfce380a514e","modified":1615799843962},{"_id":"themes/hexo-theme-skapp/layout/_partial/archive/main.swig","hash":"57c33af136eca2a0d83e01345304ee1e6b2f9275","modified":1615799843862},{"_id":"themes/hexo-theme-skapp/source/js/md5.min.js","hash":"c27927a82941ba972c140abf26ad82e04c32d86a","modified":1615799843955},{"_id":"themes/hexo-theme-skapp/layout/_partial/about/main.swig","hash":"b2e0d54346244d8661a3a6948ea30d2d846ea3e6","modified":1615799843859},{"_id":"themes/hexo-theme-skapp/layout/_partial/category/main.swig","hash":"f2094d81620bc30cd2e5755ae0cff9517d52f602","modified":1615799843864},{"_id":"themes/hexo-theme-skapp/layout/_partial/common/analytics.swig","hash":"381147862c6a50e987496c6bfdc06d36bad14d7a","modified":1615799843867},{"_id":"themes/hexo-theme-skapp/layout/_partial/common/back-top.swig","hash":"97a248605facffc986ff5e06338ee3fe662b6a2b","modified":1615799843868},{"_id":"themes/hexo-theme-skapp/layout/_partial/common/comment.swig","hash":"9b27c782ea76cbaace9ddb38729ea153ee90f18e","modified":1615799843870},{"_id":"themes/hexo-theme-skapp/layout/_partial/common/error-header.swig","hash":"18ad4d1acd16ac1dc6c4be19149d7de6f8904abd","modified":1615799843871},{"_id":"themes/hexo-theme-skapp/layout/_partial/common/footer.swig","hash":"d1dcfdec65750226d1f90d7cc2ac2260832c9c82","modified":1615807816582},{"_id":"themes/hexo-theme-skapp/layout/_partial/common/head.swig","hash":"74756b1d58a2209049fcf5985adc95fb94d8c8ff","modified":1615819981921},{"_id":"themes/hexo-theme-skapp/layout/_partial/common/header.swig","hash":"bdb9955afdc20ade2a8ea98130d360671538d182","modified":1615799843877},{"_id":"themes/hexo-theme-skapp/layout/_partial/common/loader.swig","hash":"69b476a9d85929c1d9a37951003924d2185825a1","modified":1615799843878},{"_id":"themes/hexo-theme-skapp/layout/_partial/common/math.swig","hash":"e4cb3dea80531201b7a6113fb2d08d389d16e63c","modified":1615799843880},{"_id":"themes/hexo-theme-skapp/layout/_partial/common/prefetch.swig","hash":"06bb0e8583d08716a1e7e91bf149539b2aeb49f4","modified":1615799843881},{"_id":"themes/hexo-theme-skapp/layout/_partial/common/sidebar.swig","hash":"c3f8405d657d5105f37a76d805dc5941a819fa09","modified":1615811293106},{"_id":"themes/hexo-theme-skapp/layout/_partial/common/small-header.swig","hash":"d17b47dbb91a476a6ecbe4dfaf45cc7e2efa568f","modified":1615799843884},{"_id":"themes/hexo-theme-skapp/layout/_partial/error/main.swig","hash":"04a96565937aeb86be41ce83c6ed78aa7653a6f7","modified":1615799843887},{"_id":"themes/hexo-theme-skapp/layout/_partial/index/main.swig","hash":"f2094d81620bc30cd2e5755ae0cff9517d52f602","modified":1615799843891},{"_id":"themes/hexo-theme-skapp/layout/_partial/post/content.swig","hash":"853fa690220dc60fbd5feb6465c411496b5e0734","modified":1615799843894},{"_id":"themes/hexo-theme-skapp/layout/_partial/post/main.swig","hash":"5895556b4852c5b355e3d4f77fddecc7c7511dce","modified":1615799843896},{"_id":"themes/hexo-theme-skapp/layout/_partial/post/mini.swig","hash":"c7fa61d557ddc51157d87ecf0a22d67561cfe3ed","modified":1615799843897},{"_id":"themes/hexo-theme-skapp/layout/_partial/post/post-statistical.swig","hash":"e160d861a4521f9ece0ed3575e958faad0b4068c","modified":1615799843899},{"_id":"themes/hexo-theme-skapp/layout/_partial/tag/main.swig","hash":"f2094d81620bc30cd2e5755ae0cff9517d52f602","modified":1615799843904},{"_id":"themes/hexo-theme-skapp/layout/_partial/search/main.swig","hash":"d21af97d8128b781c11ef0ee00f6335cabd864ec","modified":1615799843902},{"_id":"themes/hexo-theme-skapp/source/img/development-manual/jwt_title.png","hash":"ea0b25b93a72ed641b7a745cab6e1b5f1e9f4b0e","modified":1615920715167},{"_id":"themes/hexo-theme-skapp/source/img/development-manual/oath2_title.png","hash":"7810b694d4bdd008b72de6bc94b7880cd01f14ff","modified":1615919567389},{"_id":"themes/hexo-theme-skapp/source/img/golang/channel_title.png","hash":"1fc10661e280d962ea32f595fe994df328a365ba","modified":1615924786013},{"_id":"themes/hexo-theme-skapp/source/img/golang/context_title.png","hash":"422a5ce7f0868ecaad4efa54bad7b664a0b2087c","modified":1615923519908},{"_id":"themes/hexo-theme-skapp/source/img/golang/interface_title.png","hash":"44bfed96f40c0de740d10512c036efb5e26ef8f2","modified":1615921964859},{"_id":"themes/hexo-theme-skapp/source/img/golang/json_title.png","hash":"a3021371058e0dab35ef03a49b06142d38136551","modified":1615922782134},{"_id":"themes/hexo-theme-skapp/source/img/golang/protobuffer_plugin_title.png","hash":"42a94211d48a37ad4fc5667f616e2f2679be8496","modified":1615926850880},{"_id":"themes/hexo-theme-skapp/source/img/network-deploy/dns_title.png","hash":"d2c430db0dbefc53c54dd2aed7e16264bafb3559","modified":1615824949375},{"_id":"themes/hexo-theme-skapp/source/img/network-deploy/docker_title.png","hash":"8cc6f642c76ac81994adef95898eddad5ce81c46","modified":1615826736576},{"_id":"themes/hexo-theme-skapp/source/img/network-deploy/https_title.png","hash":"8e5dfc1a3d2380ad8b0498a42cb1f4ab38098200","modified":1615825343698},{"_id":"themes/hexo-theme-skapp/source/img/network-deploy/nginx_title.png","hash":"5632e2b2fcf7582cc66672d24e93010cf7534c57","modified":1615826461019},{"_id":"themes/hexo-theme-skapp/source/img/technology-sense/code_version_title.png","hash":"64b7902358d308591ced2d43e70280d2e4905105","modified":1615923130430},{"_id":"themes/hexo-theme-skapp/source/img/technology-sense/data_repeated_title.png","hash":"7c11781da1ef358ffe1d97d3eb756725e0f847f2","modified":1615828714639},{"_id":"themes/hexo-theme-skapp/source/img/technology-sense/hash_crash_title.png","hash":"18e8120e4039f4146e47242044a612bbc787ea07","modified":1615915808114},{"_id":"themes/hexo-theme-skapp/source/img/technology-sense/optimize_invation_code_title.png","hash":"42500f16b2df408959fd6dddaecd0faefc241c3c","modified":1615918096955},{"_id":"themes/hexo-theme-skapp/source/img/technology-sense/optimize_live_room_title.png","hash":"d1a4756495f2233df8aee4f0399611137f438b5c","modified":1615918722528},{"_id":"themes/hexo-theme-skapp/source/img/technology-sense/optimize_sensitive_words_title.png","hash":"29b1831b8b4425fd635c000626e55737d4a97a00","modified":1615917542900},{"_id":"themes/hexo-theme-skapp/source/img/technology-sense/request_repeated_title.png","hash":"c731eee3aefe36b0d10b8d9cfca570233d919fb6","modified":1615828785471},{"_id":"themes/hexo-theme-skapp/source/img/technology-sense/sql_inject_title.png","hash":"54aba548fe39acd02afeecfc49a542bbe25d5786","modified":1615915250311},{"_id":"themes/hexo-theme-skapp/source/img/technology-sense/sum_big_file_hash_value_title.png","hash":"7eeb9e9cabab9e03de8218fc0e5a3363fe7bad71","modified":1615919214107},{"_id":"themes/hexo-theme-skapp/source/js/common/animation.js","hash":"6a1a7629612c4c2dc85a1d00ff538d00e493d3bb","modified":1615799843939},{"_id":"themes/hexo-theme-skapp/source/js/common/pack.js","hash":"dab2804004a471e5df698eeae71b6ab2922e4443","modified":1615799843941},{"_id":"themes/hexo-theme-skapp/source/js/common/utils.js","hash":"d8b5ef7c7360ce2e5c2a96ccbc1e5f1494e69b04","modified":1615799843942},{"_id":"themes/hexo-theme-skapp/source/js/layout/back-top.js","hash":"e4014c0e03fc0c1e67f458526c143c9eea8a31b8","modified":1615799843945},{"_id":"themes/hexo-theme-skapp/source/js/layout/loading.js","hash":"c60923eec07b75024692bd9aae410a0d8a3adce3","modified":1615799843948},{"_id":"themes/hexo-theme-skapp/source/js/layout/header.js","hash":"0264d36e2009d05850fd42760f285e87a3ea5be5","modified":1615799843947},{"_id":"themes/hexo-theme-skapp/source/js/layout/post.js","hash":"5a0c6c42f27ea5d723e0f008e0f44f1e4b031d13","modified":1615799843950},{"_id":"themes/hexo-theme-skapp/source/js/page/post.js","hash":"335f692d0c6c35dfee1f75868e1e29cfcdc1f529","modified":1615799843958},{"_id":"themes/hexo-theme-skapp/source/js/libs/axios.min.js","hash":"338a9f6113dec0b9ec84fee55c96a6014b889156","modified":1615799843952},{"_id":"themes/hexo-theme-skapp/source/scss/base/_element.scss","hash":"59381e14408e1c6d696147e7e8aa4ce261a8413d","modified":1615799843965},{"_id":"themes/hexo-theme-skapp/source/scss/base/_font.scss","hash":"f04cf1809ceb46595bbc8c8dc98013a57010eab2","modified":1615799843966},{"_id":"themes/hexo-theme-skapp/source/js/page/search.js","hash":"0985dc97ebdf11fef3935d0d3504bfc7747a2fcc","modified":1615799843959},{"_id":"themes/hexo-theme-skapp/source/scss/base/_js-toggle.scss","hash":"2144fd9dc98865e405fa3207829e8d1eea35988e","modified":1615799843969},{"_id":"themes/hexo-theme-skapp/source/scss/base/_mixins.scss","hash":"823c6e5d56df0e0e926a8843400d8e3e34ff44dc","modified":1615799843970},{"_id":"themes/hexo-theme-skapp/source/js/libs/lunr.min.js","hash":"ec9df958d5baa501684c434bb54a724f9b98eced","modified":1615799843954},{"_id":"themes/hexo-theme-skapp/source/scss/base/index.scss","hash":"da0bc6af7a87e768d68d3316e7611fb4d578a441","modified":1615799843972},{"_id":"themes/hexo-theme-skapp/source/scss/views/layout/_back-top.scss","hash":"996e70395bc76abeb59b58832696ab21e9b3c632","modified":1615799843976},{"_id":"themes/hexo-theme-skapp/source/scss/views/layout/_container.scss","hash":"7eebdf731c56ec33feb63fae505465d2cbd27447","modified":1615799843978},{"_id":"themes/hexo-theme-skapp/source/scss/views/layout/_footer.scss","hash":"ac552e54f377d92153ae989a8934e54364b94595","modified":1615799843979},{"_id":"themes/hexo-theme-skapp/source/scss/views/layout/_header.scss","hash":"219a554cdd706a0773230d6618b2271c419d1e2b","modified":1615799843981},{"_id":"themes/hexo-theme-skapp/source/scss/views/layout/_index.scss","hash":"c74bc9b2f877c6d8fa29a6daa5136653ba1f7e35","modified":1615799843982},{"_id":"themes/hexo-theme-skapp/source/scss/views/layout/_loading.scss","hash":"41591203dc41876e916399fbaae33ff6a79a080c","modified":1615799843984},{"_id":"themes/hexo-theme-skapp/source/scss/views/layout/_paginator.scss","hash":"43dd98f41c8a88732969f65fafca6b4f5b508b72","modified":1615799843987},{"_id":"themes/hexo-theme-skapp/source/scss/views/layout/_mini-post.scss","hash":"f57131293aa60bafb9c81416fb44b5c311da4afc","modified":1615799843986},{"_id":"themes/hexo-theme-skapp/source/scss/views/layout/_sidebar.scss","hash":"9ca8f0baeec9ba89662610684e33c8c8343416a5","modified":1615799843989},{"_id":"themes/hexo-theme-skapp/source/scss/views/page/about.scss","hash":"9e899e9162ce8db9ff99bbfe5ac9e90108b652e3","modified":1615799843991},{"_id":"themes/hexo-theme-skapp/source/scss/views/page/category.scss","hash":"060931308b8ac3740ca3928afeb6246041cf9a84","modified":1615799843994},{"_id":"themes/hexo-theme-skapp/source/scss/views/page/archive.scss","hash":"bc6fd08a9a5e5146e6405c1845858f6bd643817f","modified":1615799843993},{"_id":"themes/hexo-theme-skapp/source/scss/views/page/index.scss","hash":"be170e52e6836afb4c3d22d789bddf7f091245a7","modified":1615799843998},{"_id":"themes/hexo-theme-skapp/source/scss/views/page/post.scss","hash":"8fc1ae6d180ce9d494fb877144f16e1e3030a6aa","modified":1615799843999},{"_id":"themes/hexo-theme-skapp/source/scss/views/page/error.scss","hash":"c708ce4d926460d2dfdc7af56b69915a32f3da7a","modified":1615799843996},{"_id":"themes/hexo-theme-skapp/source/scss/views/page/tag.scss","hash":"060931308b8ac3740ca3928afeb6246041cf9a84","modified":1615799844002},{"_id":"themes/hexo-theme-skapp/source/scss/views/page/search.scss","hash":"38f55dbfe22fae61c7c18eb9f3dc72207fd9b28c","modified":1615799844000},{"_id":"themes/hexo-theme-skapp/source/img/android-chrome-384x384.png","hash":"02d9bb2075dbe5a41bd2490665b1b13697a080e6","modified":1615927392827},{"_id":"themes/hexo-theme-skapp/source/img/mstile-310x310.png","hash":"e8bf90b7508706441a1ba33fe4503d6a791ea54a","modified":1615927392867},{"_id":"themes/hexo-theme-skapp/source/img/network-deploy/git_title.png","hash":"f7a4eec9b859549237574c5d16502fc8ccec9430","modified":1615831075870},{"_id":"themes/hexo-theme-skapp/source/img/android-chrome-512x512.png","hash":"4bbe04bf20da7403da9233d05c3042e4b023f418","modified":1615927392830},{"_id":"themes/hexo-theme-skapp/source/img/technology-sense/fission_exception_title.png","hash":"9aaf3b04a401b95d589b585a0941b68beb2026e5","modified":1615916215944},{"_id":"themes/hexo-theme-skapp/source/img/apple-touch-icon-1024x1024.png","hash":"2a88bbe7a3c78870cc62b397ae7df50e3926e6a7","modified":1615927392854},{"_id":"themes/hexo-theme-skapp/source/img/qrcode.png","hash":"942b3b214686e3ea292d2393ad70830f2b06d12e","modified":1615810966000},{"_id":"public/img/favicon-32x32.png","hash":"aa4ec69c93dd7a733cc97ee2cb74854d69ffa2b2","modified":1615927372059},{"_id":"public/img/favicon-48x48.png","hash":"31f775672986813cb1f035311ea1b554ee95b30c","modified":1615927372059},{"_id":"public/img/android-chrome-36x36.png","hash":"187944a0761a517f20064ed3532d8352975ee0f3","modified":1615927372059},{"_id":"public/img/android-chrome-48x48.png","hash":"31f775672986813cb1f035311ea1b554ee95b30c","modified":1615927372059},{"_id":"public/img/android-chrome-72x72.png","hash":"0a8d988ab6b509c8ad386f985c56f335f8220352","modified":1615927372059},{"_id":"public/img/android-chrome-96x96.png","hash":"464bf45514efc396074931f84f375c5ce7f3e04b","modified":1615927372059},{"_id":"public/img/android-chrome-144x144.png","hash":"bbf9c29446d74ddf1f6003f8353091d810ad7609","modified":1615927372059},{"_id":"public/img/android-chrome-192x192.png","hash":"48fbc0f98b45af5da869c21e9c906a1702bba437","modified":1615927372059},{"_id":"public/img/android-chrome-256x256.png","hash":"ac95b1b01b0251a11723b7b1612f5380f8b0a71a","modified":1615927372059},{"_id":"public/img/android-chrome-384x384.png","hash":"2554c29d77f0643476e32b5fa2852b2ac66b0f39","modified":1615927372059},{"_id":"public/img/android-chrome-512x512.png","hash":"fa626d1b31622e0ee931e7de3e5696b837352dad","modified":1615927372059},{"_id":"public/img/apple-touch-icon-57x57.png","hash":"893361e8544c1c84114b4fdb5639d86783b4a8f1","modified":1615927372059},{"_id":"public/img/apple-touch-icon-60x60.png","hash":"171937abde8eb886c7b5004bfa61f49f7588bdbd","modified":1615927372059},{"_id":"public/img/apple-touch-icon-72x72.png","hash":"0a8d988ab6b509c8ad386f985c56f335f8220352","modified":1615927372059},{"_id":"public/img/apple-touch-icon-76x76.png","hash":"28418d560ab3e0e03c45f7da866d2ac3b5cc3a7c","modified":1615927372059},{"_id":"public/img/apple-touch-icon-114x114.png","hash":"ea345bd6c8a1aa2516a0086ecfc2bf9778b5508d","modified":1615927372059},{"_id":"public/img/apple-touch-icon-120x120.png","hash":"4b9f9313129b8e23a9070e4d2f09b0f5aa051eee","modified":1615927372059},{"_id":"public/img/apple-touch-icon-144x144.png","hash":"bbf9c29446d74ddf1f6003f8353091d810ad7609","modified":1615927372059},{"_id":"public/img/apple-touch-icon-152x152.png","hash":"2048b38f12fd20ac5f1795721a8b023ee9c5676d","modified":1615927372059},{"_id":"public/img/apple-touch-icon-167x167.png","hash":"448812d40187125b495a4c75b1a7c432dec2630e","modified":1615927372059},{"_id":"public/img/apple-touch-icon-180x180.png","hash":"513898e6229a0fbe48f27073ec8a9bd9e5737a37","modified":1615927372059},{"_id":"public/img/apple-touch-icon-1024x1024.png","hash":"22dc318984015c4a7234afe21d83b5b6fb10161a","modified":1615927372059},{"_id":"public/img/apple-touch-icon-precomposed.png","hash":"513898e6229a0fbe48f27073ec8a9bd9e5737a37","modified":1615927372059},{"_id":"public/img/apple-touch-icon.png","hash":"513898e6229a0fbe48f27073ec8a9bd9e5737a37","modified":1615927372059},{"_id":"public/img/mstile-70x70.png","hash":"32119abb85b1f455c37f5dc4210d95ea13b3a188","modified":1615927372059},{"_id":"public/img/mstile-144x144.png","hash":"bbf9c29446d74ddf1f6003f8353091d810ad7609","modified":1615927372059},{"_id":"public/img/mstile-150x150.png","hash":"b27c78813f5a68047f5d74a66acdd6de7f8a6e63","modified":1615927372059},{"_id":"public/img/mstile-310x310.png","hash":"9171e1c7a591cb7c3b68c476bee9fb5c54791dd3","modified":1615927372059},{"_id":"public/fonts/iconfont.svg","hash":"b606414ee9d4fe20d41c53b4ae66b58d1e8d40a2","modified":1615927372059},{"_id":"public/img/quotes.png","hash":"d971044cf4d14bc81e63c5a9f9528832fab378cf","modified":1615927372059},{"_id":"public/img/network-deploy/git_title.png","hash":"978af5776a733ae300636911b03d348160902821","modified":1615927372059},{"_id":"public/img/technology-sense/fission_exception_title.png","hash":"124b32bf0e45b08fdd52e0cd3d02f75ab3c1a143","modified":1615927372059},{"_id":"public/2021/hello-world/index/image-20210315203750702.png","hash":"c17f6452e51ad9e0cbe86a91429314f0a9f5272c","modified":1615927372059},{"_id":"public/2021/network-deploy-git/index/acc.png","hash":"d561858e77b44b9622024b9121fc9e79ce177c47","modified":1615927372059},{"_id":"public/atom.xml","hash":"47e92fe0a50cb75c14f104667e346a53737e8859","modified":1615937890437},{"_id":"public/sitemap.xml","hash":"8a3cde9b6ab7f983f0664659c3fef1d6b0d1d4af","modified":1615937890437},{"_id":"public/assets/lunr/2021.json","hash":"9e5a3a2010def2a07fa62858d357ea3f39facfdf","modified":1615937890437},{"_id":"public/assets/lunr/all.json","hash":"9e5a3a2010def2a07fa62858d357ea3f39facfdf","modified":1615937890437},{"_id":"public/2021/golang-channel/index.html","hash":"a570aa57224046513265bcf13fb441c7bd205f99","modified":1615937890437},{"_id":"public/2021/golang-protobuffer-plugin/index.html","hash":"0e61170566b8af8b3d537eb6c0555d89b62d9459","modified":1615937890437},{"_id":"public/2021/golang-context/index.html","hash":"2125d006289d7560fc1a2554e7518d4f8458555b","modified":1615937890437},{"_id":"public/2021/technology-sense-code-version/index.html","hash":"423dd8d5e968049f55c77c36f8ee3f70f6d77511","modified":1615937890437},{"_id":"public/2021/golang-json/index.html","hash":"fc6f3c3faf0082582abb6d7db7eebf86e5d8b296","modified":1615937890437},{"_id":"public/2021/golang-interface/index.html","hash":"a9e008c34892485a778cbc8b0af4efb0f518ac0a","modified":1615937890437},{"_id":"public/2021/development-manual-jwt/index.html","hash":"028202cbd9c73c98f909d5600ef5b09bbe8f3b40","modified":1615937890437},{"_id":"public/2021/development-manual-oath2/index.html","hash":"8b6af4b332c64fd9f679c3ffac28819e1aaf42e8","modified":1615937890437},{"_id":"public/2021/technology-sense-sum-big-file-hash-value/index.html","hash":"8246cd6a0b03244aaf818213745296734d76369d","modified":1615937890437},{"_id":"public/2021/technology-sense-optimize-live-room/index.html","hash":"c835a8317026b9b58fc568324e7997fb21ea5a51","modified":1615937890437},{"_id":"public/2021/technology-sense-optimize-invation-code/index.html","hash":"ebfff774dc24573f8d58231c19b8d890cc40e247","modified":1615937890437},{"_id":"public/2021/technology-sense-optimize-sensitive-words/index.html","hash":"803cb316525eb1f0b03d2e7222e950538bdc61e8","modified":1615937890437},{"_id":"public/2021/technology-sense-fission-exception/index.html","hash":"beff40696d7dcd2d0156e0b7127ec4b1446aaba2","modified":1615937890437},{"_id":"public/2021/technology-sense-hash-crash/index.html","hash":"be39dd552adb09cc2291d57eb296d013df905d9d","modified":1615937890437},{"_id":"public/2021/technology-sense-sql-inject/index.html","hash":"88eacf8bf2bf90bed97f708dea87d41635188660","modified":1615937890437},{"_id":"public/2021/technology-sense-network-request-repeated/index.html","hash":"8d0368a26e717e381fb03fcb60d32dbbef5bef0d","modified":1615937890437},{"_id":"public/2021/technology-sense-sql-order-repeated/index.html","hash":"2bb4bf9d5ace02b5ffda5faf8dfb5edc57c8e301","modified":1615937890437},{"_id":"public/2021/network-deploy-git/index.html","hash":"001011f728549665c63bb7b3a6f9d35c22556a83","modified":1615937890437},{"_id":"public/2021/network-deploy-docker/index.html","hash":"9e36dfe01aabea0ac85b6d5fdcaf48ec023d13c8","modified":1615937890437},{"_id":"public/2021/network-deploy-nginx/index.html","hash":"8a08df7d1735df24043919569f0392cc111927e1","modified":1615937890437},{"_id":"public/2021/network-deploy-dns/index.html","hash":"d5fe17c4c3c87b3f047fccc9748ef81531d5a396","modified":1615937890437},{"_id":"public/2021/network-deploy-https/index.html","hash":"cb067e47e2c6b4f9633f9d8664f3baa3270777eb","modified":1615937890437},{"_id":"public/2021/hello-world2/index.html","hash":"50b0e6fe3af70b18a5321959c64668337b0f6b66","modified":1615937890437},{"_id":"public/2021/hello-world/index.html","hash":"75662bbef007a913967705fa5d9391e6cdfb9063","modified":1615937890437},{"_id":"public/archives/index.html","hash":"0e909aae8a3107cd996d35c74d8369726cf7088f","modified":1615937890437},{"_id":"public/archives/page/2/index.html","hash":"5a5eed0a39546c559a1a9643cd1e12b8a04918ce","modified":1615927625997},{"_id":"public/archives/page/3/index.html","hash":"4c23ca3cfe9763274e8c2009a8b8bea1a9017af5","modified":1615927372059},{"_id":"public/archives/2021/index.html","hash":"fb82de8d9f6e7a3b0987ad90b67cac483381298c","modified":1615937890437},{"_id":"public/archives/2021/page/2/index.html","hash":"b22ad5367f79268a31c4d3c7cae464b75cec9592","modified":1615927625997},{"_id":"public/archives/2021/03/index.html","hash":"5b77c12c2b6d44c78e762e9583f5ae3b47f05cfc","modified":1615937890437},{"_id":"public/archives/2021/03/page/2/index.html","hash":"95730c7ef1a0dc129cb91732d56aca03560a7dec","modified":1615927625997},{"_id":"public/archives/2021/page/3/index.html","hash":"0fb7ed32a9f5cd49eaea74604d34eee085ed891e","modified":1615927372059},{"_id":"public/archives/2021/03/page/3/index.html","hash":"0f831f5a50ace56a9978cebd416db7b2dea85a5d","modified":1615927372059},{"_id":"public/categories/开发手册/index.html","hash":"274d95ad5241cef75c3580345f8e8e2ee5de7281","modified":1615937890437},{"_id":"public/categories/GO语言/index.html","hash":"ff1f342992e5848d1afa1d30a0d88779f94c92f9","modified":1615937890437},{"_id":"public/categories/技术场景/index.html","hash":"f7011eaa9949b49ba24008690b71f7d265c0f1a9","modified":1615937890437},{"_id":"public/categories/技术场景/page/2/index.html","hash":"cf020f8382cce313c75dc6d1efba5217baa2beda","modified":1615927372059},{"_id":"public/categories/企业网络/index.html","hash":"94a7db1a8483343db2db989b7b154208e1044c07","modified":1615937890437},{"_id":"public/index.html","hash":"b4f0136a453fb6acea7fb9ac2066829c55763970","modified":1615937890437},{"_id":"public/tags/开发手册/index.html","hash":"9bce0580086214e51b20362b748380a02027a827","modified":1615937890437},{"_id":"public/tags/GO语言/index.html","hash":"5d4a87c1fc239ca3e03cfa7353ed94fd137b13c6","modified":1615937890437},{"_id":"public/tags/Go语言/index.html","hash":"4414fd4979efe5b2e755a5590bc6c3dfe6b59850","modified":1615937890437},{"_id":"public/tags/技术场景/index.html","hash":"a2237c9e11b687ab309dc9ab2678168faf35b25b","modified":1615937890437},{"_id":"public/tags/技术场景/page/2/index.html","hash":"1a5c5657694f2eec812ecae390b1f3315ad0eca3","modified":1615927372059},{"_id":"public/tags/企业网络/index.html","hash":"fbb3f4bcc3beee2ad1f75cb250596049cb7abd82","modified":1615937890437},{"_id":"public/js/common.js","hash":"eb3f1a8a8d25935b4f159d460baf8f2a370b41e8","modified":1615927372059},{"_id":"public/img/browserconfig.xml","hash":"fdf64346d968f84f0d72f86e9f4c6cdb5ddeb625","modified":1615927372059},{"_id":"public/img/favicon-16x16.png","hash":"4a4bd7faabeb5e003597d5873cdba0fa22a95117","modified":1615927372059},{"_id":"public/img/favicon.ico","hash":"a507ef7ce3be6c89ae070d4bc86b257ba955bafe","modified":1615927372059},{"_id":"public/img/mstile-310x150.png","hash":"bc28b44c3ea2ec4e6755c37f10c01c8e7412dce4","modified":1615927372059},{"_id":"public/CNAME","hash":"308f7cb4c684104087d4cdef9aff7b9307a199c4","modified":1615927372059},{"_id":"public/favicon.ico","hash":"a507ef7ce3be6c89ae070d4bc86b257ba955bafe","modified":1615927372059},{"_id":"public/fonts/iconfont.eot","hash":"87bd2f3e4f3b26d80fe97943b8deec98168affc2","modified":1615927372059},{"_id":"public/fonts/iconfont.ttf","hash":"cbe6cffb573ef986e91c6705c9839a9c53edb1c8","modified":1615927372059},{"_id":"public/fonts/iconfont.woff","hash":"37b11e65abc366b2b4a212a302b36f7152921625","modified":1615927372059},{"_id":"public/img/404.jpg","hash":"9f47a79e8ed23cda7708c7b870dffaf7f30ef188","modified":1615927372059},{"_id":"public/img/article_default.jpg","hash":"d7582abaa968f61c0d2cf63156437df79af5ca65","modified":1615927372059},{"_id":"public/img/bg.jpg","hash":"a9de124ccc98b611531bdef75764637a0b8fd36e","modified":1615927372059},{"_id":"public/img/loader.gif","hash":"ed66db39f70b6240bd1cdcd8afa0d9c29cb2c7f3","modified":1615927372059},{"_id":"public/img/logo.png","hash":"ce0a4ef1745f9f30cc2e14084316081f3a6f09af","modified":1615927372059},{"_id":"public/img/development-manual/jwt_title.png","hash":"ea0b25b93a72ed641b7a745cab6e1b5f1e9f4b0e","modified":1615927372059},{"_id":"public/img/development-manual/oath2_title.png","hash":"7810b694d4bdd008b72de6bc94b7880cd01f14ff","modified":1615927372059},{"_id":"public/img/golang/channel_title.png","hash":"1fc10661e280d962ea32f595fe994df328a365ba","modified":1615927372059},{"_id":"public/img/golang/context_title.png","hash":"422a5ce7f0868ecaad4efa54bad7b664a0b2087c","modified":1615927372059},{"_id":"public/img/golang/interface_title.png","hash":"44bfed96f40c0de740d10512c036efb5e26ef8f2","modified":1615927372059},{"_id":"public/img/golang/json_title.png","hash":"a3021371058e0dab35ef03a49b06142d38136551","modified":1615927372059},{"_id":"public/img/golang/protobuffer_plugin_title.png","hash":"42a94211d48a37ad4fc5667f616e2f2679be8496","modified":1615927372059},{"_id":"public/img/network-deploy/dns_title.png","hash":"d2c430db0dbefc53c54dd2aed7e16264bafb3559","modified":1615927372059},{"_id":"public/img/network-deploy/docker_title.png","hash":"8cc6f642c76ac81994adef95898eddad5ce81c46","modified":1615927372059},{"_id":"public/img/network-deploy/https_title.png","hash":"8e5dfc1a3d2380ad8b0498a42cb1f4ab38098200","modified":1615927372059},{"_id":"public/img/technology-sense/code_version_title.png","hash":"64b7902358d308591ced2d43e70280d2e4905105","modified":1615927372059},{"_id":"public/img/technology-sense/data_repeated_title.png","hash":"7c11781da1ef358ffe1d97d3eb756725e0f847f2","modified":1615927372059},{"_id":"public/img/network-deploy/nginx_title.png","hash":"5632e2b2fcf7582cc66672d24e93010cf7534c57","modified":1615927372059},{"_id":"public/img/technology-sense/hash_crash_title.png","hash":"18e8120e4039f4146e47242044a612bbc787ea07","modified":1615927372059},{"_id":"public/img/technology-sense/optimize_invation_code_title.png","hash":"42500f16b2df408959fd6dddaecd0faefc241c3c","modified":1615927372059},{"_id":"public/img/technology-sense/optimize_live_room_title.png","hash":"d1a4756495f2233df8aee4f0399611137f438b5c","modified":1615927372059},{"_id":"public/img/technology-sense/optimize_sensitive_words_title.png","hash":"29b1831b8b4425fd635c000626e55737d4a97a00","modified":1615927372059},{"_id":"public/img/technology-sense/request_repeated_title.png","hash":"c731eee3aefe36b0d10b8d9cfca570233d919fb6","modified":1615927372059},{"_id":"public/img/technology-sense/sql_inject_title.png","hash":"54aba548fe39acd02afeecfc49a542bbe25d5786","modified":1615927372059},{"_id":"public/img/technology-sense/sum_big_file_hash_value_title.png","hash":"7eeb9e9cabab9e03de8218fc0e5a3363fe7bad71","modified":1615927372059},{"_id":"public/2021/development-manual-jwt/index/2.png","hash":"97754edd37e1e6187a3599585fdd17b1ea87bade","modified":1615927372059},{"_id":"public/2021/development-manual-jwt/index/1.png","hash":"ea0b25b93a72ed641b7a745cab6e1b5f1e9f4b0e","modified":1615927372059},{"_id":"public/2021/development-manual-oath2/index/1.png","hash":"1338282afa02344f21ba88f63aaa95d860598386","modified":1615927372059},{"_id":"public/2021/development-manual-oath2/index/2.png","hash":"a636597b4fcf6254edaa6757670f8cfeb1590b02","modified":1615927372059},{"_id":"public/2021/development-manual-oath2/index/3.png","hash":"1e141f6c9983dd11303c736bdb36e3089075990a","modified":1615927372059},{"_id":"public/2021/development-manual-oath2/index/7.png","hash":"00a1bf3b7b492b84debbbc99757d1ae066654cb2","modified":1615927372059},{"_id":"public/2021/development-manual-oath2/index/8.png","hash":"79d9ace7f6b3b1171404ab6ce9a034fae4914363","modified":1615927372059},{"_id":"public/2021/development-manual-oath2/index/title.png","hash":"7810b694d4bdd008b72de6bc94b7880cd01f14ff","modified":1615927372059},{"_id":"public/img/manifest.json","hash":"918ac4ddf802badeeda0c1e598e1247f10fdb6a3","modified":1615927372059},{"_id":"public/scss/base/index.css","hash":"b5f7aac502c5cce0034f655e816ff1f034bbf191","modified":1615927372059},{"_id":"public/scss/views/page/about.css","hash":"f90ae1b4cf6af7fce11b5a43d7c603932578516d","modified":1615927372059},{"_id":"public/scss/views/page/archive.css","hash":"792d23471a6ca60d82623dccb4db975110c98a5e","modified":1615927372059},{"_id":"public/scss/views/page/category.css","hash":"7e3731ded7a245d6a8f7f15ca25ec2e0eb183859","modified":1615927372059},{"_id":"public/scss/views/page/error.css","hash":"6c5d23595bf4b2c13ffd4ed91c64d5cb980c1010","modified":1615927372059},{"_id":"public/scss/views/page/index.css","hash":"7e3731ded7a245d6a8f7f15ca25ec2e0eb183859","modified":1615927372059},{"_id":"public/scss/views/page/post.css","hash":"bd314e8bd996bef7e74343eda4a0b4c82307cec8","modified":1615927372059},{"_id":"public/scss/views/page/search.css","hash":"1e078b0236d167f8c3090db50345e249a42d8f0d","modified":1615927372059},{"_id":"public/scss/views/page/tag.css","hash":"7e3731ded7a245d6a8f7f15ca25ec2e0eb183859","modified":1615927372059},{"_id":"public/js/md5.min.js","hash":"21c2a499f862150d66ecbf728623f8d6cb0bfb3a","modified":1615927372059},{"_id":"public/js/common/animation.js","hash":"e20bd33dcf4f7d9834ef3809d9c34f2577198ae8","modified":1615927372059},{"_id":"public/js/common/utils.js","hash":"39162db90c091127d796a3b7df7c7754ec49233b","modified":1615927372059},{"_id":"public/js/layout/back-top.js","hash":"9228f4a4dd49486090b9c5943b1f28a75aa74c68","modified":1615927372059},{"_id":"public/js/layout/header.js","hash":"15c354ac06c2886f0ef80c1fa0a037d7086e8278","modified":1615927372059},{"_id":"public/js/layout/loading.js","hash":"4678f71ab17f627c14df93d64876ec6256a62890","modified":1615927372059},{"_id":"public/js/layout/post.js","hash":"d283b30fec045c8f597122ef1188f192061663d6","modified":1615927372059},{"_id":"public/js/common/pack.js","hash":"7e59daf725f6b324d45fcdc04bb32ae73e553a65","modified":1615927372059},{"_id":"public/js/libs/axios.min.js","hash":"76e76191dab7742e6a189506660a435115780184","modified":1615927372059},{"_id":"public/js/libs/lunr.min.js","hash":"d4a1bcd3d4e5de75caf002948ee6059241811cc6","modified":1615927372059},{"_id":"public/js/page/search.js","hash":"408f84470f774c90db99408db22571b53474fad6","modified":1615927372059},{"_id":"public/js/page/post.js","hash":"d7f9aab4ace1a8090872bf15c71ae7e37218d360","modified":1615927372059},{"_id":"public/img/qrcode.png","hash":"942b3b214686e3ea292d2393ad70830f2b06d12e","modified":1615927372059},{"_id":"source/_posts/document-tool-hexo.md","hash":"09357e1cdb28baba44db60115019f7aa525fed8f","modified":1615935963557},{"_id":"source/_posts/document-tool-hexo/image-20210317061959427.png","hash":"34c07cc0c35f64391719ca727bfdf4e050d2e4e9","modified":1615933203326},{"_id":"source/_posts/document-tool-hexo/image-20210317053248148.png","hash":"c7ecc33cbfc41aed2b6a9525f0a05c6937483731","modified":1615930374228},{"_id":"source/_posts/document-tool-hexo/image-20210317054230880.png","hash":"99f38f54f74aab142232cfc2a15dc877b77fcf7e","modified":1615930957155},{"_id":"source/_posts/document-tool-hexo/image-20210317054934953.png","hash":"616b722630bf9e04494bddb83c27c336c45867b5","modified":1615931378971},{"_id":"source/_posts/document-tool-hexo/image-20210317055530921.png","hash":"6d2f49270875d0a0001a0606abf91611cd85ce7d","modified":1615931749633},{"_id":"source/_posts/document-tool-hexo/image-20210317061018866.png","hash":"8d4bea3433592f3ed79b4b3e215c5451f4c7bb72","modified":1615932622895},{"_id":"source/_posts/document-tool-hexo/image-20210317053920237.png","hash":"fdd98c93a2c4a5c428edfa40fa9df35a2ca44fca","modified":1615930764829},{"_id":"source/_posts/document-tool-hexo/image-20210317070431369.png","hash":"e2b700f2fbeb7da10bddb1f93dae3e9075513791","modified":1615935874661},{"_id":"themes/hexo-theme-matery/.gitignore","hash":"727607929a51db7ea10968f547c26041eee9cfff","modified":1606456707000},{"_id":"themes/hexo-theme-matery/CHANGELOG.md","hash":"084ec8b110a20170d08a0aa5fd8accf601051835","modified":1606456707000},{"_id":"themes/hexo-theme-matery/README_CN.md","hash":"089de96e2165ea2a8a3adf38ebda85b65e7f716e","modified":1606456707000},{"_id":"themes/hexo-theme-matery/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1606456707000},{"_id":"themes/hexo-theme-matery/README.md","hash":"0366f3d50b18d095b0581e7b5974e3283d693884","modified":1606456707000},{"_id":"themes/hexo-theme-matery/languages/default.yml","hash":"54ccc01b097c5bf6820f0edfcece1a87b78ab32d","modified":1606456707000},{"_id":"themes/hexo-theme-matery/_config.yml","hash":"056cf5f020e9a240522808b6872897f6dcee79fa","modified":1606456707000},{"_id":"themes/hexo-theme-matery/languages/zh-CN.yml","hash":"a957b05f70265a86a87d922e18488571809d2472","modified":1606456707000},{"_id":"themes/hexo-theme-matery/languages/zh-HK.yml","hash":"ae34ac0e175c3037675722e436637efbceea32f0","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/404.ejs","hash":"9c8ca67377211e5d60fdde272a975faa9a91a22a","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/about.ejs","hash":"41849f9300b8dc47048333fcf4a897dd8a2a13ca","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/archive.ejs","hash":"cdac701de8370f9f3794a0eed4165983993a1ca7","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/bb.ejs","hash":"21959d702f17a3d98b716daf44c8b5eecd59c7c5","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/categories.ejs","hash":"8e54665cc25d7c333da7d9f312987190be6215da","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/category.ejs","hash":"00019bca11fb46477f22017cb1f5ad8444da0580","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/contact.ejs","hash":"19d62e521c4253496db559478db5164ddfd2480e","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/friends.ejs","hash":"92892bab5578ccf758ce57e19fca08be80d0d5b9","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/index.ejs","hash":"4dc6f08e7709cc04e886be72dbf0d06469f0effc","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/layout.ejs","hash":"974b44eb3e343cd3ee57ebad34bbb0eff4184400","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/tags.ejs","hash":"cf9517aa6a0111355121f44615d6923e312283c7","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/post.ejs","hash":"90b5a4c1f70e4756db569c15a7c6cad0c77c4500","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/tag.ejs","hash":"85a4b05bd8a6ad0f17ff2e97dae56949b379c204","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/back-top.ejs","hash":"47ee36a042bb6d52bbe1d0f329637e8ffcf1d0aa","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/background.ejs","hash":"aef6edeeb11209831a11d8c7f5d59992e2573335","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-analytics.ejs","hash":"3bbcdb474ca1dcad514bdc4b7763e17c55df04fd","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-push.ejs","hash":"2cebcc5ea3614d7f76ec36670e68050cbe611202","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover.ejs","hash":"02191109712f61c0e487b8f0b8466597181a9004","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover-content.ejs","hash":"28617bf2a35a4269eba6df466acd174e416d2d1e","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/changyan.ejs","hash":"cd919d31564e118c2ee8d5cbfb7d51ee6da15d82","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/disqus.ejs","hash":"b2dc2c8b5ed56815e55cc2ea54a6dc4eeba2375d","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/footer.ejs","hash":"3be24e4c370671eda53bdfd99fb748f4a22948ba","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/github-link.ejs","hash":"3aeb581bd78ab8e15b858e4c44c03bcf92f20b9e","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/gitalk.ejs","hash":"2aa8fbb04b046fa7679092a48372d7e036835dff","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/gitment.ejs","hash":"90f6218512ef2eab63ada7ad2fc766ae635a2297","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/google-analytics.ejs","hash":"5f4992205617da5f8cc5863c62b5ec46e414e2fb","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/head.ejs","hash":"f8438ac80df005934a330b029de292d26f0b6ecb","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/header.ejs","hash":"59e38c70f3d8e7165e686e5e84a627835f4321b0","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/livere.ejs","hash":"9c3401b42ea7f26410a5593bae93ada7e57b43be","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/index-cover.ejs","hash":"76b4a37e0364380b143fdf94bf1a5e6941564414","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/minivaline.ejs","hash":"5f09386aece8f9cf31f6059bbde79cd6c5171493","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/mobile-nav.ejs","hash":"cb0cb452be1cd1857ba600f04025b506f3b6fc79","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/navigation.ejs","hash":"78b70ff24b3039c871331ebec114b936c1756cc8","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/paging.ejs","hash":"e2df12cf92a82b1a7a7add2eac1db1d954bc5511","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/post-cover.ejs","hash":"d1c873c5de54498c722e155aadb8c0ec39485dfa","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail-toc.ejs","hash":"3ff94aff01936242a9f4e1f31adb9b43bfab8d53","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/post-statis.ejs","hash":"04889f9031743c6b081d02fa4027b0dbfcc45ecf","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail.ejs","hash":"880ebaf78a947631a38ad0b3d65201315845a264","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/prev-next.ejs","hash":"c76b78782ea82340104fccc089417572e0adece4","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/reprint-statement.ejs","hash":"0ce3f9361f558b99cc2f059c5e50b0e2a152ae38","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/reward.ejs","hash":"ffc55bc7e73bc698bfc58d8e3780c336b83282cf","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/search.ejs","hash":"150529c9fb9aa8ddb42ec3e02645d301faa2503b","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/share.ejs","hash":"c941730a2471d6aab367cbb6e09ed08b56c83143","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/artitalk.ejs","hash":"b14e486f12b9ac42a273b80e4d785fcb94cf04b2","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/social-link.ejs","hash":"6f871bd3a70f720e4e451f1f4f625cbc6d8994a4","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/category-cloud.ejs","hash":"1b3df1009234c0112424b497b18b4ad8240b3bc7","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/valine.ejs","hash":"0e4c0a6154aa34007849928ca88f05b6185b256e","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/music.ejs","hash":"e9e3e327d5de9d7aeadbde32e1d558652d9e9195","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/dream.ejs","hash":"9a472ad5591100cdb65d0df9d01034163bd6dd9d","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/category-radar.ejs","hash":"1d8747fda89a0b2ca3c7008867cbfeecad0578a6","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/my-gallery.ejs","hash":"65a2d2f9722f84c7fd98f6bdf79087a14848ebd8","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/my-projects.ejs","hash":"ef60b64021fa349b0048425d858dfcf6c906fede","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/my-skills.ejs","hash":"89a0092df72d23093128f2fbbdc8ca7f83ebcfd9","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/post-charts.ejs","hash":"ab5f986f428215941aeaa0c88aefd440c47d3bcf","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/recommend.ejs","hash":"8551137e94ca4e2e3b8b63d5626255884cb60cb5","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/post-calendar.ejs","hash":"48821e644bc73553d7c5c56d2e8ee111a70cd776","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-cloud.ejs","hash":"fc42b72cddc231f7485cdc1fd6852b66be6add26","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-wordcloud.ejs","hash":"487aacb2454d6bf0d21cdb07ddd1fd5ddbca9038","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/video.ejs","hash":"a0e002377af2a7f7e4da6d9a644de97adb035925","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/js/search.js","hash":"e1482406c58ea2a0eb178d7e4efb2c879cdddc80","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/css/matery.css","hash":"a630f6e8643904073dce9eada57b5c16c4dba5e2","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/contact.png","hash":"443ea472dd49b74d9d70295837eb381c8c64f02c","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","hash":"940ded3ea12c2fe1ab0820d2831ec405f3f1fe9f","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","hash":"fbb58c37e2c74f127ae0c566afa9b48889aab79f","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.css","hash":"62e5474893dece076534352f564ceabd6e088a5a","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","hash":"9c6632aeec67d3e84a1434884aa801514ff8103b","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1606456707000},{"_id":"source/_posts/document-tool-hexo/image-20210317062108396.png","hash":"6750d0f9f6c26702961825c7841f106a8944e067","modified":1615933281805},{"_id":"source/_posts/document-tool-hexo/image-20210317062709087.png","hash":"6bb28395624f3bb6bdbb791c7975e5e618e86560","modified":1615933633442},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","hash":"8fefe38f28804f90116bdcb74a0875c9de9f3b7d","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1606456707000},{"_id":"source/_posts/document-tool-hexo/image-20210317070525288.png","hash":"18572235059574baf8c6b56a471a8decf87cdc42","modified":1615935930569},{"_id":"themes/hexo-theme-matery/source/img/android-chrome-192x192.png","hash":"e453fd09e6bece00eaa37e0a85c05a129909cce5","modified":1615927845530},{"_id":"themes/hexo-theme-matery/source/img/android-chrome-256x256.png","hash":"80b8da536a02ce6cf2d16a58bfe8026f1eb158d3","modified":1615927845532},{"_id":"themes/hexo-theme-matery/source/img/android-chrome-144x144.png","hash":"f68f2abae37de4216b2125695aa6f1598753d82f","modified":1615927845528},{"_id":"themes/hexo-theme-matery/source/img/android-chrome-36x36.png","hash":"2009e441e84b92f39d10c913c6998f3f5944720e","modified":1615927845521},{"_id":"themes/hexo-theme-matery/source/img/android-chrome-48x48.png","hash":"d9cc589a6258fe734a6fdfe98dcc0385e6f81abe","modified":1615927845523},{"_id":"themes/hexo-theme-matery/source/img/android-chrome-72x72.png","hash":"a212b8ab0b734810e8bdb20e58c9d7408ebd4f86","modified":1615927845524},{"_id":"themes/hexo-theme-matery/source/img/android-chrome-96x96.png","hash":"8492f33f0b78345214d91b41e067329913f8d1c4","modified":1615927845526},{"_id":"themes/hexo-theme-matery/source/img/apple-touch-icon-114x114.png","hash":"37491bc5bf5eeada5b866579884f5b9a2a4a1c20","modified":1615927845545},{"_id":"themes/hexo-theme-matery/source/img/apple-touch-icon-120x120.png","hash":"4942aa68c6a5a993f3d207a967ea16e2a0f61d90","modified":1615927845547},{"_id":"themes/hexo-theme-matery/source/img/apple-touch-icon-144x144.png","hash":"f68f2abae37de4216b2125695aa6f1598753d82f","modified":1615927845548},{"_id":"themes/hexo-theme-matery/source/img/apple-touch-icon-152x152.png","hash":"4454fb3cf28be2101cff71626aac0c5967e6fc0a","modified":1615927845550},{"_id":"themes/hexo-theme-matery/source/img/apple-touch-icon-167x167.png","hash":"8d12c59988e6bca5980d2412631cc3a8f2a562e8","modified":1615927845552},{"_id":"themes/hexo-theme-matery/source/img/apple-touch-icon-57x57.png","hash":"8c214c315782be54d0b1f9e406779d6fde7d78ea","modified":1615927845538},{"_id":"themes/hexo-theme-matery/source/img/apple-touch-icon-180x180.png","hash":"5c50538deba5ce458d9b95ecea4ebdcab1e49d0a","modified":1615927845554},{"_id":"themes/hexo-theme-matery/source/img/apple-touch-icon-60x60.png","hash":"553f2a1b1e3c40a49a0db72f7fe454025cf4fb74","modified":1615927845540},{"_id":"themes/hexo-theme-matery/source/img/apple-touch-icon-72x72.png","hash":"a212b8ab0b734810e8bdb20e58c9d7408ebd4f86","modified":1615927845541},{"_id":"themes/hexo-theme-matery/source/img/apple-touch-icon-precomposed.png","hash":"5c50538deba5ce458d9b95ecea4ebdcab1e49d0a","modified":1615927845558},{"_id":"themes/hexo-theme-matery/source/img/apple-touch-icon-76x76.png","hash":"2e2a85640b52c416b60b0e528f893b52b05cbc98","modified":1615927845543},{"_id":"themes/hexo-theme-matery/source/img/apple-touch-icon.png","hash":"5c50538deba5ce458d9b95ecea4ebdcab1e49d0a","modified":1615927845558},{"_id":"themes/hexo-theme-matery/source/img/article_default.jpg","hash":"d7582abaa968f61c0d2cf63156437df79af5ca65","modified":1615806080408},{"_id":"themes/hexo-theme-matery/source/img/bg.jpg","hash":"a9de124ccc98b611531bdef75764637a0b8fd36e","modified":1615806417555},{"_id":"themes/hexo-theme-matery/source/img/favicon-16x16.png","hash":"4a4bd7faabeb5e003597d5873cdba0fa22a95117","modified":1615927845513},{"_id":"themes/hexo-theme-matery/source/img/browserconfig.xml","hash":"fdf64346d968f84f0d72f86e9f4c6cdb5ddeb625","modified":1615927845502},{"_id":"themes/hexo-theme-matery/source/img/favicon-32x32.png","hash":"66bcfbd194d1bd88f82b9114d38aad333364ae97","modified":1615927845515},{"_id":"themes/hexo-theme-matery/source/img/favicon-48x48.png","hash":"d9cc589a6258fe734a6fdfe98dcc0385e6f81abe","modified":1615927845517},{"_id":"themes/hexo-theme-matery/source/img/favicon.ico","hash":"a507ef7ce3be6c89ae070d4bc86b257ba955bafe","modified":1615927845519},{"_id":"themes/hexo-theme-matery/source/img/404.jpg","hash":"9f47a79e8ed23cda7708c7b870dffaf7f30ef188","modified":1615807131501},{"_id":"themes/hexo-theme-matery/source/img/android-chrome-384x384.png","hash":"02d9bb2075dbe5a41bd2490665b1b13697a080e6","modified":1615927845534},{"_id":"themes/hexo-theme-matery/source/img/android-chrome-512x512.png","hash":"4bbe04bf20da7403da9233d05c3042e4b023f418","modified":1615927845536},{"_id":"themes/hexo-theme-matery/source/img/apple-touch-icon-1024x1024.png","hash":"2a88bbe7a3c78870cc62b397ae7df50e3926e6a7","modified":1615927845556},{"_id":"themes/hexo-theme-matery/source/img/development-manual/jwt_title.png","hash":"ea0b25b93a72ed641b7a745cab6e1b5f1e9f4b0e","modified":1615920715167},{"_id":"themes/hexo-theme-matery/source/img/golang/channel_title.png","hash":"1fc10661e280d962ea32f595fe994df328a365ba","modified":1615924786013},{"_id":"themes/hexo-theme-matery/source/img/golang/context_title.png","hash":"422a5ce7f0868ecaad4efa54bad7b664a0b2087c","modified":1615923519908},{"_id":"themes/hexo-theme-matery/source/img/golang/interface_title.png","hash":"44bfed96f40c0de740d10512c036efb5e26ef8f2","modified":1615921964859},{"_id":"themes/hexo-theme-matery/source/img/golang/json_title.png","hash":"a3021371058e0dab35ef03a49b06142d38136551","modified":1615922782134},{"_id":"themes/hexo-theme-matery/source/img/golang/protobuffer_plugin_title.png","hash":"42a94211d48a37ad4fc5667f616e2f2679be8496","modified":1615926850880},{"_id":"themes/hexo-theme-matery/source/img/network-deploy/dns_title.png","hash":"d2c430db0dbefc53c54dd2aed7e16264bafb3559","modified":1615824949375},{"_id":"themes/hexo-theme-matery/source/img/network-deploy/docker_title.png","hash":"8cc6f642c76ac81994adef95898eddad5ce81c46","modified":1615826736576},{"_id":"themes/hexo-theme-matery/source/img/network-deploy/https_title.png","hash":"8e5dfc1a3d2380ad8b0498a42cb1f4ab38098200","modified":1615825343698},{"_id":"themes/hexo-theme-matery/source/img/network-deploy/nginx_title.png","hash":"5632e2b2fcf7582cc66672d24e93010cf7534c57","modified":1615826461019},{"_id":"themes/hexo-theme-matery/source/img/technology-sense/code_version_title.png","hash":"64b7902358d308591ced2d43e70280d2e4905105","modified":1615923130430},{"_id":"themes/hexo-theme-matery/source/img/technology-sense/data_repeated_title.png","hash":"7c11781da1ef358ffe1d97d3eb756725e0f847f2","modified":1615828714639},{"_id":"themes/hexo-theme-matery/source/img/technology-sense/hash_crash_title.png","hash":"18e8120e4039f4146e47242044a612bbc787ea07","modified":1615915808114},{"_id":"themes/hexo-theme-matery/source/img/technology-sense/optimize_sensitive_words_title.png","hash":"29b1831b8b4425fd635c000626e55737d4a97a00","modified":1615917542900},{"_id":"themes/hexo-theme-matery/source/img/technology-sense/request_repeated_title.png","hash":"c731eee3aefe36b0d10b8d9cfca570233d919fb6","modified":1615828785471},{"_id":"themes/hexo-theme-matery/source/img/technology-sense/sql_inject_title.png","hash":"54aba548fe39acd02afeecfc49a542bbe25d5786","modified":1615915250311},{"_id":"themes/hexo-theme-matery/source/img/technology-sense/sum_big_file_hash_value_title.png","hash":"7eeb9e9cabab9e03de8218fc0e5a3363fe7bad71","modified":1615919214107},{"_id":"themes/hexo-theme-matery/source/img/development-manual/oath2_title.png","hash":"7810b694d4bdd008b72de6bc94b7880cd01f14ff","modified":1615919567389},{"_id":"themes/hexo-theme-matery/source/img/network-deploy/git_title.png","hash":"f7a4eec9b859549237574c5d16502fc8ccec9430","modified":1615831075870},{"_id":"themes/hexo-theme-matery/source/img/technology-sense/optimize_invation_code_title.png","hash":"42500f16b2df408959fd6dddaecd0faefc241c3c","modified":1615918096955},{"_id":"themes/hexo-theme-matery/source/img/technology-sense/optimize_live_room_title.png","hash":"d1a4756495f2233df8aee4f0399611137f438b5c","modified":1615918722528},{"_id":"themes/hexo-theme-matery/source/img/technology-sense/fission_exception_title.png","hash":"9aaf3b04a401b95d589b585a0941b68beb2026e5","modified":1615916215944},{"_id":"source/_posts/document-tool-hexo/image-20210317072734400.png","hash":"2e018acf67cee66e4b879eea53636d30de87b96e","modified":1615937258498},{"_id":"source/_posts/document-tool-hexo/image-20210317072535305.png","hash":"bd4806eef8ad3d3a4af70e07c877796bce993958","modified":1615937139426},{"_id":"source/_posts/document-tool-hexo/image-20210317072646799.png","hash":"c33fe7b33e763480369355f7a2dcf6b6de2c63d0","modified":1615937211017},{"_id":"source/_posts/document-tool-hexo/image-20210317072836775.png","hash":"270baa9ab028d40819d3cbac5a957ea13f9416fc","modified":1615937321882},{"_id":"source/_posts/document-tool-hexo/image-20210317073132318.png","hash":"86115f09a4e427c924f936f9b0203ef123aee8df","modified":1615937496320},{"_id":"source/_posts/document-tool-hexo/image1-20210317070525288.png","hash":"db4dc26a73afae9a001071642ed0ecdce1e9f54e","modified":1615936726686},{"_id":"source/_posts/document-tool-hexo/image-20210317072305295.png","hash":"cf0bb33b5987058ef626df54513285d607b44741","modified":1615936989642},{"_id":"themes/hexo-theme-skapp/source/img/document-tool/hexo_title.png","hash":"b094f637dc902ca4dec31c0e3860649ddca9f484","modified":1615937616226},{"_id":"public/2021/document-tool-hexo/index/image-20210317053248148.png","hash":"e51d6c7f68f27cfea944bf2900c2e2a89a21139d","modified":1615937890437},{"_id":"public/2021/document-tool-hexo/index/image-20210317053920237.png","hash":"616fcaddb9cb1c4eea90e9c7d5c2f3705dda3560","modified":1615937890437},{"_id":"public/2021/document-tool-hexo/index/image-20210317054230880.png","hash":"b25d9becbb42ff39584738ec3d66a1e64508fdb2","modified":1615937890437},{"_id":"public/2021/document-tool-hexo/index/image-20210317055530921.png","hash":"ddd949db1895315afad37be0aa066c2fe598c397","modified":1615937890437},{"_id":"public/2021/document-tool-hexo/index/image-20210317054934953.png","hash":"1bdf78d73f4bc02a958e909b494dee762678dbf3","modified":1615937890437},{"_id":"public/2021/document-tool-hexo/index/image-20210317061018866.png","hash":"6145782607d7b94507d4f2a6c90b74953b406516","modified":1615937890437},{"_id":"public/2021/document-tool-hexo/index/image-20210317061959427.png","hash":"73346d7d077f5d74c5998948014ccbcb790f086f","modified":1615937890437},{"_id":"public/2021/document-tool-hexo/index/image-20210317062108396.png","hash":"7532beeb21fa08a049f026d4b60207e4e77b8822","modified":1615937890437},{"_id":"public/2021/document-tool-hexo/index/image-20210317070431369.png","hash":"f30589612f89d770b888f880e7cb24afb5386cb1","modified":1615937890437},{"_id":"public/2021/document-tool-hexo/index/image-20210317062709087.png","hash":"65d9bccf1bf78b6bc9d4f8ef3e96d91c8335de4a","modified":1615937890437},{"_id":"public/2021/document-tool-hexo/index/image-20210317070525288.png","hash":"0545dd6b11e272f93e7ab8b083421680495defda","modified":1615937890437},{"_id":"public/2021/document-tool-hexo/index/image1-20210317070525288.png","hash":"725b71c41c12b944a8ebcf64a37a4d58a2e5099b","modified":1615937890437},{"_id":"public/2021/document-tool-hexo/index/image-20210317072305295.png","hash":"f6aec633fbb4b161f1196ea69133b9773d822740","modified":1615937890437},{"_id":"public/2021/document-tool-hexo/index/image-20210317072646799.png","hash":"3d86a2d79bb04040aa1ef53f6612309f5c24a05b","modified":1615937890437},{"_id":"public/2021/document-tool-hexo/index/image-20210317072535305.png","hash":"5caaa57342407424da01b0c7c36b839cddd5c5c8","modified":1615937890437},{"_id":"public/2021/document-tool-hexo/index/image-20210317072734400.png","hash":"24acb39168585c62a433b52229cde2bfa9d29e39","modified":1615937890437},{"_id":"public/2021/document-tool-hexo/index/image-20210317072836775.png","hash":"e3daef2ab202a0c71257baa50583f017a85bf175","modified":1615937890437},{"_id":"public/2021/document-tool-hexo/index/image-20210317073132318.png","hash":"7192deea81aa8fa4daae3874c5d19a4c311ccfe5","modified":1615937890437},{"_id":"public/2021/document-tool-hexo/index.html","hash":"314bd6eaafb67ee40a984aae2cf88d4c86a997b0","modified":1615937890437},{"_id":"public/categories/文档工具/index.html","hash":"087c7bf2edfdfb778087712538be3cfcdb3666dc","modified":1615937890437},{"_id":"public/tags/文档工具/index.html","hash":"8f4b219dafa114b829d36dd1f5cc0d61fd5b7715","modified":1615937890437},{"_id":"public/img/document-tool/hexo_title.png","hash":"b094f637dc902ca4dec31c0e3860649ddca9f484","modified":1615937890437}],"Category":[{"name":"开发手册","_id":"ckmchg4i000027gvldl6e0rt2"},{"name":"GO语言","_id":"ckmchg4ij000d7gvlezs52glt"},{"name":"技术场景","_id":"ckmchg4jk00177gvl8r7se7l9"},{"name":"企业网络","_id":"ckmchg4jt001f7gvlamd5dwg7"},{"name":"文档工具","_id":"ckmcmmaqw0001mwvl6cpd28q6"}],"Data":[{"_id":"contact","data":[{"title":"github","icon":"icon-github","link":"https://github.com/yuansudong"},{"title":"email","icon":"icon-email","link":"mailto:1145919989@qq.com"},{"title":"qq","icon":"icon-qq","link":"/atom.xml"}]},{"_id":"favicons","data":["<link rel=\"shortcut icon\" href=\"/img//favicon.ico\">","<link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/img//favicon-16x16.png\">","<link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/img//favicon-32x32.png\">","<link rel=\"icon\" type=\"image/png\" sizes=\"48x48\" href=\"/img//favicon-48x48.png\">","<link rel=\"manifest\" href=\"/img//manifest.json\">","<meta name=\"mobile-web-app-capable\" content=\"yes\">","<meta name=\"theme-color\" content=\"#fff\">","<meta name=\"application-name\">","<link rel=\"apple-touch-icon\" sizes=\"57x57\" href=\"/img//apple-touch-icon-57x57.png\">","<link rel=\"apple-touch-icon\" sizes=\"60x60\" href=\"/img//apple-touch-icon-60x60.png\">","<link rel=\"apple-touch-icon\" sizes=\"72x72\" href=\"/img//apple-touch-icon-72x72.png\">","<link rel=\"apple-touch-icon\" sizes=\"76x76\" href=\"/img//apple-touch-icon-76x76.png\">","<link rel=\"apple-touch-icon\" sizes=\"114x114\" href=\"/img//apple-touch-icon-114x114.png\">","<link rel=\"apple-touch-icon\" sizes=\"120x120\" href=\"/img//apple-touch-icon-120x120.png\">","<link rel=\"apple-touch-icon\" sizes=\"144x144\" href=\"/img//apple-touch-icon-144x144.png\">","<link rel=\"apple-touch-icon\" sizes=\"152x152\" href=\"/img//apple-touch-icon-152x152.png\">","<link rel=\"apple-touch-icon\" sizes=\"167x167\" href=\"/img//apple-touch-icon-167x167.png\">","<link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/img//apple-touch-icon-180x180.png\">","<link rel=\"apple-touch-icon\" sizes=\"1024x1024\" href=\"/img//apple-touch-icon-1024x1024.png\">","<meta name=\"apple-mobile-web-app-capable\" content=\"yes\">","<meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black-translucent\">","<meta name=\"apple-mobile-web-app-title\">","<meta name=\"msapplication-TileColor\" content=\"#fff\">","<meta name=\"msapplication-TileImage\" content=\"/img//mstile-144x144.png\">","<meta name=\"msapplication-config\" content=\"/img//browserconfig.xml\">"]}],"Page":[],"Post":[{"title":"开发手册之jwt,以google api为例","cover":"/img/development-manual/jwt_title.png","subtitle":"开发手册之jwt,以google api为例","author":{"nick":"袁苏东","link":"https://github.com/yuansudong"},"typora-root-url":"development-manual-jwt","_content":"\nJWT,JSON WEB TOKEN的缩写.其存在的目的是为了在网络应用间传递声明的一种基于JSON格式的标准.\n\n\n\n该标准定义在 RFC7519 文件中,可通过下列的连接访问\n\n\n\n```\nhttps://tools.ietf.org/html/rfc7519\n```\n\n\n\n其使用的场景一般存在于分布式站点的单点登录(SSO). 其用途是用来在身份提供者和服务提供者间传递被认证的用户信息.\n\n\n\n服务提供者验证JWT的合法性,倘若合法,便会为服务访问者提供服务.\n\n\n\n## 1.使用场景\n\n\n\n### 01.用户代理与服务器之间\n\n\n\n![图片](/1.png)\n\n\n\nstep 1 : 输入用户名和密码\n\nstep 2 : 携带用户名和密码,发起HTTP请求\n\nstep 3 : 验证用户名和密码的正确性\n\nstep 4 : 验证合法,返回JWT TOKEN\n\nstep 5 : 使用服务\n\nstep 6 : 携带JWT TOKEB,发起HTTP请求\n\nstep 7 : 验证JWT TOKEN的合法性\n\nstep 8 : Token合法,返回数据\n\nstep 9 : 通过UI呈现给用户\n\n\n\n### 02.服务与服务之间\n\n\n\n![图片](/2.png)\n\n\n\n\n\nstep 1 : 创建JWT TOKEN,向服务B发起获取访问令牌的请求\n\nstep 2 : 验证JWT TOKEN的合法性\n\nstep 3 : 返回访问令牌\n\nstep 4 : 携带访问令牌,访问服务B的API\n\n\n\n## 2.应用举例\n\n\n\n用户代理与服务之间比较常见,下面就以服务与服务之间的认证举例,其案例是GOOGLE API中的OATH2.0 SERVICE ACCOUNT 流程.\n\n\n\n### 01.在GOOGLE API CONSOLE 创建服务账号.\n\n\n\n创建服务账号后,你会拿到如下列的JSON文件\n\n\n\n```\n{\n  \"type\": \"service_account\",\n  \"project_id\": \"flowing-precept-285304\",\n  \"private_key_id\": \"7f7a09bf7f9e9ec758409bb5e43e8f218237e65e\",\n  \"private_key\": \"-----BEGIN PRIVATE KEY-----\\nMIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCoHvXGNLDa6pXt\\nI7kv9K3J6HlEv3J42cy87Og4b9nUlUeVZ6AQBnFfwIGY8+4E8dpMs1oYAFTjcFch\\nmg2eM28MTCSKS9+7CKSLAHEZS4eFo108ostBbvJPdMDwcQPQ38/VzOtcS8rwI/tv\\n/1vrhUed6hOIhKAhPzIyMKOvyQkhzuo1PthHxIxLxg48NfjWqIcIR2D8v4SAAV6s\\nm8iXsOIU1fp+r4Y5EPYJcGKt9j/eXtxHnP7sNmpX1/ves79mAIJBgEej/4Jm4xlx\\nyDm7wjj+CBTBikrrW5RvSu5JgJu0euJsGEtzd4QMFYGNxqtGpiGDiRR4TWAbbdNz\\nrVs4a4hJAgMBAAECggEAFOt9U8OcujD0pQSL966vrW8zH93exbD8bAniv5sTdQN6\\nW9oALd5PX0XaGolH9e+OZXrv3Aq2hXKmNPUxep0V1WboKRlV5rUlnHJaoHYoj/WL\\nFY+AUU0X89EobQLzIZuoBgewxdRclVM053PUIVN9XOYStisireBqQ5qP08DlVQJx\\nnqipOyJFurjVw/IXkpaqhuxju+jWtFEr+JVrhPsqV5/7mCAWNZY1EUgWHxjWjvRc\\nateVujbhZranEjDkhkGvTBNklaw78SNUq6VYX2G5B91CzLNeIdXQnJa5PFV2u18P\\npArXzPNrz7eGMAGDE3kQozTsVRUp86kli9dsWjhwnQKBgQDdfssyEHg1eNUCvpLx\\nVHfBC9DSK+v5nvE70yamUcS6na6dD/CvDHYmWJ7kLNW1zv/hVbKEth07eI2NOM9b\\np3Eb5V3key8CDui7yZ/5areosfOBxfpSbcHe2p5VkEV3VEz1kTJc4rsBJSkLJ4Rl\\n6mr9nArcwJapC9AORw/85rBoPwKBgQDCT5p8ACCFQKtnEUbg0ADVodZwa0mOa+ms\\nEhN4hnFGzRAYxn7agxN19SdGdtz+t+qBS6IyFE0+JDGrvchNi7Lq/2moSDZBE9lp\\nFY6eiCmIzrlMIfMEWbCcfG3hnQz2dGb2tXbHTPxmrS8EHeD8N8fdvC+okidQ+v0h\\nx8kHP+gtdwKBgC/RwQLFBX7d4HcgN888YkJeT64gZ2jUBNbaplyACM4VXu5v05Gn\\nShbLSTqP52/CCgJXIxx9yN/fDghwPGxYQRY5tcSvR53VJC/uvsf1X0Nfb+gTmxCS\\nu6lmX4qvhB/YJmlZ+JqPJLqBkFPlKzNpocGxH7M7LQvADiIW+3+pOmq3AoGAcRBM\\nvdZ9FcxZb/GXonyl36j51BQ5isuz/lHOTpU8GIx9z0zAx3j5u+tYXSIQ2Y4+v9k4\\nmZdCkuQQmvQlNyoQg7j2y9qo5xkbqo/Gmuxz7o0LOQeQFnnx0Dx+24a84jM9LlTM\\nto9PVpdzAhw4q8nxXE6CFL5mbjJ9VEih6rv+52UCgYBxvL/CP26pHjc/6Lty1r+5\\nhFX6et6awX0KXI9/JUtb1bcv9gKTCtfvieaovKHlkvjpTHYDEw89JKxcf6cpDca2\\nmy0cI/8q1aV3EK5yWN5KJwh13+jmA4gAgNdT91RiWE5Mhgp8Y+OaoNWzJ1WDLu31\\npNN8Yrbi9RNznlbe1m30Qw==\\n-----END PRIVATE KEY-----\\n\",\n  \"client_email\": \"id-741@flowing-precept-285304.iam.gserviceaccount.com\",\n  \"client_id\": \"104490524108382551606\",\n  \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n  \"token_uri\": \"https://oauth2.googleapis.com/token\",\n  \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\n  \"client_x509_cert_url\": \"https://www.googleapis.com/robot/v1/metadata/x509/id-741%40flowing-precept-285304.iam.gserviceaccount.com\"\n}\n```\n\n \n\n#### 02.创建JWT\n\n\n\nJWT的格式,诸如下面的格式.\n\n\n\n```\n{Base64url encoded header}.{Base64url encoded claim set}.{Base64url encoded signature}\n```\n\n\n\n\n\nJWT Header\n\n\n\n标头由两个字段组成，这两个字段指示签名算法和令牌的格式. 这两个字段都是必需的，每个字段只有一个值。随着其他算法和格式的引入，此标题将相应地更改\n\n\n\n```\n{\"alg\":\"RS256\",\"typ\":\"JWT\"}\n```\n\n\n\nalg 代表签名算法, typ代表令牌的格式\n\n\n\nJWT签名算法中，一般有两个选择，一个采用HS256,另外一个就是采用RS256.\n\n\n\n签名实际上是一个加密的过程，生成一段标识（也是JWT的一部分）作为接收方验证信息是否被篡改的依据。\n\n\n\nRS256 (采用SHA-256 的 RSA 签名) 是一种非对称算法, 它使用公共/私钥对: 标识提供方采用私钥生成签名, JWT 的使用方获取公钥以验证签名。由于公钥 (与私钥相比) 不需要保护, 因此大多数标识提供方使其易于使用方获取和使用 (通常通过一个元数据URL)。\n\n另一方面。\n\nHS256 (带有 SHA-256 的 HMAC 是一种对称算法, 双方之间仅共享一个 密钥。由于使用相同的密钥生成签名和验证签名, 因此必须注意确保密钥不被泄密。\n\n使用RS256更加安全。\n\n\n\n而此处的JWT TOKEN采用RSA256\n\n\n\nJWT Claim Set\n\n\n\nJWT声明集包含有关JWT的信息，包括请求的权限（作用域）、令牌的目标、颁发者、令牌的颁发时间以及令牌的生存期。大多数字段都是必需的。与JWT头一样，JWT声明集是一个JSON对象，用于计算签名。\n\n\n\n其格式如下\n\n\n\n```\n{\n  \"iss\": \"761326798069-r5mljlln1rd4lrbhg75efgigp36m78j5@developer.gserviceaccount.com\",\n  \"scope\": \"https://www.googleapis.com/auth/devstorage.read_only\",\n  \"aud\": \"https://oauth2.googleapis.com/token\",\n  \"exp\": 1328554385,\n  \"iat\": 1328550785\n}\n```\n\n\n\niss : 服务账号的邮箱,即令牌为谁颁发.\n\nscope : 一个以空格分隔的权限域,即该令牌要访问哪些域\n\naud : 令牌的颁发者.\n\nexp : 令牌的过期时间.\n\niat : 令牌的颁发时间\n\n\n\n\n\nJWT Signature\n\n\n\n最后一部分就是JWT的签名,计算签名时必须使用JWT头中的签名算法.googleoauth2.0授权服务器支持的唯一签名算法是使用SHA-256哈希算法的RSA. 这在JWT头的alg字段中表示为RS256.\n\n\n\n\n\nRSA-SHA256(\n\n{Base64url encoded header}.{Base64url encoded claim set},\n\n私钥,\n\n)\n\n最终,你会得到一个诸如下面格式的token\n\n\n\n```\neyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiI3NjEzMjY3OTgwNjktcjVtbGpsbG4xcmQ0bHJiaGc3NWVmZ2lncDM2bTc4ajVAZGV2ZWxvcGVyLmdzZXJ2aWNlYWNjb3VudC5jb20iLCJzY29wZSI6Imh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvcHJlZGljdGlvbiIsImF1ZCI6Imh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL29hdXRoMi92NC90b2tlbiIsImV4cCI6MTMyODU1NDM4NSwiaWF0IjoxMzI4NTUwNzg1fQ.UFUt59SUM2_AW4cRU8Y0BYVQsNTo4n7AFsNrqOpYiICDu37vVt-tw38UKzjmUKtcRsLLjrR3gFW3dNDMx_pL9DVjgVHDdYirtrCekUHOYoa1CMR66nxep5q5cBQ4y4u2kIgSvChCTc9pmLLNoIem-ruCecAJYgI9Ks7pTnW1gkOKs0x3YpiLpzplVHAkkHztaXiJdtpBcY1OXyo6jTQCa3Lk2Q3va1dPkh_d--GU2M5flgd8xNBPYw4vxyt0mP59XZlHMpztZt0soSgObf7G3GXArreF_6tpbFsS3z2t5zkEiHuWJXpzcYr5zWTRPDEHsejeBSG8EgpLDce2380ROQ\n```\n\n\n\n#### 03.发起请求,获得访问令牌\n\n\n\n通过下列的API可以获得访问令牌\n\n\n\n```\nHost : https://oauth2.googleapis.com\nUri : /token\nHeader :\n    Content-Type: application/x-www-form-urlencoded\nParamter :\n    grant_type: urn:ietf:params:oauth:grant-type:jwt-bearer\n    assertion: eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiI3NjEzMjY3OTgwNjktcjVtbGpsbG4xcmQ0bHJiaGc3NWVmZ2lncDM2bTc4ajVAZGV2ZWxvcGVyLmdzZXJ2aWNlYWNjb3VudC5jb20iLCJzY29wZSI6Imh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvcHJlZGljdGlvbiIsImF1ZCI6Imh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL29hdXRoMi92NC90b2tlbiIsImV4cCI6MTMyODU1NDM4NSwiaWF0IjoxMzI4NTUwNzg1fQ.UFUt59SUM2_AW4cRU8Y0BYVQsNTo4n7AFsNrqOpYiICDu37vVt-tw38UKzjmUKtcRsLLjrR3gFW3dNDMx_pL9DVjgVHDdYirtrCekUHOYoa1CMR66nxep5q5cBQ4y4u2kIgSvChCTc9pmLLNoIem-ruCecAJYgI9Ks7pTnW1gkOKs0x3YpiLpzplVHAkkHztaXiJdtpBcY1OXyo6jTQCa3Lk2Q3va1dPkh_d--GU2M5flgd8xNBPYw4vxyt0mP59XZlHMpztZt0soSgObf7G3GXArreF_6tpbFsS3z2t5zkEiHuWJXpzcYr5zWTRPDEHsejeBSG8EgpLDce2380ROQ\n```\n\n\n\n通过访问上面的请求,便可以得到诸如下面的JSON结构\n\n\n\n```\n{\n  \"access_token\": \"1/8xbJqaOZXSUZbHLl5EOtu1pxz3fmmetKx9W8CV4t79M\",\n  \"scope\": \"https://www.googleapis.com/auth/prediction\"\n  \"token_type\": \"Bearer\",\n  \"expires_in\": 3600\n}\n```\n\n\n\n其中 access_token 就是访问token \n\n\n\n参考连接\n\n\n\n\\1. https://developers.google.com/identity/protocols/oauth2/service-account","source":"_posts/development-manual-jwt.md","raw":"---\n\ntitle: 开发手册之jwt,以google api为例\ncover: /img/development-manual/jwt_title.png\nsubtitle: 开发手册之jwt,以google api为例\ncategories: \"开发手册\"\ntags: \"开发手册\"\nauthor:\n  nick: 袁苏东\n  link: https://github.com/yuansudong\ntypora-root-url: development-manual-jwt\n---\n\nJWT,JSON WEB TOKEN的缩写.其存在的目的是为了在网络应用间传递声明的一种基于JSON格式的标准.\n\n\n\n该标准定义在 RFC7519 文件中,可通过下列的连接访问\n\n\n\n```\nhttps://tools.ietf.org/html/rfc7519\n```\n\n\n\n其使用的场景一般存在于分布式站点的单点登录(SSO). 其用途是用来在身份提供者和服务提供者间传递被认证的用户信息.\n\n\n\n服务提供者验证JWT的合法性,倘若合法,便会为服务访问者提供服务.\n\n\n\n## 1.使用场景\n\n\n\n### 01.用户代理与服务器之间\n\n\n\n![图片](/1.png)\n\n\n\nstep 1 : 输入用户名和密码\n\nstep 2 : 携带用户名和密码,发起HTTP请求\n\nstep 3 : 验证用户名和密码的正确性\n\nstep 4 : 验证合法,返回JWT TOKEN\n\nstep 5 : 使用服务\n\nstep 6 : 携带JWT TOKEB,发起HTTP请求\n\nstep 7 : 验证JWT TOKEN的合法性\n\nstep 8 : Token合法,返回数据\n\nstep 9 : 通过UI呈现给用户\n\n\n\n### 02.服务与服务之间\n\n\n\n![图片](/2.png)\n\n\n\n\n\nstep 1 : 创建JWT TOKEN,向服务B发起获取访问令牌的请求\n\nstep 2 : 验证JWT TOKEN的合法性\n\nstep 3 : 返回访问令牌\n\nstep 4 : 携带访问令牌,访问服务B的API\n\n\n\n## 2.应用举例\n\n\n\n用户代理与服务之间比较常见,下面就以服务与服务之间的认证举例,其案例是GOOGLE API中的OATH2.0 SERVICE ACCOUNT 流程.\n\n\n\n### 01.在GOOGLE API CONSOLE 创建服务账号.\n\n\n\n创建服务账号后,你会拿到如下列的JSON文件\n\n\n\n```\n{\n  \"type\": \"service_account\",\n  \"project_id\": \"flowing-precept-285304\",\n  \"private_key_id\": \"7f7a09bf7f9e9ec758409bb5e43e8f218237e65e\",\n  \"private_key\": \"-----BEGIN PRIVATE KEY-----\\nMIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCoHvXGNLDa6pXt\\nI7kv9K3J6HlEv3J42cy87Og4b9nUlUeVZ6AQBnFfwIGY8+4E8dpMs1oYAFTjcFch\\nmg2eM28MTCSKS9+7CKSLAHEZS4eFo108ostBbvJPdMDwcQPQ38/VzOtcS8rwI/tv\\n/1vrhUed6hOIhKAhPzIyMKOvyQkhzuo1PthHxIxLxg48NfjWqIcIR2D8v4SAAV6s\\nm8iXsOIU1fp+r4Y5EPYJcGKt9j/eXtxHnP7sNmpX1/ves79mAIJBgEej/4Jm4xlx\\nyDm7wjj+CBTBikrrW5RvSu5JgJu0euJsGEtzd4QMFYGNxqtGpiGDiRR4TWAbbdNz\\nrVs4a4hJAgMBAAECggEAFOt9U8OcujD0pQSL966vrW8zH93exbD8bAniv5sTdQN6\\nW9oALd5PX0XaGolH9e+OZXrv3Aq2hXKmNPUxep0V1WboKRlV5rUlnHJaoHYoj/WL\\nFY+AUU0X89EobQLzIZuoBgewxdRclVM053PUIVN9XOYStisireBqQ5qP08DlVQJx\\nnqipOyJFurjVw/IXkpaqhuxju+jWtFEr+JVrhPsqV5/7mCAWNZY1EUgWHxjWjvRc\\nateVujbhZranEjDkhkGvTBNklaw78SNUq6VYX2G5B91CzLNeIdXQnJa5PFV2u18P\\npArXzPNrz7eGMAGDE3kQozTsVRUp86kli9dsWjhwnQKBgQDdfssyEHg1eNUCvpLx\\nVHfBC9DSK+v5nvE70yamUcS6na6dD/CvDHYmWJ7kLNW1zv/hVbKEth07eI2NOM9b\\np3Eb5V3key8CDui7yZ/5areosfOBxfpSbcHe2p5VkEV3VEz1kTJc4rsBJSkLJ4Rl\\n6mr9nArcwJapC9AORw/85rBoPwKBgQDCT5p8ACCFQKtnEUbg0ADVodZwa0mOa+ms\\nEhN4hnFGzRAYxn7agxN19SdGdtz+t+qBS6IyFE0+JDGrvchNi7Lq/2moSDZBE9lp\\nFY6eiCmIzrlMIfMEWbCcfG3hnQz2dGb2tXbHTPxmrS8EHeD8N8fdvC+okidQ+v0h\\nx8kHP+gtdwKBgC/RwQLFBX7d4HcgN888YkJeT64gZ2jUBNbaplyACM4VXu5v05Gn\\nShbLSTqP52/CCgJXIxx9yN/fDghwPGxYQRY5tcSvR53VJC/uvsf1X0Nfb+gTmxCS\\nu6lmX4qvhB/YJmlZ+JqPJLqBkFPlKzNpocGxH7M7LQvADiIW+3+pOmq3AoGAcRBM\\nvdZ9FcxZb/GXonyl36j51BQ5isuz/lHOTpU8GIx9z0zAx3j5u+tYXSIQ2Y4+v9k4\\nmZdCkuQQmvQlNyoQg7j2y9qo5xkbqo/Gmuxz7o0LOQeQFnnx0Dx+24a84jM9LlTM\\nto9PVpdzAhw4q8nxXE6CFL5mbjJ9VEih6rv+52UCgYBxvL/CP26pHjc/6Lty1r+5\\nhFX6et6awX0KXI9/JUtb1bcv9gKTCtfvieaovKHlkvjpTHYDEw89JKxcf6cpDca2\\nmy0cI/8q1aV3EK5yWN5KJwh13+jmA4gAgNdT91RiWE5Mhgp8Y+OaoNWzJ1WDLu31\\npNN8Yrbi9RNznlbe1m30Qw==\\n-----END PRIVATE KEY-----\\n\",\n  \"client_email\": \"id-741@flowing-precept-285304.iam.gserviceaccount.com\",\n  \"client_id\": \"104490524108382551606\",\n  \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n  \"token_uri\": \"https://oauth2.googleapis.com/token\",\n  \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\n  \"client_x509_cert_url\": \"https://www.googleapis.com/robot/v1/metadata/x509/id-741%40flowing-precept-285304.iam.gserviceaccount.com\"\n}\n```\n\n \n\n#### 02.创建JWT\n\n\n\nJWT的格式,诸如下面的格式.\n\n\n\n```\n{Base64url encoded header}.{Base64url encoded claim set}.{Base64url encoded signature}\n```\n\n\n\n\n\nJWT Header\n\n\n\n标头由两个字段组成，这两个字段指示签名算法和令牌的格式. 这两个字段都是必需的，每个字段只有一个值。随着其他算法和格式的引入，此标题将相应地更改\n\n\n\n```\n{\"alg\":\"RS256\",\"typ\":\"JWT\"}\n```\n\n\n\nalg 代表签名算法, typ代表令牌的格式\n\n\n\nJWT签名算法中，一般有两个选择，一个采用HS256,另外一个就是采用RS256.\n\n\n\n签名实际上是一个加密的过程，生成一段标识（也是JWT的一部分）作为接收方验证信息是否被篡改的依据。\n\n\n\nRS256 (采用SHA-256 的 RSA 签名) 是一种非对称算法, 它使用公共/私钥对: 标识提供方采用私钥生成签名, JWT 的使用方获取公钥以验证签名。由于公钥 (与私钥相比) 不需要保护, 因此大多数标识提供方使其易于使用方获取和使用 (通常通过一个元数据URL)。\n\n另一方面。\n\nHS256 (带有 SHA-256 的 HMAC 是一种对称算法, 双方之间仅共享一个 密钥。由于使用相同的密钥生成签名和验证签名, 因此必须注意确保密钥不被泄密。\n\n使用RS256更加安全。\n\n\n\n而此处的JWT TOKEN采用RSA256\n\n\n\nJWT Claim Set\n\n\n\nJWT声明集包含有关JWT的信息，包括请求的权限（作用域）、令牌的目标、颁发者、令牌的颁发时间以及令牌的生存期。大多数字段都是必需的。与JWT头一样，JWT声明集是一个JSON对象，用于计算签名。\n\n\n\n其格式如下\n\n\n\n```\n{\n  \"iss\": \"761326798069-r5mljlln1rd4lrbhg75efgigp36m78j5@developer.gserviceaccount.com\",\n  \"scope\": \"https://www.googleapis.com/auth/devstorage.read_only\",\n  \"aud\": \"https://oauth2.googleapis.com/token\",\n  \"exp\": 1328554385,\n  \"iat\": 1328550785\n}\n```\n\n\n\niss : 服务账号的邮箱,即令牌为谁颁发.\n\nscope : 一个以空格分隔的权限域,即该令牌要访问哪些域\n\naud : 令牌的颁发者.\n\nexp : 令牌的过期时间.\n\niat : 令牌的颁发时间\n\n\n\n\n\nJWT Signature\n\n\n\n最后一部分就是JWT的签名,计算签名时必须使用JWT头中的签名算法.googleoauth2.0授权服务器支持的唯一签名算法是使用SHA-256哈希算法的RSA. 这在JWT头的alg字段中表示为RS256.\n\n\n\n\n\nRSA-SHA256(\n\n{Base64url encoded header}.{Base64url encoded claim set},\n\n私钥,\n\n)\n\n最终,你会得到一个诸如下面格式的token\n\n\n\n```\neyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiI3NjEzMjY3OTgwNjktcjVtbGpsbG4xcmQ0bHJiaGc3NWVmZ2lncDM2bTc4ajVAZGV2ZWxvcGVyLmdzZXJ2aWNlYWNjb3VudC5jb20iLCJzY29wZSI6Imh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvcHJlZGljdGlvbiIsImF1ZCI6Imh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL29hdXRoMi92NC90b2tlbiIsImV4cCI6MTMyODU1NDM4NSwiaWF0IjoxMzI4NTUwNzg1fQ.UFUt59SUM2_AW4cRU8Y0BYVQsNTo4n7AFsNrqOpYiICDu37vVt-tw38UKzjmUKtcRsLLjrR3gFW3dNDMx_pL9DVjgVHDdYirtrCekUHOYoa1CMR66nxep5q5cBQ4y4u2kIgSvChCTc9pmLLNoIem-ruCecAJYgI9Ks7pTnW1gkOKs0x3YpiLpzplVHAkkHztaXiJdtpBcY1OXyo6jTQCa3Lk2Q3va1dPkh_d--GU2M5flgd8xNBPYw4vxyt0mP59XZlHMpztZt0soSgObf7G3GXArreF_6tpbFsS3z2t5zkEiHuWJXpzcYr5zWTRPDEHsejeBSG8EgpLDce2380ROQ\n```\n\n\n\n#### 03.发起请求,获得访问令牌\n\n\n\n通过下列的API可以获得访问令牌\n\n\n\n```\nHost : https://oauth2.googleapis.com\nUri : /token\nHeader :\n    Content-Type: application/x-www-form-urlencoded\nParamter :\n    grant_type: urn:ietf:params:oauth:grant-type:jwt-bearer\n    assertion: eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiI3NjEzMjY3OTgwNjktcjVtbGpsbG4xcmQ0bHJiaGc3NWVmZ2lncDM2bTc4ajVAZGV2ZWxvcGVyLmdzZXJ2aWNlYWNjb3VudC5jb20iLCJzY29wZSI6Imh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvcHJlZGljdGlvbiIsImF1ZCI6Imh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL29hdXRoMi92NC90b2tlbiIsImV4cCI6MTMyODU1NDM4NSwiaWF0IjoxMzI4NTUwNzg1fQ.UFUt59SUM2_AW4cRU8Y0BYVQsNTo4n7AFsNrqOpYiICDu37vVt-tw38UKzjmUKtcRsLLjrR3gFW3dNDMx_pL9DVjgVHDdYirtrCekUHOYoa1CMR66nxep5q5cBQ4y4u2kIgSvChCTc9pmLLNoIem-ruCecAJYgI9Ks7pTnW1gkOKs0x3YpiLpzplVHAkkHztaXiJdtpBcY1OXyo6jTQCa3Lk2Q3va1dPkh_d--GU2M5flgd8xNBPYw4vxyt0mP59XZlHMpztZt0soSgObf7G3GXArreF_6tpbFsS3z2t5zkEiHuWJXpzcYr5zWTRPDEHsejeBSG8EgpLDce2380ROQ\n```\n\n\n\n通过访问上面的请求,便可以得到诸如下面的JSON结构\n\n\n\n```\n{\n  \"access_token\": \"1/8xbJqaOZXSUZbHLl5EOtu1pxz3fmmetKx9W8CV4t79M\",\n  \"scope\": \"https://www.googleapis.com/auth/prediction\"\n  \"token_type\": \"Bearer\",\n  \"expires_in\": 3600\n}\n```\n\n\n\n其中 access_token 就是访问token \n\n\n\n参考连接\n\n\n\n\\1. https://developers.google.com/identity/protocols/oauth2/service-account","slug":"development-manual-jwt","published":1,"date":"2021-03-16T18:49:17.929Z","updated":"2021-03-16T18:56:46.700Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmchg4ha00007gvldo3hb1dd","content":"<p>JWT,JSON WEB TOKEN的缩写.其存在的目的是为了在网络应用间传递声明的一种基于JSON格式的标准.</p>\n<p>该标准定义在 RFC7519 文件中,可通过下列的连接访问</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;tools.ietf.org&#x2F;html&#x2F;rfc7519</span><br></pre></td></tr></table></figure>\n\n\n\n<p>其使用的场景一般存在于分布式站点的单点登录(SSO). 其用途是用来在身份提供者和服务提供者间传递被认证的用户信息.</p>\n<p>服务提供者验证JWT的合法性,倘若合法,便会为服务访问者提供服务.</p>\n<h2 id=\"1-使用场景\"><a href=\"#1-使用场景\" class=\"headerlink\" title=\"1.使用场景\"></a>1.使用场景</h2><h3 id=\"01-用户代理与服务器之间\"><a href=\"#01-用户代理与服务器之间\" class=\"headerlink\" title=\"01.用户代理与服务器之间\"></a>01.用户代理与服务器之间</h3><p><img src=\"/2021/development-manual-jwt/index/1.png\" alt=\"图片\"></p>\n<p>step 1 : 输入用户名和密码</p>\n<p>step 2 : 携带用户名和密码,发起HTTP请求</p>\n<p>step 3 : 验证用户名和密码的正确性</p>\n<p>step 4 : 验证合法,返回JWT TOKEN</p>\n<p>step 5 : 使用服务</p>\n<p>step 6 : 携带JWT TOKEB,发起HTTP请求</p>\n<p>step 7 : 验证JWT TOKEN的合法性</p>\n<p>step 8 : Token合法,返回数据</p>\n<p>step 9 : 通过UI呈现给用户</p>\n<h3 id=\"02-服务与服务之间\"><a href=\"#02-服务与服务之间\" class=\"headerlink\" title=\"02.服务与服务之间\"></a>02.服务与服务之间</h3><p><img src=\"/2021/development-manual-jwt/index/2.png\" alt=\"图片\"></p>\n<p>step 1 : 创建JWT TOKEN,向服务B发起获取访问令牌的请求</p>\n<p>step 2 : 验证JWT TOKEN的合法性</p>\n<p>step 3 : 返回访问令牌</p>\n<p>step 4 : 携带访问令牌,访问服务B的API</p>\n<h2 id=\"2-应用举例\"><a href=\"#2-应用举例\" class=\"headerlink\" title=\"2.应用举例\"></a>2.应用举例</h2><p>用户代理与服务之间比较常见,下面就以服务与服务之间的认证举例,其案例是GOOGLE API中的OATH2.0 SERVICE ACCOUNT 流程.</p>\n<h3 id=\"01-在GOOGLE-API-CONSOLE-创建服务账号\"><a href=\"#01-在GOOGLE-API-CONSOLE-创建服务账号\" class=\"headerlink\" title=\"01.在GOOGLE API CONSOLE 创建服务账号.\"></a>01.在GOOGLE API CONSOLE 创建服务账号.</h3><p>创建服务账号后,你会拿到如下列的JSON文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;type&quot;: &quot;service_account&quot;,</span><br><span class=\"line\">  &quot;project_id&quot;: &quot;flowing-precept-285304&quot;,</span><br><span class=\"line\">  &quot;private_key_id&quot;: &quot;7f7a09bf7f9e9ec758409bb5e43e8f218237e65e&quot;,</span><br><span class=\"line\">  &quot;private_key&quot;: &quot;-----BEGIN PRIVATE KEY-----\\nMIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCoHvXGNLDa6pXt\\nI7kv9K3J6HlEv3J42cy87Og4b9nUlUeVZ6AQBnFfwIGY8+4E8dpMs1oYAFTjcFch\\nmg2eM28MTCSKS9+7CKSLAHEZS4eFo108ostBbvJPdMDwcQPQ38&#x2F;VzOtcS8rwI&#x2F;tv\\n&#x2F;1vrhUed6hOIhKAhPzIyMKOvyQkhzuo1PthHxIxLxg48NfjWqIcIR2D8v4SAAV6s\\nm8iXsOIU1fp+r4Y5EPYJcGKt9j&#x2F;eXtxHnP7sNmpX1&#x2F;ves79mAIJBgEej&#x2F;4Jm4xlx\\nyDm7wjj+CBTBikrrW5RvSu5JgJu0euJsGEtzd4QMFYGNxqtGpiGDiRR4TWAbbdNz\\nrVs4a4hJAgMBAAECggEAFOt9U8OcujD0pQSL966vrW8zH93exbD8bAniv5sTdQN6\\nW9oALd5PX0XaGolH9e+OZXrv3Aq2hXKmNPUxep0V1WboKRlV5rUlnHJaoHYoj&#x2F;WL\\nFY+AUU0X89EobQLzIZuoBgewxdRclVM053PUIVN9XOYStisireBqQ5qP08DlVQJx\\nnqipOyJFurjVw&#x2F;IXkpaqhuxju+jWtFEr+JVrhPsqV5&#x2F;7mCAWNZY1EUgWHxjWjvRc\\nateVujbhZranEjDkhkGvTBNklaw78SNUq6VYX2G5B91CzLNeIdXQnJa5PFV2u18P\\npArXzPNrz7eGMAGDE3kQozTsVRUp86kli9dsWjhwnQKBgQDdfssyEHg1eNUCvpLx\\nVHfBC9DSK+v5nvE70yamUcS6na6dD&#x2F;CvDHYmWJ7kLNW1zv&#x2F;hVbKEth07eI2NOM9b\\np3Eb5V3key8CDui7yZ&#x2F;5areosfOBxfpSbcHe2p5VkEV3VEz1kTJc4rsBJSkLJ4Rl\\n6mr9nArcwJapC9AORw&#x2F;85rBoPwKBgQDCT5p8ACCFQKtnEUbg0ADVodZwa0mOa+ms\\nEhN4hnFGzRAYxn7agxN19SdGdtz+t+qBS6IyFE0+JDGrvchNi7Lq&#x2F;2moSDZBE9lp\\nFY6eiCmIzrlMIfMEWbCcfG3hnQz2dGb2tXbHTPxmrS8EHeD8N8fdvC+okidQ+v0h\\nx8kHP+gtdwKBgC&#x2F;RwQLFBX7d4HcgN888YkJeT64gZ2jUBNbaplyACM4VXu5v05Gn\\nShbLSTqP52&#x2F;CCgJXIxx9yN&#x2F;fDghwPGxYQRY5tcSvR53VJC&#x2F;uvsf1X0Nfb+gTmxCS\\nu6lmX4qvhB&#x2F;YJmlZ+JqPJLqBkFPlKzNpocGxH7M7LQvADiIW+3+pOmq3AoGAcRBM\\nvdZ9FcxZb&#x2F;GXonyl36j51BQ5isuz&#x2F;lHOTpU8GIx9z0zAx3j5u+tYXSIQ2Y4+v9k4\\nmZdCkuQQmvQlNyoQg7j2y9qo5xkbqo&#x2F;Gmuxz7o0LOQeQFnnx0Dx+24a84jM9LlTM\\nto9PVpdzAhw4q8nxXE6CFL5mbjJ9VEih6rv+52UCgYBxvL&#x2F;CP26pHjc&#x2F;6Lty1r+5\\nhFX6et6awX0KXI9&#x2F;JUtb1bcv9gKTCtfvieaovKHlkvjpTHYDEw89JKxcf6cpDca2\\nmy0cI&#x2F;8q1aV3EK5yWN5KJwh13+jmA4gAgNdT91RiWE5Mhgp8Y+OaoNWzJ1WDLu31\\npNN8Yrbi9RNznlbe1m30Qw&#x3D;&#x3D;\\n-----END PRIVATE KEY-----\\n&quot;,</span><br><span class=\"line\">  &quot;client_email&quot;: &quot;id-741@flowing-precept-285304.iam.gserviceaccount.com&quot;,</span><br><span class=\"line\">  &quot;client_id&quot;: &quot;104490524108382551606&quot;,</span><br><span class=\"line\">  &quot;auth_uri&quot;: &quot;https:&#x2F;&#x2F;accounts.google.com&#x2F;o&#x2F;oauth2&#x2F;auth&quot;,</span><br><span class=\"line\">  &quot;token_uri&quot;: &quot;https:&#x2F;&#x2F;oauth2.googleapis.com&#x2F;token&quot;,</span><br><span class=\"line\">  &quot;auth_provider_x509_cert_url&quot;: &quot;https:&#x2F;&#x2F;www.googleapis.com&#x2F;oauth2&#x2F;v1&#x2F;certs&quot;,</span><br><span class=\"line\">  &quot;client_x509_cert_url&quot;: &quot;https:&#x2F;&#x2F;www.googleapis.com&#x2F;robot&#x2F;v1&#x2F;metadata&#x2F;x509&#x2F;id-741%40flowing-precept-285304.iam.gserviceaccount.com&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"02-创建JWT\"><a href=\"#02-创建JWT\" class=\"headerlink\" title=\"02.创建JWT\"></a>02.创建JWT</h4><p>JWT的格式,诸如下面的格式.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;Base64url encoded header&#125;.&#123;Base64url encoded claim set&#125;.&#123;Base64url encoded signature&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>JWT Header</p>\n<p>标头由两个字段组成，这两个字段指示签名算法和令牌的格式. 这两个字段都是必需的，每个字段只有一个值。随着其他算法和格式的引入，此标题将相应地更改</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;alg&quot;:&quot;RS256&quot;,&quot;typ&quot;:&quot;JWT&quot;&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>alg 代表签名算法, typ代表令牌的格式</p>\n<p>JWT签名算法中，一般有两个选择，一个采用HS256,另外一个就是采用RS256.</p>\n<p>签名实际上是一个加密的过程，生成一段标识（也是JWT的一部分）作为接收方验证信息是否被篡改的依据。</p>\n<p>RS256 (采用SHA-256 的 RSA 签名) 是一种非对称算法, 它使用公共/私钥对: 标识提供方采用私钥生成签名, JWT 的使用方获取公钥以验证签名。由于公钥 (与私钥相比) 不需要保护, 因此大多数标识提供方使其易于使用方获取和使用 (通常通过一个元数据URL)。</p>\n<p>另一方面。</p>\n<p>HS256 (带有 SHA-256 的 HMAC 是一种对称算法, 双方之间仅共享一个 密钥。由于使用相同的密钥生成签名和验证签名, 因此必须注意确保密钥不被泄密。</p>\n<p>使用RS256更加安全。</p>\n<p>而此处的JWT TOKEN采用RSA256</p>\n<p>JWT Claim Set</p>\n<p>JWT声明集包含有关JWT的信息，包括请求的权限（作用域）、令牌的目标、颁发者、令牌的颁发时间以及令牌的生存期。大多数字段都是必需的。与JWT头一样，JWT声明集是一个JSON对象，用于计算签名。</p>\n<p>其格式如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;iss&quot;: &quot;761326798069-r5mljlln1rd4lrbhg75efgigp36m78j5@developer.gserviceaccount.com&quot;,</span><br><span class=\"line\">  &quot;scope&quot;: &quot;https:&#x2F;&#x2F;www.googleapis.com&#x2F;auth&#x2F;devstorage.read_only&quot;,</span><br><span class=\"line\">  &quot;aud&quot;: &quot;https:&#x2F;&#x2F;oauth2.googleapis.com&#x2F;token&quot;,</span><br><span class=\"line\">  &quot;exp&quot;: 1328554385,</span><br><span class=\"line\">  &quot;iat&quot;: 1328550785</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>iss : 服务账号的邮箱,即令牌为谁颁发.</p>\n<p>scope : 一个以空格分隔的权限域,即该令牌要访问哪些域</p>\n<p>aud : 令牌的颁发者.</p>\n<p>exp : 令牌的过期时间.</p>\n<p>iat : 令牌的颁发时间</p>\n<p>JWT Signature</p>\n<p>最后一部分就是JWT的签名,计算签名时必须使用JWT头中的签名算法.googleoauth2.0授权服务器支持的唯一签名算法是使用SHA-256哈希算法的RSA. 这在JWT头的alg字段中表示为RS256.</p>\n<p>RSA-SHA256(</p>\n<p>{Base64url encoded header}.{Base64url encoded claim set},</p>\n<p>私钥,</p>\n<p>)</p>\n<p>最终,你会得到一个诸如下面格式的token</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiI3NjEzMjY3OTgwNjktcjVtbGpsbG4xcmQ0bHJiaGc3NWVmZ2lncDM2bTc4ajVAZGV2ZWxvcGVyLmdzZXJ2aWNlYWNjb3VudC5jb20iLCJzY29wZSI6Imh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvcHJlZGljdGlvbiIsImF1ZCI6Imh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL29hdXRoMi92NC90b2tlbiIsImV4cCI6MTMyODU1NDM4NSwiaWF0IjoxMzI4NTUwNzg1fQ.UFUt59SUM2_AW4cRU8Y0BYVQsNTo4n7AFsNrqOpYiICDu37vVt-tw38UKzjmUKtcRsLLjrR3gFW3dNDMx_pL9DVjgVHDdYirtrCekUHOYoa1CMR66nxep5q5cBQ4y4u2kIgSvChCTc9pmLLNoIem-ruCecAJYgI9Ks7pTnW1gkOKs0x3YpiLpzplVHAkkHztaXiJdtpBcY1OXyo6jTQCa3Lk2Q3va1dPkh_d--GU2M5flgd8xNBPYw4vxyt0mP59XZlHMpztZt0soSgObf7G3GXArreF_6tpbFsS3z2t5zkEiHuWJXpzcYr5zWTRPDEHsejeBSG8EgpLDce2380ROQ</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"03-发起请求-获得访问令牌\"><a href=\"#03-发起请求-获得访问令牌\" class=\"headerlink\" title=\"03.发起请求,获得访问令牌\"></a>03.发起请求,获得访问令牌</h4><p>通过下列的API可以获得访问令牌</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host : https:&#x2F;&#x2F;oauth2.googleapis.com</span><br><span class=\"line\">Uri : &#x2F;token</span><br><span class=\"line\">Header :</span><br><span class=\"line\">    Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class=\"line\">Paramter :</span><br><span class=\"line\">    grant_type: urn:ietf:params:oauth:grant-type:jwt-bearer</span><br><span class=\"line\">    assertion: eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiI3NjEzMjY3OTgwNjktcjVtbGpsbG4xcmQ0bHJiaGc3NWVmZ2lncDM2bTc4ajVAZGV2ZWxvcGVyLmdzZXJ2aWNlYWNjb3VudC5jb20iLCJzY29wZSI6Imh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvcHJlZGljdGlvbiIsImF1ZCI6Imh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL29hdXRoMi92NC90b2tlbiIsImV4cCI6MTMyODU1NDM4NSwiaWF0IjoxMzI4NTUwNzg1fQ.UFUt59SUM2_AW4cRU8Y0BYVQsNTo4n7AFsNrqOpYiICDu37vVt-tw38UKzjmUKtcRsLLjrR3gFW3dNDMx_pL9DVjgVHDdYirtrCekUHOYoa1CMR66nxep5q5cBQ4y4u2kIgSvChCTc9pmLLNoIem-ruCecAJYgI9Ks7pTnW1gkOKs0x3YpiLpzplVHAkkHztaXiJdtpBcY1OXyo6jTQCa3Lk2Q3va1dPkh_d--GU2M5flgd8xNBPYw4vxyt0mP59XZlHMpztZt0soSgObf7G3GXArreF_6tpbFsS3z2t5zkEiHuWJXpzcYr5zWTRPDEHsejeBSG8EgpLDce2380ROQ</span><br></pre></td></tr></table></figure>\n\n\n\n<p>通过访问上面的请求,便可以得到诸如下面的JSON结构</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;access_token&quot;: &quot;1&#x2F;8xbJqaOZXSUZbHLl5EOtu1pxz3fmmetKx9W8CV4t79M&quot;,</span><br><span class=\"line\">  &quot;scope&quot;: &quot;https:&#x2F;&#x2F;www.googleapis.com&#x2F;auth&#x2F;prediction&quot;</span><br><span class=\"line\">  &quot;token_type&quot;: &quot;Bearer&quot;,</span><br><span class=\"line\">  &quot;expires_in&quot;: 3600</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>其中 access_token 就是访问token </p>\n<p>参考连接</p>\n<p>\\1. <a href=\"https://developers.google.com/identity/protocols/oauth2/service-account\">https://developers.google.com/identity/protocols/oauth2/service-account</a></p>\n","site":{"data":{"contact":[{"title":"github","icon":"icon-github","link":"https://github.com/yuansudong"},{"title":"email","icon":"icon-email","link":"mailto:1145919989@qq.com"},{"title":"qq","icon":"icon-qq","link":"/atom.xml"}],"favicons":["<link rel=\"shortcut icon\" href=\"/img//favicon.ico\">","<link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/img//favicon-16x16.png\">","<link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/img//favicon-32x32.png\">","<link rel=\"icon\" type=\"image/png\" sizes=\"48x48\" href=\"/img//favicon-48x48.png\">","<link rel=\"manifest\" href=\"/img//manifest.json\">","<meta name=\"mobile-web-app-capable\" content=\"yes\">","<meta name=\"theme-color\" content=\"#fff\">","<meta name=\"application-name\">","<link rel=\"apple-touch-icon\" sizes=\"57x57\" href=\"/img//apple-touch-icon-57x57.png\">","<link rel=\"apple-touch-icon\" sizes=\"60x60\" href=\"/img//apple-touch-icon-60x60.png\">","<link rel=\"apple-touch-icon\" sizes=\"72x72\" href=\"/img//apple-touch-icon-72x72.png\">","<link rel=\"apple-touch-icon\" sizes=\"76x76\" href=\"/img//apple-touch-icon-76x76.png\">","<link rel=\"apple-touch-icon\" sizes=\"114x114\" href=\"/img//apple-touch-icon-114x114.png\">","<link rel=\"apple-touch-icon\" sizes=\"120x120\" href=\"/img//apple-touch-icon-120x120.png\">","<link rel=\"apple-touch-icon\" sizes=\"144x144\" href=\"/img//apple-touch-icon-144x144.png\">","<link rel=\"apple-touch-icon\" sizes=\"152x152\" href=\"/img//apple-touch-icon-152x152.png\">","<link rel=\"apple-touch-icon\" sizes=\"167x167\" href=\"/img//apple-touch-icon-167x167.png\">","<link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/img//apple-touch-icon-180x180.png\">","<link rel=\"apple-touch-icon\" sizes=\"1024x1024\" href=\"/img//apple-touch-icon-1024x1024.png\">","<meta name=\"apple-mobile-web-app-capable\" content=\"yes\">","<meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black-translucent\">","<meta name=\"apple-mobile-web-app-title\">","<meta name=\"msapplication-TileColor\" content=\"#fff\">","<meta name=\"msapplication-TileImage\" content=\"/img//mstile-144x144.png\">","<meta name=\"msapplication-config\" content=\"/img//browserconfig.xml\">"]}},"excerpt":"","more":"<p>JWT,JSON WEB TOKEN的缩写.其存在的目的是为了在网络应用间传递声明的一种基于JSON格式的标准.</p>\n<p>该标准定义在 RFC7519 文件中,可通过下列的连接访问</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;tools.ietf.org&#x2F;html&#x2F;rfc7519</span><br></pre></td></tr></table></figure>\n\n\n\n<p>其使用的场景一般存在于分布式站点的单点登录(SSO). 其用途是用来在身份提供者和服务提供者间传递被认证的用户信息.</p>\n<p>服务提供者验证JWT的合法性,倘若合法,便会为服务访问者提供服务.</p>\n<h2 id=\"1-使用场景\"><a href=\"#1-使用场景\" class=\"headerlink\" title=\"1.使用场景\"></a>1.使用场景</h2><h3 id=\"01-用户代理与服务器之间\"><a href=\"#01-用户代理与服务器之间\" class=\"headerlink\" title=\"01.用户代理与服务器之间\"></a>01.用户代理与服务器之间</h3><p><img src=\"/2021/development-manual-jwt/index/1.png\" alt=\"图片\"></p>\n<p>step 1 : 输入用户名和密码</p>\n<p>step 2 : 携带用户名和密码,发起HTTP请求</p>\n<p>step 3 : 验证用户名和密码的正确性</p>\n<p>step 4 : 验证合法,返回JWT TOKEN</p>\n<p>step 5 : 使用服务</p>\n<p>step 6 : 携带JWT TOKEB,发起HTTP请求</p>\n<p>step 7 : 验证JWT TOKEN的合法性</p>\n<p>step 8 : Token合法,返回数据</p>\n<p>step 9 : 通过UI呈现给用户</p>\n<h3 id=\"02-服务与服务之间\"><a href=\"#02-服务与服务之间\" class=\"headerlink\" title=\"02.服务与服务之间\"></a>02.服务与服务之间</h3><p><img src=\"/2021/development-manual-jwt/index/2.png\" alt=\"图片\"></p>\n<p>step 1 : 创建JWT TOKEN,向服务B发起获取访问令牌的请求</p>\n<p>step 2 : 验证JWT TOKEN的合法性</p>\n<p>step 3 : 返回访问令牌</p>\n<p>step 4 : 携带访问令牌,访问服务B的API</p>\n<h2 id=\"2-应用举例\"><a href=\"#2-应用举例\" class=\"headerlink\" title=\"2.应用举例\"></a>2.应用举例</h2><p>用户代理与服务之间比较常见,下面就以服务与服务之间的认证举例,其案例是GOOGLE API中的OATH2.0 SERVICE ACCOUNT 流程.</p>\n<h3 id=\"01-在GOOGLE-API-CONSOLE-创建服务账号\"><a href=\"#01-在GOOGLE-API-CONSOLE-创建服务账号\" class=\"headerlink\" title=\"01.在GOOGLE API CONSOLE 创建服务账号.\"></a>01.在GOOGLE API CONSOLE 创建服务账号.</h3><p>创建服务账号后,你会拿到如下列的JSON文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;type&quot;: &quot;service_account&quot;,</span><br><span class=\"line\">  &quot;project_id&quot;: &quot;flowing-precept-285304&quot;,</span><br><span class=\"line\">  &quot;private_key_id&quot;: &quot;7f7a09bf7f9e9ec758409bb5e43e8f218237e65e&quot;,</span><br><span class=\"line\">  &quot;private_key&quot;: &quot;-----BEGIN PRIVATE KEY-----\\nMIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCoHvXGNLDa6pXt\\nI7kv9K3J6HlEv3J42cy87Og4b9nUlUeVZ6AQBnFfwIGY8+4E8dpMs1oYAFTjcFch\\nmg2eM28MTCSKS9+7CKSLAHEZS4eFo108ostBbvJPdMDwcQPQ38&#x2F;VzOtcS8rwI&#x2F;tv\\n&#x2F;1vrhUed6hOIhKAhPzIyMKOvyQkhzuo1PthHxIxLxg48NfjWqIcIR2D8v4SAAV6s\\nm8iXsOIU1fp+r4Y5EPYJcGKt9j&#x2F;eXtxHnP7sNmpX1&#x2F;ves79mAIJBgEej&#x2F;4Jm4xlx\\nyDm7wjj+CBTBikrrW5RvSu5JgJu0euJsGEtzd4QMFYGNxqtGpiGDiRR4TWAbbdNz\\nrVs4a4hJAgMBAAECggEAFOt9U8OcujD0pQSL966vrW8zH93exbD8bAniv5sTdQN6\\nW9oALd5PX0XaGolH9e+OZXrv3Aq2hXKmNPUxep0V1WboKRlV5rUlnHJaoHYoj&#x2F;WL\\nFY+AUU0X89EobQLzIZuoBgewxdRclVM053PUIVN9XOYStisireBqQ5qP08DlVQJx\\nnqipOyJFurjVw&#x2F;IXkpaqhuxju+jWtFEr+JVrhPsqV5&#x2F;7mCAWNZY1EUgWHxjWjvRc\\nateVujbhZranEjDkhkGvTBNklaw78SNUq6VYX2G5B91CzLNeIdXQnJa5PFV2u18P\\npArXzPNrz7eGMAGDE3kQozTsVRUp86kli9dsWjhwnQKBgQDdfssyEHg1eNUCvpLx\\nVHfBC9DSK+v5nvE70yamUcS6na6dD&#x2F;CvDHYmWJ7kLNW1zv&#x2F;hVbKEth07eI2NOM9b\\np3Eb5V3key8CDui7yZ&#x2F;5areosfOBxfpSbcHe2p5VkEV3VEz1kTJc4rsBJSkLJ4Rl\\n6mr9nArcwJapC9AORw&#x2F;85rBoPwKBgQDCT5p8ACCFQKtnEUbg0ADVodZwa0mOa+ms\\nEhN4hnFGzRAYxn7agxN19SdGdtz+t+qBS6IyFE0+JDGrvchNi7Lq&#x2F;2moSDZBE9lp\\nFY6eiCmIzrlMIfMEWbCcfG3hnQz2dGb2tXbHTPxmrS8EHeD8N8fdvC+okidQ+v0h\\nx8kHP+gtdwKBgC&#x2F;RwQLFBX7d4HcgN888YkJeT64gZ2jUBNbaplyACM4VXu5v05Gn\\nShbLSTqP52&#x2F;CCgJXIxx9yN&#x2F;fDghwPGxYQRY5tcSvR53VJC&#x2F;uvsf1X0Nfb+gTmxCS\\nu6lmX4qvhB&#x2F;YJmlZ+JqPJLqBkFPlKzNpocGxH7M7LQvADiIW+3+pOmq3AoGAcRBM\\nvdZ9FcxZb&#x2F;GXonyl36j51BQ5isuz&#x2F;lHOTpU8GIx9z0zAx3j5u+tYXSIQ2Y4+v9k4\\nmZdCkuQQmvQlNyoQg7j2y9qo5xkbqo&#x2F;Gmuxz7o0LOQeQFnnx0Dx+24a84jM9LlTM\\nto9PVpdzAhw4q8nxXE6CFL5mbjJ9VEih6rv+52UCgYBxvL&#x2F;CP26pHjc&#x2F;6Lty1r+5\\nhFX6et6awX0KXI9&#x2F;JUtb1bcv9gKTCtfvieaovKHlkvjpTHYDEw89JKxcf6cpDca2\\nmy0cI&#x2F;8q1aV3EK5yWN5KJwh13+jmA4gAgNdT91RiWE5Mhgp8Y+OaoNWzJ1WDLu31\\npNN8Yrbi9RNznlbe1m30Qw&#x3D;&#x3D;\\n-----END PRIVATE KEY-----\\n&quot;,</span><br><span class=\"line\">  &quot;client_email&quot;: &quot;id-741@flowing-precept-285304.iam.gserviceaccount.com&quot;,</span><br><span class=\"line\">  &quot;client_id&quot;: &quot;104490524108382551606&quot;,</span><br><span class=\"line\">  &quot;auth_uri&quot;: &quot;https:&#x2F;&#x2F;accounts.google.com&#x2F;o&#x2F;oauth2&#x2F;auth&quot;,</span><br><span class=\"line\">  &quot;token_uri&quot;: &quot;https:&#x2F;&#x2F;oauth2.googleapis.com&#x2F;token&quot;,</span><br><span class=\"line\">  &quot;auth_provider_x509_cert_url&quot;: &quot;https:&#x2F;&#x2F;www.googleapis.com&#x2F;oauth2&#x2F;v1&#x2F;certs&quot;,</span><br><span class=\"line\">  &quot;client_x509_cert_url&quot;: &quot;https:&#x2F;&#x2F;www.googleapis.com&#x2F;robot&#x2F;v1&#x2F;metadata&#x2F;x509&#x2F;id-741%40flowing-precept-285304.iam.gserviceaccount.com&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"02-创建JWT\"><a href=\"#02-创建JWT\" class=\"headerlink\" title=\"02.创建JWT\"></a>02.创建JWT</h4><p>JWT的格式,诸如下面的格式.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;Base64url encoded header&#125;.&#123;Base64url encoded claim set&#125;.&#123;Base64url encoded signature&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>JWT Header</p>\n<p>标头由两个字段组成，这两个字段指示签名算法和令牌的格式. 这两个字段都是必需的，每个字段只有一个值。随着其他算法和格式的引入，此标题将相应地更改</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;alg&quot;:&quot;RS256&quot;,&quot;typ&quot;:&quot;JWT&quot;&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>alg 代表签名算法, typ代表令牌的格式</p>\n<p>JWT签名算法中，一般有两个选择，一个采用HS256,另外一个就是采用RS256.</p>\n<p>签名实际上是一个加密的过程，生成一段标识（也是JWT的一部分）作为接收方验证信息是否被篡改的依据。</p>\n<p>RS256 (采用SHA-256 的 RSA 签名) 是一种非对称算法, 它使用公共/私钥对: 标识提供方采用私钥生成签名, JWT 的使用方获取公钥以验证签名。由于公钥 (与私钥相比) 不需要保护, 因此大多数标识提供方使其易于使用方获取和使用 (通常通过一个元数据URL)。</p>\n<p>另一方面。</p>\n<p>HS256 (带有 SHA-256 的 HMAC 是一种对称算法, 双方之间仅共享一个 密钥。由于使用相同的密钥生成签名和验证签名, 因此必须注意确保密钥不被泄密。</p>\n<p>使用RS256更加安全。</p>\n<p>而此处的JWT TOKEN采用RSA256</p>\n<p>JWT Claim Set</p>\n<p>JWT声明集包含有关JWT的信息，包括请求的权限（作用域）、令牌的目标、颁发者、令牌的颁发时间以及令牌的生存期。大多数字段都是必需的。与JWT头一样，JWT声明集是一个JSON对象，用于计算签名。</p>\n<p>其格式如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;iss&quot;: &quot;761326798069-r5mljlln1rd4lrbhg75efgigp36m78j5@developer.gserviceaccount.com&quot;,</span><br><span class=\"line\">  &quot;scope&quot;: &quot;https:&#x2F;&#x2F;www.googleapis.com&#x2F;auth&#x2F;devstorage.read_only&quot;,</span><br><span class=\"line\">  &quot;aud&quot;: &quot;https:&#x2F;&#x2F;oauth2.googleapis.com&#x2F;token&quot;,</span><br><span class=\"line\">  &quot;exp&quot;: 1328554385,</span><br><span class=\"line\">  &quot;iat&quot;: 1328550785</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>iss : 服务账号的邮箱,即令牌为谁颁发.</p>\n<p>scope : 一个以空格分隔的权限域,即该令牌要访问哪些域</p>\n<p>aud : 令牌的颁发者.</p>\n<p>exp : 令牌的过期时间.</p>\n<p>iat : 令牌的颁发时间</p>\n<p>JWT Signature</p>\n<p>最后一部分就是JWT的签名,计算签名时必须使用JWT头中的签名算法.googleoauth2.0授权服务器支持的唯一签名算法是使用SHA-256哈希算法的RSA. 这在JWT头的alg字段中表示为RS256.</p>\n<p>RSA-SHA256(</p>\n<p>{Base64url encoded header}.{Base64url encoded claim set},</p>\n<p>私钥,</p>\n<p>)</p>\n<p>最终,你会得到一个诸如下面格式的token</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiI3NjEzMjY3OTgwNjktcjVtbGpsbG4xcmQ0bHJiaGc3NWVmZ2lncDM2bTc4ajVAZGV2ZWxvcGVyLmdzZXJ2aWNlYWNjb3VudC5jb20iLCJzY29wZSI6Imh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvcHJlZGljdGlvbiIsImF1ZCI6Imh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL29hdXRoMi92NC90b2tlbiIsImV4cCI6MTMyODU1NDM4NSwiaWF0IjoxMzI4NTUwNzg1fQ.UFUt59SUM2_AW4cRU8Y0BYVQsNTo4n7AFsNrqOpYiICDu37vVt-tw38UKzjmUKtcRsLLjrR3gFW3dNDMx_pL9DVjgVHDdYirtrCekUHOYoa1CMR66nxep5q5cBQ4y4u2kIgSvChCTc9pmLLNoIem-ruCecAJYgI9Ks7pTnW1gkOKs0x3YpiLpzplVHAkkHztaXiJdtpBcY1OXyo6jTQCa3Lk2Q3va1dPkh_d--GU2M5flgd8xNBPYw4vxyt0mP59XZlHMpztZt0soSgObf7G3GXArreF_6tpbFsS3z2t5zkEiHuWJXpzcYr5zWTRPDEHsejeBSG8EgpLDce2380ROQ</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"03-发起请求-获得访问令牌\"><a href=\"#03-发起请求-获得访问令牌\" class=\"headerlink\" title=\"03.发起请求,获得访问令牌\"></a>03.发起请求,获得访问令牌</h4><p>通过下列的API可以获得访问令牌</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host : https:&#x2F;&#x2F;oauth2.googleapis.com</span><br><span class=\"line\">Uri : &#x2F;token</span><br><span class=\"line\">Header :</span><br><span class=\"line\">    Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class=\"line\">Paramter :</span><br><span class=\"line\">    grant_type: urn:ietf:params:oauth:grant-type:jwt-bearer</span><br><span class=\"line\">    assertion: eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiI3NjEzMjY3OTgwNjktcjVtbGpsbG4xcmQ0bHJiaGc3NWVmZ2lncDM2bTc4ajVAZGV2ZWxvcGVyLmdzZXJ2aWNlYWNjb3VudC5jb20iLCJzY29wZSI6Imh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvcHJlZGljdGlvbiIsImF1ZCI6Imh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL29hdXRoMi92NC90b2tlbiIsImV4cCI6MTMyODU1NDM4NSwiaWF0IjoxMzI4NTUwNzg1fQ.UFUt59SUM2_AW4cRU8Y0BYVQsNTo4n7AFsNrqOpYiICDu37vVt-tw38UKzjmUKtcRsLLjrR3gFW3dNDMx_pL9DVjgVHDdYirtrCekUHOYoa1CMR66nxep5q5cBQ4y4u2kIgSvChCTc9pmLLNoIem-ruCecAJYgI9Ks7pTnW1gkOKs0x3YpiLpzplVHAkkHztaXiJdtpBcY1OXyo6jTQCa3Lk2Q3va1dPkh_d--GU2M5flgd8xNBPYw4vxyt0mP59XZlHMpztZt0soSgObf7G3GXArreF_6tpbFsS3z2t5zkEiHuWJXpzcYr5zWTRPDEHsejeBSG8EgpLDce2380ROQ</span><br></pre></td></tr></table></figure>\n\n\n\n<p>通过访问上面的请求,便可以得到诸如下面的JSON结构</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;access_token&quot;: &quot;1&#x2F;8xbJqaOZXSUZbHLl5EOtu1pxz3fmmetKx9W8CV4t79M&quot;,</span><br><span class=\"line\">  &quot;scope&quot;: &quot;https:&#x2F;&#x2F;www.googleapis.com&#x2F;auth&#x2F;prediction&quot;</span><br><span class=\"line\">  &quot;token_type&quot;: &quot;Bearer&quot;,</span><br><span class=\"line\">  &quot;expires_in&quot;: 3600</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>其中 access_token 就是访问token </p>\n<p>参考连接</p>\n<p>\\1. <a href=\"https://developers.google.com/identity/protocols/oauth2/service-account\">https://developers.google.com/identity/protocols/oauth2/service-account</a></p>\n"},{"title":"开发手册之oath2,以google api为例","cover":"/img/development-manual/oath2_title.png","subtitle":"开发手册之oath2,以google api为例","author":{"nick":"袁苏东","link":"https://github.com/yuansudong"},"typora-root-url":"development-manual-oath2","_content":"\nOATH2.0,一个不同应用间的授权机制. 其核心是,用户使用一个应用,这个应用需要这个用户的一些资源.\n\n\n\n而这个应用要使用的用户的资源,却不是这个应用能提供的,属于三方.此时,这个应用需要向三方发送请求,去拿到这个用户的资源.\n\n\n\n但是,由于安全,三方服务,需要确保这个资源是用户同意这个应用获取的.\n\n\n\n这一些列,确保的过程,就是OATH2.0\n\n\n\n## 1.应用场景\n\n\n\n新开发的应用,随着系统业务的扩展,要慢慢地融入互联网.\n\n\n\n在互联网中,你有用户或者资源.那么,新开发的应用就可以和你合作,使用你的资源或者用户,亦或者是名气.达到快速引流推广的目的. 比如,QQ,微信,微博,GITHUB,GOOGLE,FACEBOOK,TWITTER等\n\n\n\n随着应用逐渐成熟,积累了大批用户,积累了大批的用户资源. 此时,这个应用便可以效仿QQ等应用,让其他正在孵化的项目接入自己的平台. 让这个孵化项目,使用自身的资源,达到快速成长的目的.\n\n\n\n随着用户越来越多,业务越来越庞杂,原本的单体服务,变得越来越庞大,常常遇见\"牵一发而动全身\"的场景.\n\n\n\n此时,需要根据业务或者职业划分,将原本的单体服务,拆解成不同的服务,期望达到各司其职的目的.\n\n\n\n上面的这些场景,通过网络触发,任何设备都可以通过网络发起请求.但是,哪台设备能成功拿到数据,这就需要一套认证机制.\n\n\n\n而OATH2.0,也就应运而生.\n\n\n\n## 2.授权流程\n\n\n\n![图片](/title.png)\n\n1.  用户使用应用.\n2.  应用向用户发起授权许可.\n3.  用户同意授权,发起请求至三方授权服务器.\n4.  三方授权服务,验证信息,合法.\n5.  三方授权服务器返回访问令牌.\n6.  应用携带令牌向三方资源服务器请求资源.\n7.  三方资源服务器验证访问令牌,合法.\n8.  返回资源给应用.\n9.  应用向用户呈现资源或者缓存.\n\n## 3.授权方式\n\n\n\nOATH2.0的标准是在RFC6749文件中定义,可通过下列地址访问\n\n\n\n```\nhttps://tools.ietf.org/html/rfc6749\n```\n\n\n\n在该文件中,定义了四种授权流程,他们分别是,授权码式,隐藏式,密码式,客户端凭据式.\n\n\n\n以上四种方式,在申请授权,获得访问令牌时,都需要在三方应用的后台进行备份申请客户端的ID和客户端的密钥.\n\n\n\n通过客户端的ID和客户端的密钥,可以标识申请授权的应用,以及申请访问令牌的安全性.\n\n\n\n### 01.授权码式\n\n\n\n该种方式,是指应用在获取三方资源的访问令牌前,首先需要向三方授权服务申请一个授权码(Authorization Code). 通过该授权码,获得访问令牌.\n\n\n\n### 02.隐藏式\n\n\n\n该种方式也被称之为简化式,是指直接向前端应用颁发令牌.因为这种获得访问令牌时,没有授权码的流程.因此,被称为隐藏式或者简化式.\n\n\n\n### 03.密码式\n\n\n\n该种方式是指用户直接将自己三方的用户名和密码告诉给应用,应用通过用户名和密码,通过HTPP请求,向三方服务器,直接申请访问令牌.\n\n\n\n### 04.凭据式\n\n\n\n该种方式是指,用户在三方的后台申请客户端ID以及客户端密钥.在申请访问令牌时,HTTP请求参数中带上客户端ID和客户端密钥.\n\n\n\n## 4.更新令牌\n\n\n\n在OATH2.0中,访问的令牌是有时效性的,在经历过一段时间后,令牌就会被置为不可用,一旦不可用,三方资源服务器就不会再提供服务.\n\n\n\n因此,API调用者需要根据访问令牌的过期时间去刷新令牌.\n\n\n\n## 5.案例举例\n\n\n\n下面,以GOOGLE API为例, 介绍下四种授权方式.此时,我们需要开发的应用时,通过用户授权,去拉取该用户名下Admob广告收益报表.\n\n\n\n### 01.授权码式\n\n\n\n授权码式,适合服务端渲染页面的应用,即SSR(Server Side Render).通过此种应用去拉取admob的广告收益报表时.\n\n\n\n#### 1). 获取客户端ID和客户端的密钥\n\n\n\n需要通过下列地址申请一个OAuth客户端ID\n\n\n\n```\nhttps://console.developers.google.com/apis/credentials\n```\n\n\n\n![图片](/2.png)\n\n![图片](/3.png)\n\n\n\n#### 2). 发起授权\n\n\n\n可通过下面的HTTP请求发起授权\n\n\n\n```\nHost:https://accounts.google.com\nUri:o/oauth2/v2/auth\nMethod: GET\nParamters:  \n   client_id:test_client_id # 在https://console.developers.google.com/apis/credentials 获取到的客户端ID \n   redirect_uri:https://google.hfdy.com/code #用户同意授权过后,要跳转的URL\n   response_type:code # 对于 Server Side Web Application,此处固定为code,即授权码模式\n   scope: https://www.googleapis.com/auth/cloud-platform #一个以空格分隔的字符串,意思是指,该应用可以有哪些权限\n   access_type: online|offline # 用于表明,当用户不在浏览器时,应用是否可以刷新令牌,当用户不在浏览器中,需要刷新令牌时,该值要设置为offline\n   state: anystring # 该参数的值会在授权成功后以 state=anystring出现在重定向的URI中\n   include_granted_scopes: true|false # 该参数指定,应用是否可以动态申请权限.true代表可以\n   login_hint: email或者google id # 如果应用程序知道是哪个用户在发起授权,可以在此处填上用户的邮箱或者google id.此种方式可以简化授权流程\n   prompt: none|consent|select_account # 是否提示用户选择账户\n```\n\n\n\n发起授权时的页面如下\n\n\n\n![图片](/1.png)\n\n\n\n授权同意后,服务器会受到下面的请求\n\n\n\n```\nhttp://localhost/?state=my_args&code=4/0AY0e-g7kLX5rSEm2PEnoXIZq7lyekG1SbEzT1BSHvmS6SDpURwzc_MKhu1SCrrgomm9hOQ&scope=https://www.googleapis.com/auth/admob.report\n```\n\n\n\n其中code就是授权码.\n\n\n\n#### 3). 根据授权码获取访问令牌\n\n\n\n拿到授权码之后,可以根据下列的HTTP请求获得访问令牌\n\n\n\n```yaml\nHost:https://oauth2.googleapis.com\nUri:/token\nMethod:POST\nContent-Type:application/x-www-form-urlencoded\nParamters:\n  code: 4/0AY0e-g7kLX5rSEm2PEnoXIZq7lyekG1SbEzT1BSHvmS6SDpURwzc_MKhu1SCrrgomm9hOQ\n  client_id:test_client_id # 客户端的ID\n  client_secret:test_client_secrect # 客户端的密钥\n  redirect_uri: https://google.hfdy.com/code\n  grant_type:authorization_code # 固定为authorization_code\n```\n\n\n\n发起该请求,可以得到下列的JSON数据\n\n\n\n```json\n{\n  \"access_token\": \"1/fFAGRNJru1FTz70BzhT3Zg\",\n  \"expires_in\": 3920,\n  \"token_type\": \"Bearer\",\n  \"scope\": \"https://www.googleapis.com/auth/admob.report\",\n  \"refresh_token\": \"1//xEoDL4iW3cxlI7yDbSRFYNG01kVKM2C-259HOF2aQbI\"\n}\n```\n\n\n\n#### 4). 调用请求\n\n\n\n访问三方资源服务器\n\n\n\n```yaml\nGET /drive/v2/files HTTP/1.1\nHost: www.googleapis.com\nAuthorization: Bearer ya29.A0AfH6SMB8cWo8n9CTpa03BfAYOk_DQKNCQDfUlg2WCQO3wJeCP1rNe6_KlrwIW4g817zJgOfPb0_FT6RYbET60Lo-jVNa23XtVu3MOyQXVeaKGwiCskOWiUAS01yIerhYE0l6e7icTiHW_lC92Mr0jgNnFdg1\n```\n\n\n\n#### 5). 刷新token\n\n\n\n通过下列的请求可以刷新token\n\n\n\n```curl\n\ncurl --location --request POST 'https://oauth2.googleapis.com/token' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'client_id=57546962315-lqmjq7aescgc7eggogphaevk8h3jt3kk.apps.googleusercontent.com' \\\n--data-urlencode 'client_secret=SFT54d6vai6c_DbTBJctkAOX' \\\n--data-urlencode 'refresh_token=1//06O7KoZJqdX7yCgYIARAAGAYSNwF-L9IrtWpvERBTXDZV7f9TX1ZDJfUiURwqIez0FkUWxrcvcpC1q8-aod2ikz-VNTd30Q6eBtU' \\\n--data-urlencode 'grant_type=refresh_token'\n```\n\n\n\n响应体\n\n\n\n```json\n{\n  \"access_token\": \"1/fFAGRNJru1FTz70BzhT3Zg\",\n  \"expires_in\": 3920,\n  \"scope\": \"https://www.googleapis.com/auth/admob.report\",\n  \"token_type\": \"Bearer\"\n}\n```\n\n\n\n6) 序列图\n\n\n\n![图片](/7.png)\n\n\n\n### 02.隐藏式\n\n\n\n对于一些纯前端应用,在GOOGLE中被称之为JAVASCRIPT WEB APP. 这类应用获取访问令牌,减少了授权码的步骤.\n\n\n\n#### 1) 发起授权,获取访问令牌\n\n\n\n发起请求\n\n\n\n```\ncurl --location --request GET 'https://accounts.google.com/o/oauth2/v2/auth?include_granted_scopes=true&scope=https://www.googleapis.com/auth/admob.report&response_type=token&state=state_parameter_passthrough_value&redirect_uri=https://google.hfdy.com/callback&client_id=691541517620-hp23tqgh6itpj278eqmm1nr2ndqt3eif.apps.googleusercontent.com'\n```\n\n重定向页面\n\n```\nhttps://google.hfdy.com/callback#access_token=ya29.A0AfH6SMC7H3A5DEHj3RqrjDxhOp7Ou9iin7lqgcrkvxRZEAwOcr-mCmlpCtv4pG-uWA7-zTx42XYM38sATuDXpx5-pb7hZx8uzTGzoMQAc6rtemh2hTogglfy6cZe39f8RHSyQDWM-qE62v15V0sLEWCLqhFW&token_type=Bearer&expires_in=3599&scope=https://www.googleapis.com/auth/admob.report\n```\n\n\n\n在重定向的URL中通过锚点的方式,将访问令牌放在了锚点中,JAVASCRIPT 应用可以通过该URL获得访问令牌\n\n\n\n#### 2) 访问GOOGLE的资源服务\n\n\n\n```\nGET /drive/v2/files HTTP/1.1\nHost: www.googleapis.com\nAuthorization: Bearer ya29.A0AfH6SMB8cWo8n9CTpa03BfAYOk_DQKNCQDfUlg2WCQO3wJeCP1rNe6_KlrwIW4g817zJgOfPb0_FT6RYbET60Lo-jVNa23XtVu3MOyQXVeaKGwiCskOWiUAS01yIerhYE0l6e7icTiHW_lC92Mr0jgNnFdg1\n```\n\n\n\n此种方式,没有刷新token的方式.\n\n\n\n当token过期后,需要重新调用认证流程.此时,有参数可选择是否再度走认证流程.\n\n\n\n#### 3) 序列图\n\n\n\n![图片](/8.png)\n\n\n\n### 03.密码式\n\n\n\n目前GOOGLE-API不提供密码式去访问API\n\n\n\n### 04.凭据式\n\n\n\n可参考该链接: [开发手册之JWT,以GOOGLE为例](https://www.yuansudong.top/2021/development-manual-jwt/index.html)\n\n\n\n参考连接\n\n\n\nhttps://oauth.net/2/\n\nhttps://tools.ietf.org/html/rfc6749\n\nhttps://developers.google.com/identity/protocols/oauth2/web-server#httprest\n\n","source":"_posts/development-manual-oath2.md","raw":"---\n\ntitle: 开发手册之oath2,以google api为例\ncover: /img/development-manual/oath2_title.png\nsubtitle: 开发手册之oath2,以google api为例\ncategories: \"开发手册\"\ntags: \"开发手册\"\nauthor:\n  nick: 袁苏东\n  link: https://github.com/yuansudong\ntypora-root-url: development-manual-oath2\n---\n\nOATH2.0,一个不同应用间的授权机制. 其核心是,用户使用一个应用,这个应用需要这个用户的一些资源.\n\n\n\n而这个应用要使用的用户的资源,却不是这个应用能提供的,属于三方.此时,这个应用需要向三方发送请求,去拿到这个用户的资源.\n\n\n\n但是,由于安全,三方服务,需要确保这个资源是用户同意这个应用获取的.\n\n\n\n这一些列,确保的过程,就是OATH2.0\n\n\n\n## 1.应用场景\n\n\n\n新开发的应用,随着系统业务的扩展,要慢慢地融入互联网.\n\n\n\n在互联网中,你有用户或者资源.那么,新开发的应用就可以和你合作,使用你的资源或者用户,亦或者是名气.达到快速引流推广的目的. 比如,QQ,微信,微博,GITHUB,GOOGLE,FACEBOOK,TWITTER等\n\n\n\n随着应用逐渐成熟,积累了大批用户,积累了大批的用户资源. 此时,这个应用便可以效仿QQ等应用,让其他正在孵化的项目接入自己的平台. 让这个孵化项目,使用自身的资源,达到快速成长的目的.\n\n\n\n随着用户越来越多,业务越来越庞杂,原本的单体服务,变得越来越庞大,常常遇见\"牵一发而动全身\"的场景.\n\n\n\n此时,需要根据业务或者职业划分,将原本的单体服务,拆解成不同的服务,期望达到各司其职的目的.\n\n\n\n上面的这些场景,通过网络触发,任何设备都可以通过网络发起请求.但是,哪台设备能成功拿到数据,这就需要一套认证机制.\n\n\n\n而OATH2.0,也就应运而生.\n\n\n\n## 2.授权流程\n\n\n\n![图片](/title.png)\n\n1.  用户使用应用.\n2.  应用向用户发起授权许可.\n3.  用户同意授权,发起请求至三方授权服务器.\n4.  三方授权服务,验证信息,合法.\n5.  三方授权服务器返回访问令牌.\n6.  应用携带令牌向三方资源服务器请求资源.\n7.  三方资源服务器验证访问令牌,合法.\n8.  返回资源给应用.\n9.  应用向用户呈现资源或者缓存.\n\n## 3.授权方式\n\n\n\nOATH2.0的标准是在RFC6749文件中定义,可通过下列地址访问\n\n\n\n```\nhttps://tools.ietf.org/html/rfc6749\n```\n\n\n\n在该文件中,定义了四种授权流程,他们分别是,授权码式,隐藏式,密码式,客户端凭据式.\n\n\n\n以上四种方式,在申请授权,获得访问令牌时,都需要在三方应用的后台进行备份申请客户端的ID和客户端的密钥.\n\n\n\n通过客户端的ID和客户端的密钥,可以标识申请授权的应用,以及申请访问令牌的安全性.\n\n\n\n### 01.授权码式\n\n\n\n该种方式,是指应用在获取三方资源的访问令牌前,首先需要向三方授权服务申请一个授权码(Authorization Code). 通过该授权码,获得访问令牌.\n\n\n\n### 02.隐藏式\n\n\n\n该种方式也被称之为简化式,是指直接向前端应用颁发令牌.因为这种获得访问令牌时,没有授权码的流程.因此,被称为隐藏式或者简化式.\n\n\n\n### 03.密码式\n\n\n\n该种方式是指用户直接将自己三方的用户名和密码告诉给应用,应用通过用户名和密码,通过HTPP请求,向三方服务器,直接申请访问令牌.\n\n\n\n### 04.凭据式\n\n\n\n该种方式是指,用户在三方的后台申请客户端ID以及客户端密钥.在申请访问令牌时,HTTP请求参数中带上客户端ID和客户端密钥.\n\n\n\n## 4.更新令牌\n\n\n\n在OATH2.0中,访问的令牌是有时效性的,在经历过一段时间后,令牌就会被置为不可用,一旦不可用,三方资源服务器就不会再提供服务.\n\n\n\n因此,API调用者需要根据访问令牌的过期时间去刷新令牌.\n\n\n\n## 5.案例举例\n\n\n\n下面,以GOOGLE API为例, 介绍下四种授权方式.此时,我们需要开发的应用时,通过用户授权,去拉取该用户名下Admob广告收益报表.\n\n\n\n### 01.授权码式\n\n\n\n授权码式,适合服务端渲染页面的应用,即SSR(Server Side Render).通过此种应用去拉取admob的广告收益报表时.\n\n\n\n#### 1). 获取客户端ID和客户端的密钥\n\n\n\n需要通过下列地址申请一个OAuth客户端ID\n\n\n\n```\nhttps://console.developers.google.com/apis/credentials\n```\n\n\n\n![图片](/2.png)\n\n![图片](/3.png)\n\n\n\n#### 2). 发起授权\n\n\n\n可通过下面的HTTP请求发起授权\n\n\n\n```\nHost:https://accounts.google.com\nUri:o/oauth2/v2/auth\nMethod: GET\nParamters:  \n   client_id:test_client_id # 在https://console.developers.google.com/apis/credentials 获取到的客户端ID \n   redirect_uri:https://google.hfdy.com/code #用户同意授权过后,要跳转的URL\n   response_type:code # 对于 Server Side Web Application,此处固定为code,即授权码模式\n   scope: https://www.googleapis.com/auth/cloud-platform #一个以空格分隔的字符串,意思是指,该应用可以有哪些权限\n   access_type: online|offline # 用于表明,当用户不在浏览器时,应用是否可以刷新令牌,当用户不在浏览器中,需要刷新令牌时,该值要设置为offline\n   state: anystring # 该参数的值会在授权成功后以 state=anystring出现在重定向的URI中\n   include_granted_scopes: true|false # 该参数指定,应用是否可以动态申请权限.true代表可以\n   login_hint: email或者google id # 如果应用程序知道是哪个用户在发起授权,可以在此处填上用户的邮箱或者google id.此种方式可以简化授权流程\n   prompt: none|consent|select_account # 是否提示用户选择账户\n```\n\n\n\n发起授权时的页面如下\n\n\n\n![图片](/1.png)\n\n\n\n授权同意后,服务器会受到下面的请求\n\n\n\n```\nhttp://localhost/?state=my_args&code=4/0AY0e-g7kLX5rSEm2PEnoXIZq7lyekG1SbEzT1BSHvmS6SDpURwzc_MKhu1SCrrgomm9hOQ&scope=https://www.googleapis.com/auth/admob.report\n```\n\n\n\n其中code就是授权码.\n\n\n\n#### 3). 根据授权码获取访问令牌\n\n\n\n拿到授权码之后,可以根据下列的HTTP请求获得访问令牌\n\n\n\n```yaml\nHost:https://oauth2.googleapis.com\nUri:/token\nMethod:POST\nContent-Type:application/x-www-form-urlencoded\nParamters:\n  code: 4/0AY0e-g7kLX5rSEm2PEnoXIZq7lyekG1SbEzT1BSHvmS6SDpURwzc_MKhu1SCrrgomm9hOQ\n  client_id:test_client_id # 客户端的ID\n  client_secret:test_client_secrect # 客户端的密钥\n  redirect_uri: https://google.hfdy.com/code\n  grant_type:authorization_code # 固定为authorization_code\n```\n\n\n\n发起该请求,可以得到下列的JSON数据\n\n\n\n```json\n{\n  \"access_token\": \"1/fFAGRNJru1FTz70BzhT3Zg\",\n  \"expires_in\": 3920,\n  \"token_type\": \"Bearer\",\n  \"scope\": \"https://www.googleapis.com/auth/admob.report\",\n  \"refresh_token\": \"1//xEoDL4iW3cxlI7yDbSRFYNG01kVKM2C-259HOF2aQbI\"\n}\n```\n\n\n\n#### 4). 调用请求\n\n\n\n访问三方资源服务器\n\n\n\n```yaml\nGET /drive/v2/files HTTP/1.1\nHost: www.googleapis.com\nAuthorization: Bearer ya29.A0AfH6SMB8cWo8n9CTpa03BfAYOk_DQKNCQDfUlg2WCQO3wJeCP1rNe6_KlrwIW4g817zJgOfPb0_FT6RYbET60Lo-jVNa23XtVu3MOyQXVeaKGwiCskOWiUAS01yIerhYE0l6e7icTiHW_lC92Mr0jgNnFdg1\n```\n\n\n\n#### 5). 刷新token\n\n\n\n通过下列的请求可以刷新token\n\n\n\n```curl\n\ncurl --location --request POST 'https://oauth2.googleapis.com/token' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'client_id=57546962315-lqmjq7aescgc7eggogphaevk8h3jt3kk.apps.googleusercontent.com' \\\n--data-urlencode 'client_secret=SFT54d6vai6c_DbTBJctkAOX' \\\n--data-urlencode 'refresh_token=1//06O7KoZJqdX7yCgYIARAAGAYSNwF-L9IrtWpvERBTXDZV7f9TX1ZDJfUiURwqIez0FkUWxrcvcpC1q8-aod2ikz-VNTd30Q6eBtU' \\\n--data-urlencode 'grant_type=refresh_token'\n```\n\n\n\n响应体\n\n\n\n```json\n{\n  \"access_token\": \"1/fFAGRNJru1FTz70BzhT3Zg\",\n  \"expires_in\": 3920,\n  \"scope\": \"https://www.googleapis.com/auth/admob.report\",\n  \"token_type\": \"Bearer\"\n}\n```\n\n\n\n6) 序列图\n\n\n\n![图片](/7.png)\n\n\n\n### 02.隐藏式\n\n\n\n对于一些纯前端应用,在GOOGLE中被称之为JAVASCRIPT WEB APP. 这类应用获取访问令牌,减少了授权码的步骤.\n\n\n\n#### 1) 发起授权,获取访问令牌\n\n\n\n发起请求\n\n\n\n```\ncurl --location --request GET 'https://accounts.google.com/o/oauth2/v2/auth?include_granted_scopes=true&scope=https://www.googleapis.com/auth/admob.report&response_type=token&state=state_parameter_passthrough_value&redirect_uri=https://google.hfdy.com/callback&client_id=691541517620-hp23tqgh6itpj278eqmm1nr2ndqt3eif.apps.googleusercontent.com'\n```\n\n重定向页面\n\n```\nhttps://google.hfdy.com/callback#access_token=ya29.A0AfH6SMC7H3A5DEHj3RqrjDxhOp7Ou9iin7lqgcrkvxRZEAwOcr-mCmlpCtv4pG-uWA7-zTx42XYM38sATuDXpx5-pb7hZx8uzTGzoMQAc6rtemh2hTogglfy6cZe39f8RHSyQDWM-qE62v15V0sLEWCLqhFW&token_type=Bearer&expires_in=3599&scope=https://www.googleapis.com/auth/admob.report\n```\n\n\n\n在重定向的URL中通过锚点的方式,将访问令牌放在了锚点中,JAVASCRIPT 应用可以通过该URL获得访问令牌\n\n\n\n#### 2) 访问GOOGLE的资源服务\n\n\n\n```\nGET /drive/v2/files HTTP/1.1\nHost: www.googleapis.com\nAuthorization: Bearer ya29.A0AfH6SMB8cWo8n9CTpa03BfAYOk_DQKNCQDfUlg2WCQO3wJeCP1rNe6_KlrwIW4g817zJgOfPb0_FT6RYbET60Lo-jVNa23XtVu3MOyQXVeaKGwiCskOWiUAS01yIerhYE0l6e7icTiHW_lC92Mr0jgNnFdg1\n```\n\n\n\n此种方式,没有刷新token的方式.\n\n\n\n当token过期后,需要重新调用认证流程.此时,有参数可选择是否再度走认证流程.\n\n\n\n#### 3) 序列图\n\n\n\n![图片](/8.png)\n\n\n\n### 03.密码式\n\n\n\n目前GOOGLE-API不提供密码式去访问API\n\n\n\n### 04.凭据式\n\n\n\n可参考该链接: [开发手册之JWT,以GOOGLE为例](https://www.yuansudong.top/2021/development-manual-jwt/index.html)\n\n\n\n参考连接\n\n\n\nhttps://oauth.net/2/\n\nhttps://tools.ietf.org/html/rfc6749\n\nhttps://developers.google.com/identity/protocols/oauth2/web-server#httprest\n\n","slug":"development-manual-oath2","published":1,"date":"2021-03-16T18:29:15.503Z","updated":"2021-03-16T18:49:00.639Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmchg4hu00017gvlet9o9d8d","content":"<p>OATH2.0,一个不同应用间的授权机制. 其核心是,用户使用一个应用,这个应用需要这个用户的一些资源.</p>\n<p>而这个应用要使用的用户的资源,却不是这个应用能提供的,属于三方.此时,这个应用需要向三方发送请求,去拿到这个用户的资源.</p>\n<p>但是,由于安全,三方服务,需要确保这个资源是用户同意这个应用获取的.</p>\n<p>这一些列,确保的过程,就是OATH2.0</p>\n<h2 id=\"1-应用场景\"><a href=\"#1-应用场景\" class=\"headerlink\" title=\"1.应用场景\"></a>1.应用场景</h2><p>新开发的应用,随着系统业务的扩展,要慢慢地融入互联网.</p>\n<p>在互联网中,你有用户或者资源.那么,新开发的应用就可以和你合作,使用你的资源或者用户,亦或者是名气.达到快速引流推广的目的. 比如,QQ,微信,微博,GITHUB,GOOGLE,FACEBOOK,TWITTER等</p>\n<p>随着应用逐渐成熟,积累了大批用户,积累了大批的用户资源. 此时,这个应用便可以效仿QQ等应用,让其他正在孵化的项目接入自己的平台. 让这个孵化项目,使用自身的资源,达到快速成长的目的.</p>\n<p>随着用户越来越多,业务越来越庞杂,原本的单体服务,变得越来越庞大,常常遇见”牵一发而动全身”的场景.</p>\n<p>此时,需要根据业务或者职业划分,将原本的单体服务,拆解成不同的服务,期望达到各司其职的目的.</p>\n<p>上面的这些场景,通过网络触发,任何设备都可以通过网络发起请求.但是,哪台设备能成功拿到数据,这就需要一套认证机制.</p>\n<p>而OATH2.0,也就应运而生.</p>\n<h2 id=\"2-授权流程\"><a href=\"#2-授权流程\" class=\"headerlink\" title=\"2.授权流程\"></a>2.授权流程</h2><p><img src=\"/2021/development-manual-oath2/index/title.png\" alt=\"图片\"></p>\n<ol>\n<li> 用户使用应用.</li>\n<li> 应用向用户发起授权许可.</li>\n<li> 用户同意授权,发起请求至三方授权服务器.</li>\n<li> 三方授权服务,验证信息,合法.</li>\n<li> 三方授权服务器返回访问令牌.</li>\n<li> 应用携带令牌向三方资源服务器请求资源.</li>\n<li> 三方资源服务器验证访问令牌,合法.</li>\n<li> 返回资源给应用.</li>\n<li> 应用向用户呈现资源或者缓存.</li>\n</ol>\n<h2 id=\"3-授权方式\"><a href=\"#3-授权方式\" class=\"headerlink\" title=\"3.授权方式\"></a>3.授权方式</h2><p>OATH2.0的标准是在RFC6749文件中定义,可通过下列地址访问</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;tools.ietf.org&#x2F;html&#x2F;rfc6749</span><br></pre></td></tr></table></figure>\n\n\n\n<p>在该文件中,定义了四种授权流程,他们分别是,授权码式,隐藏式,密码式,客户端凭据式.</p>\n<p>以上四种方式,在申请授权,获得访问令牌时,都需要在三方应用的后台进行备份申请客户端的ID和客户端的密钥.</p>\n<p>通过客户端的ID和客户端的密钥,可以标识申请授权的应用,以及申请访问令牌的安全性.</p>\n<h3 id=\"01-授权码式\"><a href=\"#01-授权码式\" class=\"headerlink\" title=\"01.授权码式\"></a>01.授权码式</h3><p>该种方式,是指应用在获取三方资源的访问令牌前,首先需要向三方授权服务申请一个授权码(Authorization Code). 通过该授权码,获得访问令牌.</p>\n<h3 id=\"02-隐藏式\"><a href=\"#02-隐藏式\" class=\"headerlink\" title=\"02.隐藏式\"></a>02.隐藏式</h3><p>该种方式也被称之为简化式,是指直接向前端应用颁发令牌.因为这种获得访问令牌时,没有授权码的流程.因此,被称为隐藏式或者简化式.</p>\n<h3 id=\"03-密码式\"><a href=\"#03-密码式\" class=\"headerlink\" title=\"03.密码式\"></a>03.密码式</h3><p>该种方式是指用户直接将自己三方的用户名和密码告诉给应用,应用通过用户名和密码,通过HTPP请求,向三方服务器,直接申请访问令牌.</p>\n<h3 id=\"04-凭据式\"><a href=\"#04-凭据式\" class=\"headerlink\" title=\"04.凭据式\"></a>04.凭据式</h3><p>该种方式是指,用户在三方的后台申请客户端ID以及客户端密钥.在申请访问令牌时,HTTP请求参数中带上客户端ID和客户端密钥.</p>\n<h2 id=\"4-更新令牌\"><a href=\"#4-更新令牌\" class=\"headerlink\" title=\"4.更新令牌\"></a>4.更新令牌</h2><p>在OATH2.0中,访问的令牌是有时效性的,在经历过一段时间后,令牌就会被置为不可用,一旦不可用,三方资源服务器就不会再提供服务.</p>\n<p>因此,API调用者需要根据访问令牌的过期时间去刷新令牌.</p>\n<h2 id=\"5-案例举例\"><a href=\"#5-案例举例\" class=\"headerlink\" title=\"5.案例举例\"></a>5.案例举例</h2><p>下面,以GOOGLE API为例, 介绍下四种授权方式.此时,我们需要开发的应用时,通过用户授权,去拉取该用户名下Admob广告收益报表.</p>\n<h3 id=\"01-授权码式-1\"><a href=\"#01-授权码式-1\" class=\"headerlink\" title=\"01.授权码式\"></a>01.授权码式</h3><p>授权码式,适合服务端渲染页面的应用,即SSR(Server Side Render).通过此种应用去拉取admob的广告收益报表时.</p>\n<h4 id=\"1-获取客户端ID和客户端的密钥\"><a href=\"#1-获取客户端ID和客户端的密钥\" class=\"headerlink\" title=\"1). 获取客户端ID和客户端的密钥\"></a>1). 获取客户端ID和客户端的密钥</h4><p>需要通过下列地址申请一个OAuth客户端ID</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;console.developers.google.com&#x2F;apis&#x2F;credentials</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/2021/development-manual-oath2/index/2.png\" alt=\"图片\"></p>\n<p><img src=\"/2021/development-manual-oath2/index/3.png\" alt=\"图片\"></p>\n<h4 id=\"2-发起授权\"><a href=\"#2-发起授权\" class=\"headerlink\" title=\"2). 发起授权\"></a>2). 发起授权</h4><p>可通过下面的HTTP请求发起授权</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host:https:&#x2F;&#x2F;accounts.google.com</span><br><span class=\"line\">Uri:o&#x2F;oauth2&#x2F;v2&#x2F;auth</span><br><span class=\"line\">Method: GET</span><br><span class=\"line\">Paramters:  </span><br><span class=\"line\">   client_id:test_client_id # 在https:&#x2F;&#x2F;console.developers.google.com&#x2F;apis&#x2F;credentials 获取到的客户端ID </span><br><span class=\"line\">   redirect_uri:https:&#x2F;&#x2F;google.hfdy.com&#x2F;code #用户同意授权过后,要跳转的URL</span><br><span class=\"line\">   response_type:code # 对于 Server Side Web Application,此处固定为code,即授权码模式</span><br><span class=\"line\">   scope: https:&#x2F;&#x2F;www.googleapis.com&#x2F;auth&#x2F;cloud-platform #一个以空格分隔的字符串,意思是指,该应用可以有哪些权限</span><br><span class=\"line\">   access_type: online|offline # 用于表明,当用户不在浏览器时,应用是否可以刷新令牌,当用户不在浏览器中,需要刷新令牌时,该值要设置为offline</span><br><span class=\"line\">   state: anystring # 该参数的值会在授权成功后以 state&#x3D;anystring出现在重定向的URI中</span><br><span class=\"line\">   include_granted_scopes: true|false # 该参数指定,应用是否可以动态申请权限.true代表可以</span><br><span class=\"line\">   login_hint: email或者google id # 如果应用程序知道是哪个用户在发起授权,可以在此处填上用户的邮箱或者google id.此种方式可以简化授权流程</span><br><span class=\"line\">   prompt: none|consent|select_account # 是否提示用户选择账户</span><br></pre></td></tr></table></figure>\n\n\n\n<p>发起授权时的页面如下</p>\n<p><img src=\"/2021/development-manual-oath2/index/1.png\" alt=\"图片\"></p>\n<p>授权同意后,服务器会受到下面的请求</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:&#x2F;&#x2F;localhost&#x2F;?state&#x3D;my_args&amp;code&#x3D;4&#x2F;0AY0e-g7kLX5rSEm2PEnoXIZq7lyekG1SbEzT1BSHvmS6SDpURwzc_MKhu1SCrrgomm9hOQ&amp;scope&#x3D;https:&#x2F;&#x2F;www.googleapis.com&#x2F;auth&#x2F;admob.report</span><br></pre></td></tr></table></figure>\n\n\n\n<p>其中code就是授权码.</p>\n<h4 id=\"3-根据授权码获取访问令牌\"><a href=\"#3-根据授权码获取访问令牌\" class=\"headerlink\" title=\"3). 根据授权码获取访问令牌\"></a>3). 根据授权码获取访问令牌</h4><p>拿到授权码之后,可以根据下列的HTTP请求获得访问令牌</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">Host:https://oauth2.googleapis.com</span></span><br><span class=\"line\"><span class=\"string\">Uri:/token</span></span><br><span class=\"line\"><span class=\"string\">Method:POST</span></span><br><span class=\"line\"><span class=\"string\">Content-Type:application/x-www-form-urlencoded</span></span><br><span class=\"line\"><span class=\"attr\">Paramters:</span></span><br><span class=\"line\">  <span class=\"attr\">code:</span> <span class=\"number\">4</span><span class=\"string\">/0AY0e-g7kLX5rSEm2PEnoXIZq7lyekG1SbEzT1BSHvmS6SDpURwzc_MKhu1SCrrgomm9hOQ</span></span><br><span class=\"line\">  <span class=\"string\">client_id:test_client_id</span> <span class=\"comment\"># 客户端的ID</span></span><br><span class=\"line\">  <span class=\"string\">client_secret:test_client_secrect</span> <span class=\"comment\"># 客户端的密钥</span></span><br><span class=\"line\">  <span class=\"attr\">redirect_uri:</span> <span class=\"string\">https://google.hfdy.com/code</span></span><br><span class=\"line\">  <span class=\"string\">grant_type:authorization_code</span> <span class=\"comment\"># 固定为authorization_code</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>发起该请求,可以得到下列的JSON数据</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;access_token&quot;</span>: <span class=\"string\">&quot;1/fFAGRNJru1FTz70BzhT3Zg&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;expires_in&quot;</span>: <span class=\"number\">3920</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;token_type&quot;</span>: <span class=\"string\">&quot;Bearer&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;scope&quot;</span>: <span class=\"string\">&quot;https://www.googleapis.com/auth/admob.report&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;refresh_token&quot;</span>: <span class=\"string\">&quot;1//xEoDL4iW3cxlI7yDbSRFYNG01kVKM2C-259HOF2aQbI&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"4-调用请求\"><a href=\"#4-调用请求\" class=\"headerlink\" title=\"4). 调用请求\"></a>4). 调用请求</h4><p>访问三方资源服务器</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">GET</span> <span class=\"string\">/drive/v2/files</span> <span class=\"string\">HTTP/1.1</span></span><br><span class=\"line\"><span class=\"attr\">Host:</span> <span class=\"string\">www.googleapis.com</span></span><br><span class=\"line\"><span class=\"attr\">Authorization:</span> <span class=\"string\">Bearer</span> <span class=\"string\">ya29.A0AfH6SMB8cWo8n9CTpa03BfAYOk_DQKNCQDfUlg2WCQO3wJeCP1rNe6_KlrwIW4g817zJgOfPb0_FT6RYbET60Lo-jVNa23XtVu3MOyQXVeaKGwiCskOWiUAS01yIerhYE0l6e7icTiHW_lC92Mr0jgNnFdg1</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"5-刷新token\"><a href=\"#5-刷新token\" class=\"headerlink\" title=\"5). 刷新token\"></a>5). 刷新token</h4><p>通过下列的请求可以刷新token</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">curl --location --request POST &#39;https:&#x2F;&#x2F;oauth2.googleapis.com&#x2F;token&#39; \\</span><br><span class=\"line\">--header &#39;Content-Type: application&#x2F;x-www-form-urlencoded&#39; \\</span><br><span class=\"line\">--data-urlencode &#39;client_id&#x3D;57546962315-lqmjq7aescgc7eggogphaevk8h3jt3kk.apps.googleusercontent.com&#39; \\</span><br><span class=\"line\">--data-urlencode &#39;client_secret&#x3D;SFT54d6vai6c_DbTBJctkAOX&#39; \\</span><br><span class=\"line\">--data-urlencode &#39;refresh_token&#x3D;1&#x2F;&#x2F;06O7KoZJqdX7yCgYIARAAGAYSNwF-L9IrtWpvERBTXDZV7f9TX1ZDJfUiURwqIez0FkUWxrcvcpC1q8-aod2ikz-VNTd30Q6eBtU&#39; \\</span><br><span class=\"line\">--data-urlencode &#39;grant_type&#x3D;refresh_token&#39;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>响应体</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;access_token&quot;</span>: <span class=\"string\">&quot;1/fFAGRNJru1FTz70BzhT3Zg&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;expires_in&quot;</span>: <span class=\"number\">3920</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;scope&quot;</span>: <span class=\"string\">&quot;https://www.googleapis.com/auth/admob.report&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;token_type&quot;</span>: <span class=\"string\">&quot;Bearer&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"6\">\n<li>序列图</li>\n</ol>\n<p><img src=\"/2021/development-manual-oath2/index/7.png\" alt=\"图片\"></p>\n<h3 id=\"02-隐藏式-1\"><a href=\"#02-隐藏式-1\" class=\"headerlink\" title=\"02.隐藏式\"></a>02.隐藏式</h3><p>对于一些纯前端应用,在GOOGLE中被称之为JAVASCRIPT WEB APP. 这类应用获取访问令牌,减少了授权码的步骤.</p>\n<h4 id=\"1-发起授权-获取访问令牌\"><a href=\"#1-发起授权-获取访问令牌\" class=\"headerlink\" title=\"1) 发起授权,获取访问令牌\"></a>1) 发起授权,获取访问令牌</h4><p>发起请求</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --location --request GET &#39;https:&#x2F;&#x2F;accounts.google.com&#x2F;o&#x2F;oauth2&#x2F;v2&#x2F;auth?include_granted_scopes&#x3D;true&amp;scope&#x3D;https:&#x2F;&#x2F;www.googleapis.com&#x2F;auth&#x2F;admob.report&amp;response_type&#x3D;token&amp;state&#x3D;state_parameter_passthrough_value&amp;redirect_uri&#x3D;https:&#x2F;&#x2F;google.hfdy.com&#x2F;callback&amp;client_id&#x3D;691541517620-hp23tqgh6itpj278eqmm1nr2ndqt3eif.apps.googleusercontent.com&#39;</span><br></pre></td></tr></table></figure>\n\n<p>重定向页面</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;google.hfdy.com&#x2F;callback#access_token&#x3D;ya29.A0AfH6SMC7H3A5DEHj3RqrjDxhOp7Ou9iin7lqgcrkvxRZEAwOcr-mCmlpCtv4pG-uWA7-zTx42XYM38sATuDXpx5-pb7hZx8uzTGzoMQAc6rtemh2hTogglfy6cZe39f8RHSyQDWM-qE62v15V0sLEWCLqhFW&amp;token_type&#x3D;Bearer&amp;expires_in&#x3D;3599&amp;scope&#x3D;https:&#x2F;&#x2F;www.googleapis.com&#x2F;auth&#x2F;admob.report</span><br></pre></td></tr></table></figure>\n\n\n\n<p>在重定向的URL中通过锚点的方式,将访问令牌放在了锚点中,JAVASCRIPT 应用可以通过该URL获得访问令牌</p>\n<h4 id=\"2-访问GOOGLE的资源服务\"><a href=\"#2-访问GOOGLE的资源服务\" class=\"headerlink\" title=\"2) 访问GOOGLE的资源服务\"></a>2) 访问GOOGLE的资源服务</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET &#x2F;drive&#x2F;v2&#x2F;files HTTP&#x2F;1.1</span><br><span class=\"line\">Host: www.googleapis.com</span><br><span class=\"line\">Authorization: Bearer ya29.A0AfH6SMB8cWo8n9CTpa03BfAYOk_DQKNCQDfUlg2WCQO3wJeCP1rNe6_KlrwIW4g817zJgOfPb0_FT6RYbET60Lo-jVNa23XtVu3MOyQXVeaKGwiCskOWiUAS01yIerhYE0l6e7icTiHW_lC92Mr0jgNnFdg1</span><br></pre></td></tr></table></figure>\n\n\n\n<p>此种方式,没有刷新token的方式.</p>\n<p>当token过期后,需要重新调用认证流程.此时,有参数可选择是否再度走认证流程.</p>\n<h4 id=\"3-序列图\"><a href=\"#3-序列图\" class=\"headerlink\" title=\"3) 序列图\"></a>3) 序列图</h4><p><img src=\"/2021/development-manual-oath2/index/8.png\" alt=\"图片\"></p>\n<h3 id=\"03-密码式-1\"><a href=\"#03-密码式-1\" class=\"headerlink\" title=\"03.密码式\"></a>03.密码式</h3><p>目前GOOGLE-API不提供密码式去访问API</p>\n<h3 id=\"04-凭据式-1\"><a href=\"#04-凭据式-1\" class=\"headerlink\" title=\"04.凭据式\"></a>04.凭据式</h3><p>可参考该链接: <a href=\"https://www.yuansudong.top/2021/development-manual-jwt/index.html\">开发手册之JWT,以GOOGLE为例</a></p>\n<p>参考连接</p>\n<p><a href=\"https://oauth.net/2/\">https://oauth.net/2/</a></p>\n<p><a href=\"https://tools.ietf.org/html/rfc6749\">https://tools.ietf.org/html/rfc6749</a></p>\n<p><a href=\"https://developers.google.com/identity/protocols/oauth2/web-server#httprest\">https://developers.google.com/identity/protocols/oauth2/web-server#httprest</a></p>\n","site":{"data":{"contact":[{"title":"github","icon":"icon-github","link":"https://github.com/yuansudong"},{"title":"email","icon":"icon-email","link":"mailto:1145919989@qq.com"},{"title":"qq","icon":"icon-qq","link":"/atom.xml"}],"favicons":["<link rel=\"shortcut icon\" href=\"/img//favicon.ico\">","<link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/img//favicon-16x16.png\">","<link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/img//favicon-32x32.png\">","<link rel=\"icon\" type=\"image/png\" sizes=\"48x48\" href=\"/img//favicon-48x48.png\">","<link rel=\"manifest\" href=\"/img//manifest.json\">","<meta name=\"mobile-web-app-capable\" content=\"yes\">","<meta name=\"theme-color\" content=\"#fff\">","<meta name=\"application-name\">","<link rel=\"apple-touch-icon\" sizes=\"57x57\" href=\"/img//apple-touch-icon-57x57.png\">","<link rel=\"apple-touch-icon\" sizes=\"60x60\" href=\"/img//apple-touch-icon-60x60.png\">","<link rel=\"apple-touch-icon\" sizes=\"72x72\" href=\"/img//apple-touch-icon-72x72.png\">","<link rel=\"apple-touch-icon\" sizes=\"76x76\" href=\"/img//apple-touch-icon-76x76.png\">","<link rel=\"apple-touch-icon\" sizes=\"114x114\" href=\"/img//apple-touch-icon-114x114.png\">","<link rel=\"apple-touch-icon\" sizes=\"120x120\" href=\"/img//apple-touch-icon-120x120.png\">","<link rel=\"apple-touch-icon\" sizes=\"144x144\" href=\"/img//apple-touch-icon-144x144.png\">","<link rel=\"apple-touch-icon\" sizes=\"152x152\" href=\"/img//apple-touch-icon-152x152.png\">","<link rel=\"apple-touch-icon\" sizes=\"167x167\" href=\"/img//apple-touch-icon-167x167.png\">","<link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/img//apple-touch-icon-180x180.png\">","<link rel=\"apple-touch-icon\" sizes=\"1024x1024\" href=\"/img//apple-touch-icon-1024x1024.png\">","<meta name=\"apple-mobile-web-app-capable\" content=\"yes\">","<meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black-translucent\">","<meta name=\"apple-mobile-web-app-title\">","<meta name=\"msapplication-TileColor\" content=\"#fff\">","<meta name=\"msapplication-TileImage\" content=\"/img//mstile-144x144.png\">","<meta name=\"msapplication-config\" content=\"/img//browserconfig.xml\">"]}},"excerpt":"","more":"<p>OATH2.0,一个不同应用间的授权机制. 其核心是,用户使用一个应用,这个应用需要这个用户的一些资源.</p>\n<p>而这个应用要使用的用户的资源,却不是这个应用能提供的,属于三方.此时,这个应用需要向三方发送请求,去拿到这个用户的资源.</p>\n<p>但是,由于安全,三方服务,需要确保这个资源是用户同意这个应用获取的.</p>\n<p>这一些列,确保的过程,就是OATH2.0</p>\n<h2 id=\"1-应用场景\"><a href=\"#1-应用场景\" class=\"headerlink\" title=\"1.应用场景\"></a>1.应用场景</h2><p>新开发的应用,随着系统业务的扩展,要慢慢地融入互联网.</p>\n<p>在互联网中,你有用户或者资源.那么,新开发的应用就可以和你合作,使用你的资源或者用户,亦或者是名气.达到快速引流推广的目的. 比如,QQ,微信,微博,GITHUB,GOOGLE,FACEBOOK,TWITTER等</p>\n<p>随着应用逐渐成熟,积累了大批用户,积累了大批的用户资源. 此时,这个应用便可以效仿QQ等应用,让其他正在孵化的项目接入自己的平台. 让这个孵化项目,使用自身的资源,达到快速成长的目的.</p>\n<p>随着用户越来越多,业务越来越庞杂,原本的单体服务,变得越来越庞大,常常遇见”牵一发而动全身”的场景.</p>\n<p>此时,需要根据业务或者职业划分,将原本的单体服务,拆解成不同的服务,期望达到各司其职的目的.</p>\n<p>上面的这些场景,通过网络触发,任何设备都可以通过网络发起请求.但是,哪台设备能成功拿到数据,这就需要一套认证机制.</p>\n<p>而OATH2.0,也就应运而生.</p>\n<h2 id=\"2-授权流程\"><a href=\"#2-授权流程\" class=\"headerlink\" title=\"2.授权流程\"></a>2.授权流程</h2><p><img src=\"/2021/development-manual-oath2/index/title.png\" alt=\"图片\"></p>\n<ol>\n<li> 用户使用应用.</li>\n<li> 应用向用户发起授权许可.</li>\n<li> 用户同意授权,发起请求至三方授权服务器.</li>\n<li> 三方授权服务,验证信息,合法.</li>\n<li> 三方授权服务器返回访问令牌.</li>\n<li> 应用携带令牌向三方资源服务器请求资源.</li>\n<li> 三方资源服务器验证访问令牌,合法.</li>\n<li> 返回资源给应用.</li>\n<li> 应用向用户呈现资源或者缓存.</li>\n</ol>\n<h2 id=\"3-授权方式\"><a href=\"#3-授权方式\" class=\"headerlink\" title=\"3.授权方式\"></a>3.授权方式</h2><p>OATH2.0的标准是在RFC6749文件中定义,可通过下列地址访问</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;tools.ietf.org&#x2F;html&#x2F;rfc6749</span><br></pre></td></tr></table></figure>\n\n\n\n<p>在该文件中,定义了四种授权流程,他们分别是,授权码式,隐藏式,密码式,客户端凭据式.</p>\n<p>以上四种方式,在申请授权,获得访问令牌时,都需要在三方应用的后台进行备份申请客户端的ID和客户端的密钥.</p>\n<p>通过客户端的ID和客户端的密钥,可以标识申请授权的应用,以及申请访问令牌的安全性.</p>\n<h3 id=\"01-授权码式\"><a href=\"#01-授权码式\" class=\"headerlink\" title=\"01.授权码式\"></a>01.授权码式</h3><p>该种方式,是指应用在获取三方资源的访问令牌前,首先需要向三方授权服务申请一个授权码(Authorization Code). 通过该授权码,获得访问令牌.</p>\n<h3 id=\"02-隐藏式\"><a href=\"#02-隐藏式\" class=\"headerlink\" title=\"02.隐藏式\"></a>02.隐藏式</h3><p>该种方式也被称之为简化式,是指直接向前端应用颁发令牌.因为这种获得访问令牌时,没有授权码的流程.因此,被称为隐藏式或者简化式.</p>\n<h3 id=\"03-密码式\"><a href=\"#03-密码式\" class=\"headerlink\" title=\"03.密码式\"></a>03.密码式</h3><p>该种方式是指用户直接将自己三方的用户名和密码告诉给应用,应用通过用户名和密码,通过HTPP请求,向三方服务器,直接申请访问令牌.</p>\n<h3 id=\"04-凭据式\"><a href=\"#04-凭据式\" class=\"headerlink\" title=\"04.凭据式\"></a>04.凭据式</h3><p>该种方式是指,用户在三方的后台申请客户端ID以及客户端密钥.在申请访问令牌时,HTTP请求参数中带上客户端ID和客户端密钥.</p>\n<h2 id=\"4-更新令牌\"><a href=\"#4-更新令牌\" class=\"headerlink\" title=\"4.更新令牌\"></a>4.更新令牌</h2><p>在OATH2.0中,访问的令牌是有时效性的,在经历过一段时间后,令牌就会被置为不可用,一旦不可用,三方资源服务器就不会再提供服务.</p>\n<p>因此,API调用者需要根据访问令牌的过期时间去刷新令牌.</p>\n<h2 id=\"5-案例举例\"><a href=\"#5-案例举例\" class=\"headerlink\" title=\"5.案例举例\"></a>5.案例举例</h2><p>下面,以GOOGLE API为例, 介绍下四种授权方式.此时,我们需要开发的应用时,通过用户授权,去拉取该用户名下Admob广告收益报表.</p>\n<h3 id=\"01-授权码式-1\"><a href=\"#01-授权码式-1\" class=\"headerlink\" title=\"01.授权码式\"></a>01.授权码式</h3><p>授权码式,适合服务端渲染页面的应用,即SSR(Server Side Render).通过此种应用去拉取admob的广告收益报表时.</p>\n<h4 id=\"1-获取客户端ID和客户端的密钥\"><a href=\"#1-获取客户端ID和客户端的密钥\" class=\"headerlink\" title=\"1). 获取客户端ID和客户端的密钥\"></a>1). 获取客户端ID和客户端的密钥</h4><p>需要通过下列地址申请一个OAuth客户端ID</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;console.developers.google.com&#x2F;apis&#x2F;credentials</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/2021/development-manual-oath2/index/2.png\" alt=\"图片\"></p>\n<p><img src=\"/2021/development-manual-oath2/index/3.png\" alt=\"图片\"></p>\n<h4 id=\"2-发起授权\"><a href=\"#2-发起授权\" class=\"headerlink\" title=\"2). 发起授权\"></a>2). 发起授权</h4><p>可通过下面的HTTP请求发起授权</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host:https:&#x2F;&#x2F;accounts.google.com</span><br><span class=\"line\">Uri:o&#x2F;oauth2&#x2F;v2&#x2F;auth</span><br><span class=\"line\">Method: GET</span><br><span class=\"line\">Paramters:  </span><br><span class=\"line\">   client_id:test_client_id # 在https:&#x2F;&#x2F;console.developers.google.com&#x2F;apis&#x2F;credentials 获取到的客户端ID </span><br><span class=\"line\">   redirect_uri:https:&#x2F;&#x2F;google.hfdy.com&#x2F;code #用户同意授权过后,要跳转的URL</span><br><span class=\"line\">   response_type:code # 对于 Server Side Web Application,此处固定为code,即授权码模式</span><br><span class=\"line\">   scope: https:&#x2F;&#x2F;www.googleapis.com&#x2F;auth&#x2F;cloud-platform #一个以空格分隔的字符串,意思是指,该应用可以有哪些权限</span><br><span class=\"line\">   access_type: online|offline # 用于表明,当用户不在浏览器时,应用是否可以刷新令牌,当用户不在浏览器中,需要刷新令牌时,该值要设置为offline</span><br><span class=\"line\">   state: anystring # 该参数的值会在授权成功后以 state&#x3D;anystring出现在重定向的URI中</span><br><span class=\"line\">   include_granted_scopes: true|false # 该参数指定,应用是否可以动态申请权限.true代表可以</span><br><span class=\"line\">   login_hint: email或者google id # 如果应用程序知道是哪个用户在发起授权,可以在此处填上用户的邮箱或者google id.此种方式可以简化授权流程</span><br><span class=\"line\">   prompt: none|consent|select_account # 是否提示用户选择账户</span><br></pre></td></tr></table></figure>\n\n\n\n<p>发起授权时的页面如下</p>\n<p><img src=\"/2021/development-manual-oath2/index/1.png\" alt=\"图片\"></p>\n<p>授权同意后,服务器会受到下面的请求</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:&#x2F;&#x2F;localhost&#x2F;?state&#x3D;my_args&amp;code&#x3D;4&#x2F;0AY0e-g7kLX5rSEm2PEnoXIZq7lyekG1SbEzT1BSHvmS6SDpURwzc_MKhu1SCrrgomm9hOQ&amp;scope&#x3D;https:&#x2F;&#x2F;www.googleapis.com&#x2F;auth&#x2F;admob.report</span><br></pre></td></tr></table></figure>\n\n\n\n<p>其中code就是授权码.</p>\n<h4 id=\"3-根据授权码获取访问令牌\"><a href=\"#3-根据授权码获取访问令牌\" class=\"headerlink\" title=\"3). 根据授权码获取访问令牌\"></a>3). 根据授权码获取访问令牌</h4><p>拿到授权码之后,可以根据下列的HTTP请求获得访问令牌</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">Host:https://oauth2.googleapis.com</span></span><br><span class=\"line\"><span class=\"string\">Uri:/token</span></span><br><span class=\"line\"><span class=\"string\">Method:POST</span></span><br><span class=\"line\"><span class=\"string\">Content-Type:application/x-www-form-urlencoded</span></span><br><span class=\"line\"><span class=\"attr\">Paramters:</span></span><br><span class=\"line\">  <span class=\"attr\">code:</span> <span class=\"number\">4</span><span class=\"string\">/0AY0e-g7kLX5rSEm2PEnoXIZq7lyekG1SbEzT1BSHvmS6SDpURwzc_MKhu1SCrrgomm9hOQ</span></span><br><span class=\"line\">  <span class=\"string\">client_id:test_client_id</span> <span class=\"comment\"># 客户端的ID</span></span><br><span class=\"line\">  <span class=\"string\">client_secret:test_client_secrect</span> <span class=\"comment\"># 客户端的密钥</span></span><br><span class=\"line\">  <span class=\"attr\">redirect_uri:</span> <span class=\"string\">https://google.hfdy.com/code</span></span><br><span class=\"line\">  <span class=\"string\">grant_type:authorization_code</span> <span class=\"comment\"># 固定为authorization_code</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>发起该请求,可以得到下列的JSON数据</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;access_token&quot;</span>: <span class=\"string\">&quot;1/fFAGRNJru1FTz70BzhT3Zg&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;expires_in&quot;</span>: <span class=\"number\">3920</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;token_type&quot;</span>: <span class=\"string\">&quot;Bearer&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;scope&quot;</span>: <span class=\"string\">&quot;https://www.googleapis.com/auth/admob.report&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;refresh_token&quot;</span>: <span class=\"string\">&quot;1//xEoDL4iW3cxlI7yDbSRFYNG01kVKM2C-259HOF2aQbI&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"4-调用请求\"><a href=\"#4-调用请求\" class=\"headerlink\" title=\"4). 调用请求\"></a>4). 调用请求</h4><p>访问三方资源服务器</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">GET</span> <span class=\"string\">/drive/v2/files</span> <span class=\"string\">HTTP/1.1</span></span><br><span class=\"line\"><span class=\"attr\">Host:</span> <span class=\"string\">www.googleapis.com</span></span><br><span class=\"line\"><span class=\"attr\">Authorization:</span> <span class=\"string\">Bearer</span> <span class=\"string\">ya29.A0AfH6SMB8cWo8n9CTpa03BfAYOk_DQKNCQDfUlg2WCQO3wJeCP1rNe6_KlrwIW4g817zJgOfPb0_FT6RYbET60Lo-jVNa23XtVu3MOyQXVeaKGwiCskOWiUAS01yIerhYE0l6e7icTiHW_lC92Mr0jgNnFdg1</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"5-刷新token\"><a href=\"#5-刷新token\" class=\"headerlink\" title=\"5). 刷新token\"></a>5). 刷新token</h4><p>通过下列的请求可以刷新token</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">curl --location --request POST &#39;https:&#x2F;&#x2F;oauth2.googleapis.com&#x2F;token&#39; \\</span><br><span class=\"line\">--header &#39;Content-Type: application&#x2F;x-www-form-urlencoded&#39; \\</span><br><span class=\"line\">--data-urlencode &#39;client_id&#x3D;57546962315-lqmjq7aescgc7eggogphaevk8h3jt3kk.apps.googleusercontent.com&#39; \\</span><br><span class=\"line\">--data-urlencode &#39;client_secret&#x3D;SFT54d6vai6c_DbTBJctkAOX&#39; \\</span><br><span class=\"line\">--data-urlencode &#39;refresh_token&#x3D;1&#x2F;&#x2F;06O7KoZJqdX7yCgYIARAAGAYSNwF-L9IrtWpvERBTXDZV7f9TX1ZDJfUiURwqIez0FkUWxrcvcpC1q8-aod2ikz-VNTd30Q6eBtU&#39; \\</span><br><span class=\"line\">--data-urlencode &#39;grant_type&#x3D;refresh_token&#39;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>响应体</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;access_token&quot;</span>: <span class=\"string\">&quot;1/fFAGRNJru1FTz70BzhT3Zg&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;expires_in&quot;</span>: <span class=\"number\">3920</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;scope&quot;</span>: <span class=\"string\">&quot;https://www.googleapis.com/auth/admob.report&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;token_type&quot;</span>: <span class=\"string\">&quot;Bearer&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"6\">\n<li>序列图</li>\n</ol>\n<p><img src=\"/2021/development-manual-oath2/index/7.png\" alt=\"图片\"></p>\n<h3 id=\"02-隐藏式-1\"><a href=\"#02-隐藏式-1\" class=\"headerlink\" title=\"02.隐藏式\"></a>02.隐藏式</h3><p>对于一些纯前端应用,在GOOGLE中被称之为JAVASCRIPT WEB APP. 这类应用获取访问令牌,减少了授权码的步骤.</p>\n<h4 id=\"1-发起授权-获取访问令牌\"><a href=\"#1-发起授权-获取访问令牌\" class=\"headerlink\" title=\"1) 发起授权,获取访问令牌\"></a>1) 发起授权,获取访问令牌</h4><p>发起请求</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --location --request GET &#39;https:&#x2F;&#x2F;accounts.google.com&#x2F;o&#x2F;oauth2&#x2F;v2&#x2F;auth?include_granted_scopes&#x3D;true&amp;scope&#x3D;https:&#x2F;&#x2F;www.googleapis.com&#x2F;auth&#x2F;admob.report&amp;response_type&#x3D;token&amp;state&#x3D;state_parameter_passthrough_value&amp;redirect_uri&#x3D;https:&#x2F;&#x2F;google.hfdy.com&#x2F;callback&amp;client_id&#x3D;691541517620-hp23tqgh6itpj278eqmm1nr2ndqt3eif.apps.googleusercontent.com&#39;</span><br></pre></td></tr></table></figure>\n\n<p>重定向页面</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;google.hfdy.com&#x2F;callback#access_token&#x3D;ya29.A0AfH6SMC7H3A5DEHj3RqrjDxhOp7Ou9iin7lqgcrkvxRZEAwOcr-mCmlpCtv4pG-uWA7-zTx42XYM38sATuDXpx5-pb7hZx8uzTGzoMQAc6rtemh2hTogglfy6cZe39f8RHSyQDWM-qE62v15V0sLEWCLqhFW&amp;token_type&#x3D;Bearer&amp;expires_in&#x3D;3599&amp;scope&#x3D;https:&#x2F;&#x2F;www.googleapis.com&#x2F;auth&#x2F;admob.report</span><br></pre></td></tr></table></figure>\n\n\n\n<p>在重定向的URL中通过锚点的方式,将访问令牌放在了锚点中,JAVASCRIPT 应用可以通过该URL获得访问令牌</p>\n<h4 id=\"2-访问GOOGLE的资源服务\"><a href=\"#2-访问GOOGLE的资源服务\" class=\"headerlink\" title=\"2) 访问GOOGLE的资源服务\"></a>2) 访问GOOGLE的资源服务</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET &#x2F;drive&#x2F;v2&#x2F;files HTTP&#x2F;1.1</span><br><span class=\"line\">Host: www.googleapis.com</span><br><span class=\"line\">Authorization: Bearer ya29.A0AfH6SMB8cWo8n9CTpa03BfAYOk_DQKNCQDfUlg2WCQO3wJeCP1rNe6_KlrwIW4g817zJgOfPb0_FT6RYbET60Lo-jVNa23XtVu3MOyQXVeaKGwiCskOWiUAS01yIerhYE0l6e7icTiHW_lC92Mr0jgNnFdg1</span><br></pre></td></tr></table></figure>\n\n\n\n<p>此种方式,没有刷新token的方式.</p>\n<p>当token过期后,需要重新调用认证流程.此时,有参数可选择是否再度走认证流程.</p>\n<h4 id=\"3-序列图\"><a href=\"#3-序列图\" class=\"headerlink\" title=\"3) 序列图\"></a>3) 序列图</h4><p><img src=\"/2021/development-manual-oath2/index/8.png\" alt=\"图片\"></p>\n<h3 id=\"03-密码式-1\"><a href=\"#03-密码式-1\" class=\"headerlink\" title=\"03.密码式\"></a>03.密码式</h3><p>目前GOOGLE-API不提供密码式去访问API</p>\n<h3 id=\"04-凭据式-1\"><a href=\"#04-凭据式-1\" class=\"headerlink\" title=\"04.凭据式\"></a>04.凭据式</h3><p>可参考该链接: <a href=\"https://www.yuansudong.top/2021/development-manual-jwt/index.html\">开发手册之JWT,以GOOGLE为例</a></p>\n<p>参考连接</p>\n<p><a href=\"https://oauth.net/2/\">https://oauth.net/2/</a></p>\n<p><a href=\"https://tools.ietf.org/html/rfc6749\">https://tools.ietf.org/html/rfc6749</a></p>\n<p><a href=\"https://developers.google.com/identity/protocols/oauth2/web-server#httprest\">https://developers.google.com/identity/protocols/oauth2/web-server#httprest</a></p>\n"},{"title":"聊聊golang中,与channel相关的使用技巧","cover":"/img/golang/channel_title.png","subtitle":"聊聊golang中,与channel相关的使用技巧","author":{"nick":"袁苏东","link":"https://github.com/yuansudong"},"typora-root-url":"development-manual-jwt","_content":"\nchannel是Go中的一个核心类型，你可以把它看成一个管道，通过它并发核心单元就可以发送或者接收数据进行通讯(communication)。\n\n\n\nchannel具有四个6个特性,它们分别是有缓冲的channel,无缓冲的channel,只读channel和只写channel,打开的channel关闭的channel.\n\n\n\n## 1.关于channel\n\n\n\n### 01.channel的打开和关闭\n\n\n\nchannel的打开通过make(chan int),channel的关闭通过内置函数close\n\n\n\n```go\n\npackage main\n\nfunc main() {\n ch :=  make(chan int)\n close(ch)\n}\n```\n\n\n\n### 02.有缓冲的channel和无缓冲的channel\n\n\n\n在写入的过程中,有缓冲的channel除非缓冲区已满,否则执行流程不会阻塞.无缓冲的channel则会被阻塞,直到无缓冲的channel中的元素被读取为止.\n\n\n\n在读取的过程中,对于有缓冲的channel,只要channel中有元素就会读取.对于无缓冲的channel,需要等待其他协程写入\n\n\n\n```go\n\npackage main\n\nimport (\n  \"context\"\n  \"fmt\"\n  \"log\"\n  \"sync\"\n  \"time\"\n)\nfunc main() {\n  BlockChannel()\n  NonBlockChannel()\n}\n\n// BlockChannel 阻塞channel\nfunc BlockChannel() {\n  var wg sync.WaitGroup\n  cCh := make(chan int, 1)\n\n  ctx, cancel := context.WithCancel(context.Background())\n  wg.Add(2)\n  // 写入\n  go func(wCtx context.Context, wCh chan<- int) {\n    defer wg.Done()\n    i := 1\n    for {\n      select {\n      case <-wCtx.Done():\n        return\n      case wCh <- i:\n      default:\n        log.Println(\"Write处于阻塞状态\")\n      }\n      i++\n    }\n  }(ctx, cCh)\n  go func(rCtx context.Context, rCh <-chan int) {\n    defer wg.Done()\n    for {\n      select {\n      case <-rCtx.Done():\n        return\n      case ele := <-rCh:\n        log.Println(\"接收新值:\", ele)\n      default:\n        log.Println(\"Read处于阻塞状态\")\n      }\n    }\n  }(ctx, cCh)\n  time.Sleep(5 * time.Second)\n  cancel()\n  wg.Wait()\n  close(cCh)\n  log.Println(\"结束!\")\n\n}\n\n// NonBlockChannel 非阻塞的channel\nfunc NonBlockChannel() {\n  cChannel := make(chan int, 1)\n  cChannel <- 1\n  log.Println(<-cChannel)\n  close(cChannel)\n}\n```\n\n\n\n### 03.只读的channel和只写的channel\n\n\n\nchannel具有只读和只写的特性,只读的channel只能从channel内接收元素,不能向channel里写入元素.\n\n\n\n只写的channel只能向管道内写入元素,不能从管道内读取元素\n\n\n\n```go\n\npackage main\n\nimport (\n  \"context\"\n  \"fmt\"\n  \"log\"\n  \"sync\"\n  \"time\"\n)\n\nfunc main() {\n  RWChannel()\n}\nfunc RWChannel() {\n  var wg sync.WaitGroup\n  cChannel := make(chan int, 1)\n  ctx, cancel := context.WithCancel(context.Background())\n  wg.Add(2)\n  go func() {\n    defer wg.Done()\n    ReadHandler(ctx, cChannel)\n  }()\n  go func() {\n    defer wg.Done()\n    WriteHandler(ctx, cChannel)\n  }()\n  time.Sleep(5 * time.Second)\n  cancel()\n  wg.Wait()\n  close(cChannel)\n  log.Println(\"结束!\")\n\n}\n\nfunc ReadHandler(ctx context.Context, rCh chan int) {\n  for {\n    select {\n    case <-ctx.Done():\n      return\n    case ele := <-rCh:\n      log.Println(ele)\n    }\n  }\n}\n\nfunc WriteHandler(ctx context.Context, wCh chan int) {\n  i := 0\n  for {\n    select {\n    case <-ctx.Done():\n      return\n    default:\n      i++\n      wCh <- i\n    }\n  }\n}\n```\n\n\n\n### 04. 只读和只写的channel\n\n\n\n对于只读channel,可以读取channel中的元素,但是,不能写入和关闭\n\n\n\n对于只写channel,可以向channel中写入元素,但是,不能读取和关闭\n\n\n\n```go\ntype Model struct {\n // 只读\n  _ReadChannel <-chan int \n  // \n  _WriteChannel chan<- int\n}\n```\n\n\n\n下面是一个只读和只写的channel demo\n\n\n\n```go\n\npackage main\n\nimport (\n  \"context\"\n  \"fmt\"\n  \"log\"\n  \"sync\"\n  \"time\"\n)\n\nfunc main() {\n  RWChannel()\n}\nfunc RWChannel() {\n  var wg sync.WaitGroup\n  cChannel := make(chan int, 1)\n  ctx, cancel := context.WithCancel(context.Background())\n  wg.Add(2)\n  go func() {\n    defer wg.Done()\n    ReadHandler(ctx, cChannel)\n  }()\n  go func() {\n    defer wg.Done()\n    WriteHandler(ctx, cChannel)\n  }()\n  time.Sleep(5 * time.Second)\n  cancel()\n  wg.Wait()\n  close(cChannel)\n  log.Println(\"结束!\")\n\n}\n\nfunc ReadHandler(ctx context.Context, rCh <-chan int) {\n  //// rCh 只能读,不能写,不能被关闭,否则编译不过\n  for {\n    select {\n    case <-ctx.Done():\n      return\n    case ele := <-rCh:\n      log.Println(ele)\n    }\n  }\n}\n\nfunc WriteHandler(ctx context.Context, wCh chan<- int) {\n  // wCh 只能写,不能读,不能被关闭,否则编译不过\n  i := 0\n  for {\n    select {\n    case <-ctx.Done():\n      return\n    default:\n      i++\n      wCh <- i\n    }\n  }\n}\n```\n\n\n\n## 2.关于select\n\n\n\n谈到了channel,肯定离不开select\n\n\n\nGo中的select是Golang在语言层面提供的I/O多路复用的机制，其专门用来检测多个channel是否准备完毕：可读或可写。\n\n\n\n其大致结构如下\n\n\n\n```go\nselect {\ncase r1 := <- ch1:\n  log.Println(r1)\ncase r2 :=  <- ch2:\n  log.Println(r2)\ndefault:\n  log.Println(\"default\")\n}\n```\n\n\n\n看到select的结构,是不是觉得和switch很像. 其实他和switch有着诸多的区别.\n\n\n\n下面,我们来探索下,select的神奇之处\n\n\n\n01.select中,对于case的选择是随机的.\n\n\n\n为了验证case是随机的,下了下面的例子.\n\n\n\n```go\n\npackage main\nimport \"fmt\"\nfunc main() {\n  ch1 := make(chan int, 1)\n  ch2 := make(chan int, 1)\n  go func() {\n    ch1 <- 1\n  }()\n  go func() {\n    ch2 <- 2\n  }()\n  select {\n  case v1 := <-ch1:\n    fmt.Println(\"v1:\", v1)\n  case v2 := <-ch2:\n    fmt.Println(\"v2:\", v2)\n  default:\n    fmt.Println(\"default\")\n  }\n}\n```\n\n\n\n对于上面的例子,输出可能如下\n\n\n\n第一种: v1:1\n\n第二种: v2:2\n\n第三种: default\n\n\n\n### 02.select中,如果没有default语句，则会阻塞等待任一case\n\n\n\n```go\npackage main\nimport \"fmt\"\nfunc main() {\n  ch1 := make(chan int, 1)\n  ch2 := make(chan int, 1)\n  select {\n  case v1 := <-ch1:\n    fmt.Println(\"v1:\", v1)\n  case v2 := <-ch2:\n    fmt.Println(\"v2:\", v2)\n  }\n}\n```\n\n\n\n输出结果如下\n\n\n\n```\nfatal error: all goroutines are asleep - deadlock!\n```\n\n\n\n### 03.select中,对于接受的channel,一定要判断管道是否关闭.\n\n\n\n要判断管道是否关闭,因为管道关闭后,返回的是一个当前元素的默认值.\n\n\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n  ch1 := make(chan *int, 1)\n  ch2 := make(chan *int, 1)\n  close(ch1)\n  select {\n  case v1,ok := <-ch1:\n    fmt.Println(\"v1:\", v1,ok)\n  case v2 := <-ch2:\n    fmt.Println(\"v2:\", v2)\n  }\n}\n```\n\n\n\n输出结果如下\n\n\n\n```\nv1: <nil> false\n```\n\n\n\n### 04.select中,如果什么语句都没有,则会阻塞住当前的协程.最终报死锁的错误\n\n\n\n如果select语句中什么都没有,协程就会被阻塞住.\n\n\n\n```go\npackage main\nfunc main() {\n  select {}\n}\n```\n\n\n\n输出结果\n\n\n\n```\nfatal error: all goroutines are asleep - deadlock!\n```\n\n\n\n## 3.使用技巧\n\n\n\n### 01.channel关闭时,读取该channel的协程都会收到通知\n\n\n\n基于该特性,我们可以用一个channel,通知所有的协程退出.此种情况,一般发生在进程收到进程的退出信号,做进程退出前的清理工作时.\n\n\n\n样例代码:\n\n\n\n```go\npackage main\n\nimport (\n  \"fmt\"\n  \"sync\"\n)\n\nfunc main() {\n  var wg sync.WaitGroup\n  cExit := make(chan struct{})\n  wg.Add(3)\n  go func() {\n    defer wg.Done()\n    select {\n    case <-cExit:\n      fmt.Println(\"g1 退出\")\n      return\n    }\n  }()\n  go func() {\n    defer wg.Done()\n    select {\n    case <-cExit:\n      fmt.Println(\"g2 退出\")\n      return\n    }\n  }()\n  go func() {\n    defer wg.Done()\n    select {\n    case <-cExit:\n      fmt.Println(\"g3 退出\")\n      return\n    }\n  }()\n  close(cExit)\n  wg.Wait()\n}\n```\n\n\n\n输出结果:\n\n\n\n```\ng2 退出\ng3 退出\ng1 退出\n```\n\n\n\n### 02.基于channel的可读可写特性,可以保护参数式channel不被胡乱读取或者写入,从而导致程序写入死锁.\n\n\n\n样例代码:\n\n\n\n```go\nfunc WriteExample(ctx context.Context, ch chan<- int ) {}\nfunc ReadExample(ctx context.Context, ch <-chan int){}\n```\n\n\n\n如此写法,可以确保channel在WriteExample只能写,不能读不能关闭.在ReadExample中只能读,不能写,不能关闭\n\n\n\n### 03.基于向已经关闭的channel中写入会发生异常的特性,可以简化代码\n\n### 04.基于timer可做协程的驻留时间,以及异步任务的超时操作\n\n\n\n说到这里,肯定会有人反驳.因为,在写程序的时候,一直遵循着谁开启谁关闭,谁申请谁释放的原则.\n\n\n\n这个原则是正确的.但是对于一些场景,你发现背道而驰会意想不到的简洁.\n\n\n\n下面就以实现驻留式协程池为例.\n\n\n\n驻留式协程池要实现的目标是,对协程的复用,避免频繁开启协程所带来的花销.\n\n\n\n```go\npackage main\n\nimport (\n  \"context\"\n  \"log\"\n  \"math/rand\"\n  \"sync\"\n  \"sync/atomic\"\n  \"time\"\n)\n\n// Worker 用于描述一个工人\ntype Worker struct {\n  _WID    uint64\n  _TaskCh chan int\n}\n\n// NewWorker 新建立一个工人\nfunc NewWorker(iWID uint64) *Worker {\n  return &Worker{\n    _WID:    iWID,\n    _TaskCh: make(chan int),\n  }\n}\n\n// Do 用于工人执行任务\nfunc (w *Worker) Do(ctx context.Context) {\n  tIdleDuration := 500 * time.Millisecond\n  for {\n    select {\n    case <-ctx.Done():\n      log.Println(\"进程退出\")\n      goto end\n    case <-time.After(tIdleDuration):\n      log.Println(\"Worker驻留时间已到准备退出!\", w._WID)\n      goto end\n    case task := <-w._TaskCh:\n      time.Sleep(time.Second) // 模拟任务处理时长\n      log.Println(\"Worker:\", w._WID, \" 收到任务\", task)\n    }\n  }\nend:\n  close(w._TaskCh)\n  return\n}\n\n// Leader 用于管理工人\ntype Leader struct {\n  sync.WaitGroup\n  ctx    context.Context\n  idx    uint64\n  cancel context.CancelFunc\n  works  map[uint64]*Worker\n}\n\n// NewLeader 实例化一个leader\nfunc NewLeader() *Leader {\n  mCtx, mCancel := context.WithCancel(context.Background())\n  return &Leader{\n    ctx:    mCtx,\n    idx:    0,\n    cancel: mCancel,\n    works:  make(map[uint64]*Worker),\n  }\n}\n\n// ClearWorker 用于清理工人\nfunc (l *Leader) ClearWorker(w *Worker) {\n  delete(l.works, w._WID)\n}\n\n// DispatchTask 用于派发任务\nfunc (l *Leader) DispatchTask(iTask int) {\n  bSuccess := false\n  for _, work := range l.works {\n    if l.NotifyWorker(work, iTask) {\n      bSuccess = true\n      break\n    }\n  }\n  if !bSuccess {\n    l.WorkerStartup(iTask)\n  }\n}\n\n// NotifyWorker 用于通知\nfunc (l *Leader) NotifyWorker(w *Worker, iTask int) (status bool) {\n  defer func() {\n    if r := recover(); r != nil {\n      // 进入这里代表工人已经退出了\n      l.ClearWorker(w)\n      log.Println(\"清理了工人:\", w._WID)\n      return\n    }\n  }()\n  select {\n  case w._TaskCh <- iTask:\n    status = true\n    return\n  default:\n    return\n  }\n}\n\n// WorkerStartup 启动一个工人\nfunc (l *Leader) WorkerStartup(iTask int) {\n  w := NewWorker(atomic.AddUint64(&l.idx, 1))\n  go func() {\n    l.Add(1)\n    defer l.Done()\n    w.Do(l.ctx)\n  }()\n  w._TaskCh <- iTask\n  l.works[w._WID] = w\n}\n\n// Exit 用于退出操作\nfunc (l *Leader) Exit() {\n  // 向所有协程通知退出信号\n  l.cancel()\n  // 等待所有协程退出\n  l.Wait()\n  log.Println(\"开启协程的最大编号是:\", l.idx)\n}\n\nfunc main() {\n  mLeader := NewLeader()\n  for i := 0; i < 100; i++ {\n    mLeader.DispatchTask(i)\n    // 模拟任务的不确定性\n    time.Sleep(time.Duration(rand.Intn(10)) * time.Second)\n  }\n  time.Sleep(15 * time.Second)\n  mLeader.Exit()\n}\n```\n\n\n\n输出样例:\n\n\n\n```log\n2021/03/13 09:24:38 Worker: 1  收到任务 0\n2021/03/13 09:24:38 Worker驻留时间已到准备退出! 1\n2021/03/13 09:24:39 Worker: 2  收到任务 1\n2021/03/13 09:24:39 Worker驻留时间已到准备退出! 2\n2021/03/13 09:24:45 清理了工人: 1\n2021/03/13 09:24:45 清理了工人: 2\n2021/03/13 09:24:46 Worker: 3  收到任务 2\n2021/03/13 09:24:46 Worker驻留时间已到准备退出! 3\n2021/03/13 09:24:52 清理了工人: 3\n2021/03/13 09:24:53 Worker: 4  收到任务 3\n2021/03/13 09:24:53 Worker驻留时间已到准备退出! 4\n2021/03/13 09:25:01 清理了工人: 4\n2021/03/13 09:25:02 Worker: 5  收到任务 4\n2021/03/13 09:25:02 Worker驻留时间已到准备退出! 5\n2021/03/13 09:25:03 Worker: 6  收到任务 5\n2021/03/13 09:25:03 Worker驻留时间已到准备退出! 6\n2021/03/13 09:25:10 清理了工人: 5\n2021/03/13 09:25:10 清理了工人: 6\n2021/03/13 09:25:11 Worker: 7  收到任务 6\n2021/03/13 09:25:11 Worker驻留时间已到准备退出! 7\n2021/03/13 09:25:15 清理了工人: 7\n2021/03/13 09:25:16 Worker: 9  收到任务 8\n2021/03/13 09:25:16 Worker: 8  收到任务 7\n2021/03/13 09:25:16 Worker驻留时间已到准备退出! 9\n2021/03/13 09:25:16 Worker驻留时间已到准备退出! 8\n2021/03/13 09:25:21 清理了工人: 8\n2021/03/13 09:25:21 清理了工人: 9\n2021/03/13 09:25:22 Worker: 10  收到任务 9\n2021/03/13 09:25:22 Worker: 11  收到任务 10\n2021/03/13 09:25:22 Worker驻留时间已到准备退出! 11\n2021/03/13 09:25:22 Worker驻留时间已到准备退出! 10\n```","source":"_posts/golang-channel.md","raw":"---\n\ntitle: 聊聊golang中,与channel相关的使用技巧\ncover: /img/golang/channel_title.png\nsubtitle: 聊聊golang中,与channel相关的使用技巧\ncategories: \"GO语言\"\ntags: \"GO语言\"\nauthor:\n  nick: 袁苏东\n  link: https://github.com/yuansudong\ntypora-root-url: development-manual-jwt\n---\n\nchannel是Go中的一个核心类型，你可以把它看成一个管道，通过它并发核心单元就可以发送或者接收数据进行通讯(communication)。\n\n\n\nchannel具有四个6个特性,它们分别是有缓冲的channel,无缓冲的channel,只读channel和只写channel,打开的channel关闭的channel.\n\n\n\n## 1.关于channel\n\n\n\n### 01.channel的打开和关闭\n\n\n\nchannel的打开通过make(chan int),channel的关闭通过内置函数close\n\n\n\n```go\n\npackage main\n\nfunc main() {\n ch :=  make(chan int)\n close(ch)\n}\n```\n\n\n\n### 02.有缓冲的channel和无缓冲的channel\n\n\n\n在写入的过程中,有缓冲的channel除非缓冲区已满,否则执行流程不会阻塞.无缓冲的channel则会被阻塞,直到无缓冲的channel中的元素被读取为止.\n\n\n\n在读取的过程中,对于有缓冲的channel,只要channel中有元素就会读取.对于无缓冲的channel,需要等待其他协程写入\n\n\n\n```go\n\npackage main\n\nimport (\n  \"context\"\n  \"fmt\"\n  \"log\"\n  \"sync\"\n  \"time\"\n)\nfunc main() {\n  BlockChannel()\n  NonBlockChannel()\n}\n\n// BlockChannel 阻塞channel\nfunc BlockChannel() {\n  var wg sync.WaitGroup\n  cCh := make(chan int, 1)\n\n  ctx, cancel := context.WithCancel(context.Background())\n  wg.Add(2)\n  // 写入\n  go func(wCtx context.Context, wCh chan<- int) {\n    defer wg.Done()\n    i := 1\n    for {\n      select {\n      case <-wCtx.Done():\n        return\n      case wCh <- i:\n      default:\n        log.Println(\"Write处于阻塞状态\")\n      }\n      i++\n    }\n  }(ctx, cCh)\n  go func(rCtx context.Context, rCh <-chan int) {\n    defer wg.Done()\n    for {\n      select {\n      case <-rCtx.Done():\n        return\n      case ele := <-rCh:\n        log.Println(\"接收新值:\", ele)\n      default:\n        log.Println(\"Read处于阻塞状态\")\n      }\n    }\n  }(ctx, cCh)\n  time.Sleep(5 * time.Second)\n  cancel()\n  wg.Wait()\n  close(cCh)\n  log.Println(\"结束!\")\n\n}\n\n// NonBlockChannel 非阻塞的channel\nfunc NonBlockChannel() {\n  cChannel := make(chan int, 1)\n  cChannel <- 1\n  log.Println(<-cChannel)\n  close(cChannel)\n}\n```\n\n\n\n### 03.只读的channel和只写的channel\n\n\n\nchannel具有只读和只写的特性,只读的channel只能从channel内接收元素,不能向channel里写入元素.\n\n\n\n只写的channel只能向管道内写入元素,不能从管道内读取元素\n\n\n\n```go\n\npackage main\n\nimport (\n  \"context\"\n  \"fmt\"\n  \"log\"\n  \"sync\"\n  \"time\"\n)\n\nfunc main() {\n  RWChannel()\n}\nfunc RWChannel() {\n  var wg sync.WaitGroup\n  cChannel := make(chan int, 1)\n  ctx, cancel := context.WithCancel(context.Background())\n  wg.Add(2)\n  go func() {\n    defer wg.Done()\n    ReadHandler(ctx, cChannel)\n  }()\n  go func() {\n    defer wg.Done()\n    WriteHandler(ctx, cChannel)\n  }()\n  time.Sleep(5 * time.Second)\n  cancel()\n  wg.Wait()\n  close(cChannel)\n  log.Println(\"结束!\")\n\n}\n\nfunc ReadHandler(ctx context.Context, rCh chan int) {\n  for {\n    select {\n    case <-ctx.Done():\n      return\n    case ele := <-rCh:\n      log.Println(ele)\n    }\n  }\n}\n\nfunc WriteHandler(ctx context.Context, wCh chan int) {\n  i := 0\n  for {\n    select {\n    case <-ctx.Done():\n      return\n    default:\n      i++\n      wCh <- i\n    }\n  }\n}\n```\n\n\n\n### 04. 只读和只写的channel\n\n\n\n对于只读channel,可以读取channel中的元素,但是,不能写入和关闭\n\n\n\n对于只写channel,可以向channel中写入元素,但是,不能读取和关闭\n\n\n\n```go\ntype Model struct {\n // 只读\n  _ReadChannel <-chan int \n  // \n  _WriteChannel chan<- int\n}\n```\n\n\n\n下面是一个只读和只写的channel demo\n\n\n\n```go\n\npackage main\n\nimport (\n  \"context\"\n  \"fmt\"\n  \"log\"\n  \"sync\"\n  \"time\"\n)\n\nfunc main() {\n  RWChannel()\n}\nfunc RWChannel() {\n  var wg sync.WaitGroup\n  cChannel := make(chan int, 1)\n  ctx, cancel := context.WithCancel(context.Background())\n  wg.Add(2)\n  go func() {\n    defer wg.Done()\n    ReadHandler(ctx, cChannel)\n  }()\n  go func() {\n    defer wg.Done()\n    WriteHandler(ctx, cChannel)\n  }()\n  time.Sleep(5 * time.Second)\n  cancel()\n  wg.Wait()\n  close(cChannel)\n  log.Println(\"结束!\")\n\n}\n\nfunc ReadHandler(ctx context.Context, rCh <-chan int) {\n  //// rCh 只能读,不能写,不能被关闭,否则编译不过\n  for {\n    select {\n    case <-ctx.Done():\n      return\n    case ele := <-rCh:\n      log.Println(ele)\n    }\n  }\n}\n\nfunc WriteHandler(ctx context.Context, wCh chan<- int) {\n  // wCh 只能写,不能读,不能被关闭,否则编译不过\n  i := 0\n  for {\n    select {\n    case <-ctx.Done():\n      return\n    default:\n      i++\n      wCh <- i\n    }\n  }\n}\n```\n\n\n\n## 2.关于select\n\n\n\n谈到了channel,肯定离不开select\n\n\n\nGo中的select是Golang在语言层面提供的I/O多路复用的机制，其专门用来检测多个channel是否准备完毕：可读或可写。\n\n\n\n其大致结构如下\n\n\n\n```go\nselect {\ncase r1 := <- ch1:\n  log.Println(r1)\ncase r2 :=  <- ch2:\n  log.Println(r2)\ndefault:\n  log.Println(\"default\")\n}\n```\n\n\n\n看到select的结构,是不是觉得和switch很像. 其实他和switch有着诸多的区别.\n\n\n\n下面,我们来探索下,select的神奇之处\n\n\n\n01.select中,对于case的选择是随机的.\n\n\n\n为了验证case是随机的,下了下面的例子.\n\n\n\n```go\n\npackage main\nimport \"fmt\"\nfunc main() {\n  ch1 := make(chan int, 1)\n  ch2 := make(chan int, 1)\n  go func() {\n    ch1 <- 1\n  }()\n  go func() {\n    ch2 <- 2\n  }()\n  select {\n  case v1 := <-ch1:\n    fmt.Println(\"v1:\", v1)\n  case v2 := <-ch2:\n    fmt.Println(\"v2:\", v2)\n  default:\n    fmt.Println(\"default\")\n  }\n}\n```\n\n\n\n对于上面的例子,输出可能如下\n\n\n\n第一种: v1:1\n\n第二种: v2:2\n\n第三种: default\n\n\n\n### 02.select中,如果没有default语句，则会阻塞等待任一case\n\n\n\n```go\npackage main\nimport \"fmt\"\nfunc main() {\n  ch1 := make(chan int, 1)\n  ch2 := make(chan int, 1)\n  select {\n  case v1 := <-ch1:\n    fmt.Println(\"v1:\", v1)\n  case v2 := <-ch2:\n    fmt.Println(\"v2:\", v2)\n  }\n}\n```\n\n\n\n输出结果如下\n\n\n\n```\nfatal error: all goroutines are asleep - deadlock!\n```\n\n\n\n### 03.select中,对于接受的channel,一定要判断管道是否关闭.\n\n\n\n要判断管道是否关闭,因为管道关闭后,返回的是一个当前元素的默认值.\n\n\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n  ch1 := make(chan *int, 1)\n  ch2 := make(chan *int, 1)\n  close(ch1)\n  select {\n  case v1,ok := <-ch1:\n    fmt.Println(\"v1:\", v1,ok)\n  case v2 := <-ch2:\n    fmt.Println(\"v2:\", v2)\n  }\n}\n```\n\n\n\n输出结果如下\n\n\n\n```\nv1: <nil> false\n```\n\n\n\n### 04.select中,如果什么语句都没有,则会阻塞住当前的协程.最终报死锁的错误\n\n\n\n如果select语句中什么都没有,协程就会被阻塞住.\n\n\n\n```go\npackage main\nfunc main() {\n  select {}\n}\n```\n\n\n\n输出结果\n\n\n\n```\nfatal error: all goroutines are asleep - deadlock!\n```\n\n\n\n## 3.使用技巧\n\n\n\n### 01.channel关闭时,读取该channel的协程都会收到通知\n\n\n\n基于该特性,我们可以用一个channel,通知所有的协程退出.此种情况,一般发生在进程收到进程的退出信号,做进程退出前的清理工作时.\n\n\n\n样例代码:\n\n\n\n```go\npackage main\n\nimport (\n  \"fmt\"\n  \"sync\"\n)\n\nfunc main() {\n  var wg sync.WaitGroup\n  cExit := make(chan struct{})\n  wg.Add(3)\n  go func() {\n    defer wg.Done()\n    select {\n    case <-cExit:\n      fmt.Println(\"g1 退出\")\n      return\n    }\n  }()\n  go func() {\n    defer wg.Done()\n    select {\n    case <-cExit:\n      fmt.Println(\"g2 退出\")\n      return\n    }\n  }()\n  go func() {\n    defer wg.Done()\n    select {\n    case <-cExit:\n      fmt.Println(\"g3 退出\")\n      return\n    }\n  }()\n  close(cExit)\n  wg.Wait()\n}\n```\n\n\n\n输出结果:\n\n\n\n```\ng2 退出\ng3 退出\ng1 退出\n```\n\n\n\n### 02.基于channel的可读可写特性,可以保护参数式channel不被胡乱读取或者写入,从而导致程序写入死锁.\n\n\n\n样例代码:\n\n\n\n```go\nfunc WriteExample(ctx context.Context, ch chan<- int ) {}\nfunc ReadExample(ctx context.Context, ch <-chan int){}\n```\n\n\n\n如此写法,可以确保channel在WriteExample只能写,不能读不能关闭.在ReadExample中只能读,不能写,不能关闭\n\n\n\n### 03.基于向已经关闭的channel中写入会发生异常的特性,可以简化代码\n\n### 04.基于timer可做协程的驻留时间,以及异步任务的超时操作\n\n\n\n说到这里,肯定会有人反驳.因为,在写程序的时候,一直遵循着谁开启谁关闭,谁申请谁释放的原则.\n\n\n\n这个原则是正确的.但是对于一些场景,你发现背道而驰会意想不到的简洁.\n\n\n\n下面就以实现驻留式协程池为例.\n\n\n\n驻留式协程池要实现的目标是,对协程的复用,避免频繁开启协程所带来的花销.\n\n\n\n```go\npackage main\n\nimport (\n  \"context\"\n  \"log\"\n  \"math/rand\"\n  \"sync\"\n  \"sync/atomic\"\n  \"time\"\n)\n\n// Worker 用于描述一个工人\ntype Worker struct {\n  _WID    uint64\n  _TaskCh chan int\n}\n\n// NewWorker 新建立一个工人\nfunc NewWorker(iWID uint64) *Worker {\n  return &Worker{\n    _WID:    iWID,\n    _TaskCh: make(chan int),\n  }\n}\n\n// Do 用于工人执行任务\nfunc (w *Worker) Do(ctx context.Context) {\n  tIdleDuration := 500 * time.Millisecond\n  for {\n    select {\n    case <-ctx.Done():\n      log.Println(\"进程退出\")\n      goto end\n    case <-time.After(tIdleDuration):\n      log.Println(\"Worker驻留时间已到准备退出!\", w._WID)\n      goto end\n    case task := <-w._TaskCh:\n      time.Sleep(time.Second) // 模拟任务处理时长\n      log.Println(\"Worker:\", w._WID, \" 收到任务\", task)\n    }\n  }\nend:\n  close(w._TaskCh)\n  return\n}\n\n// Leader 用于管理工人\ntype Leader struct {\n  sync.WaitGroup\n  ctx    context.Context\n  idx    uint64\n  cancel context.CancelFunc\n  works  map[uint64]*Worker\n}\n\n// NewLeader 实例化一个leader\nfunc NewLeader() *Leader {\n  mCtx, mCancel := context.WithCancel(context.Background())\n  return &Leader{\n    ctx:    mCtx,\n    idx:    0,\n    cancel: mCancel,\n    works:  make(map[uint64]*Worker),\n  }\n}\n\n// ClearWorker 用于清理工人\nfunc (l *Leader) ClearWorker(w *Worker) {\n  delete(l.works, w._WID)\n}\n\n// DispatchTask 用于派发任务\nfunc (l *Leader) DispatchTask(iTask int) {\n  bSuccess := false\n  for _, work := range l.works {\n    if l.NotifyWorker(work, iTask) {\n      bSuccess = true\n      break\n    }\n  }\n  if !bSuccess {\n    l.WorkerStartup(iTask)\n  }\n}\n\n// NotifyWorker 用于通知\nfunc (l *Leader) NotifyWorker(w *Worker, iTask int) (status bool) {\n  defer func() {\n    if r := recover(); r != nil {\n      // 进入这里代表工人已经退出了\n      l.ClearWorker(w)\n      log.Println(\"清理了工人:\", w._WID)\n      return\n    }\n  }()\n  select {\n  case w._TaskCh <- iTask:\n    status = true\n    return\n  default:\n    return\n  }\n}\n\n// WorkerStartup 启动一个工人\nfunc (l *Leader) WorkerStartup(iTask int) {\n  w := NewWorker(atomic.AddUint64(&l.idx, 1))\n  go func() {\n    l.Add(1)\n    defer l.Done()\n    w.Do(l.ctx)\n  }()\n  w._TaskCh <- iTask\n  l.works[w._WID] = w\n}\n\n// Exit 用于退出操作\nfunc (l *Leader) Exit() {\n  // 向所有协程通知退出信号\n  l.cancel()\n  // 等待所有协程退出\n  l.Wait()\n  log.Println(\"开启协程的最大编号是:\", l.idx)\n}\n\nfunc main() {\n  mLeader := NewLeader()\n  for i := 0; i < 100; i++ {\n    mLeader.DispatchTask(i)\n    // 模拟任务的不确定性\n    time.Sleep(time.Duration(rand.Intn(10)) * time.Second)\n  }\n  time.Sleep(15 * time.Second)\n  mLeader.Exit()\n}\n```\n\n\n\n输出样例:\n\n\n\n```log\n2021/03/13 09:24:38 Worker: 1  收到任务 0\n2021/03/13 09:24:38 Worker驻留时间已到准备退出! 1\n2021/03/13 09:24:39 Worker: 2  收到任务 1\n2021/03/13 09:24:39 Worker驻留时间已到准备退出! 2\n2021/03/13 09:24:45 清理了工人: 1\n2021/03/13 09:24:45 清理了工人: 2\n2021/03/13 09:24:46 Worker: 3  收到任务 2\n2021/03/13 09:24:46 Worker驻留时间已到准备退出! 3\n2021/03/13 09:24:52 清理了工人: 3\n2021/03/13 09:24:53 Worker: 4  收到任务 3\n2021/03/13 09:24:53 Worker驻留时间已到准备退出! 4\n2021/03/13 09:25:01 清理了工人: 4\n2021/03/13 09:25:02 Worker: 5  收到任务 4\n2021/03/13 09:25:02 Worker驻留时间已到准备退出! 5\n2021/03/13 09:25:03 Worker: 6  收到任务 5\n2021/03/13 09:25:03 Worker驻留时间已到准备退出! 6\n2021/03/13 09:25:10 清理了工人: 5\n2021/03/13 09:25:10 清理了工人: 6\n2021/03/13 09:25:11 Worker: 7  收到任务 6\n2021/03/13 09:25:11 Worker驻留时间已到准备退出! 7\n2021/03/13 09:25:15 清理了工人: 7\n2021/03/13 09:25:16 Worker: 9  收到任务 8\n2021/03/13 09:25:16 Worker: 8  收到任务 7\n2021/03/13 09:25:16 Worker驻留时间已到准备退出! 9\n2021/03/13 09:25:16 Worker驻留时间已到准备退出! 8\n2021/03/13 09:25:21 清理了工人: 8\n2021/03/13 09:25:21 清理了工人: 9\n2021/03/13 09:25:22 Worker: 10  收到任务 9\n2021/03/13 09:25:22 Worker: 11  收到任务 10\n2021/03/13 09:25:22 Worker驻留时间已到准备退出! 11\n2021/03/13 09:25:22 Worker驻留时间已到准备退出! 10\n```","slug":"golang-channel","published":1,"date":"2021-03-16T19:41:25.088Z","updated":"2021-03-16T19:55:10.211Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmchg4i400047gvl9skw0vm9","content":"<p>channel是Go中的一个核心类型，你可以把它看成一个管道，通过它并发核心单元就可以发送或者接收数据进行通讯(communication)。</p>\n<p>channel具有四个6个特性,它们分别是有缓冲的channel,无缓冲的channel,只读channel和只写channel,打开的channel关闭的channel.</p>\n<h2 id=\"1-关于channel\"><a href=\"#1-关于channel\" class=\"headerlink\" title=\"1.关于channel\"></a>1.关于channel</h2><h3 id=\"01-channel的打开和关闭\"><a href=\"#01-channel的打开和关闭\" class=\"headerlink\" title=\"01.channel的打开和关闭\"></a>01.channel的打开和关闭</h3><p>channel的打开通过make(chan int),channel的关闭通过内置函数close</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"> ch :=  <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)</span><br><span class=\"line\"> <span class=\"built_in\">close</span>(ch)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"02-有缓冲的channel和无缓冲的channel\"><a href=\"#02-有缓冲的channel和无缓冲的channel\" class=\"headerlink\" title=\"02.有缓冲的channel和无缓冲的channel\"></a>02.有缓冲的channel和无缓冲的channel</h3><p>在写入的过程中,有缓冲的channel除非缓冲区已满,否则执行流程不会阻塞.无缓冲的channel则会被阻塞,直到无缓冲的channel中的元素被读取为止.</p>\n<p>在读取的过程中,对于有缓冲的channel,只要channel中有元素就会读取.对于无缓冲的channel,需要等待其他协程写入</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">&quot;context&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;sync&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  BlockChannel()</span><br><span class=\"line\">  NonBlockChannel()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// BlockChannel 阻塞channel</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BlockChannel</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> wg sync.WaitGroup</span><br><span class=\"line\">  cCh := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  ctx, cancel := context.WithCancel(context.Background())</span><br><span class=\"line\">  wg.Add(<span class=\"number\">2</span>)</span><br><span class=\"line\">  <span class=\"comment\">// 写入</span></span><br><span class=\"line\">  <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(wCtx context.Context, wCh <span class=\"keyword\">chan</span>&lt;- <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> wg.Done()</span><br><span class=\"line\">    i := <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> &lt;-wCtx.Done():</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> wCh &lt;- i:</span><br><span class=\"line\">      <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        log.Println(<span class=\"string\">&quot;Write处于阻塞状态&quot;</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      i++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;(ctx, cCh)</span><br><span class=\"line\">  <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(rCtx context.Context, rCh &lt;-<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> wg.Done()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> &lt;-rCtx.Done():</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> ele := &lt;-rCh:</span><br><span class=\"line\">        log.Println(<span class=\"string\">&quot;接收新值:&quot;</span>, ele)</span><br><span class=\"line\">      <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        log.Println(<span class=\"string\">&quot;Read处于阻塞状态&quot;</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;(ctx, cCh)</span><br><span class=\"line\">  time.Sleep(<span class=\"number\">5</span> * time.Second)</span><br><span class=\"line\">  cancel()</span><br><span class=\"line\">  wg.Wait()</span><br><span class=\"line\">  <span class=\"built_in\">close</span>(cCh)</span><br><span class=\"line\">  log.Println(<span class=\"string\">&quot;结束!&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// NonBlockChannel 非阻塞的channel</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NonBlockChannel</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  cChannel := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">  cChannel &lt;- <span class=\"number\">1</span></span><br><span class=\"line\">  log.Println(&lt;-cChannel)</span><br><span class=\"line\">  <span class=\"built_in\">close</span>(cChannel)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"03-只读的channel和只写的channel\"><a href=\"#03-只读的channel和只写的channel\" class=\"headerlink\" title=\"03.只读的channel和只写的channel\"></a>03.只读的channel和只写的channel</h3><p>channel具有只读和只写的特性,只读的channel只能从channel内接收元素,不能向channel里写入元素.</p>\n<p>只写的channel只能向管道内写入元素,不能从管道内读取元素</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">&quot;context&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;sync&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  RWChannel()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">RWChannel</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> wg sync.WaitGroup</span><br><span class=\"line\">  cChannel := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">  ctx, cancel := context.WithCancel(context.Background())</span><br><span class=\"line\">  wg.Add(<span class=\"number\">2</span>)</span><br><span class=\"line\">  <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> wg.Done()</span><br><span class=\"line\">    ReadHandler(ctx, cChannel)</span><br><span class=\"line\">  &#125;()</span><br><span class=\"line\">  <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> wg.Done()</span><br><span class=\"line\">    WriteHandler(ctx, cChannel)</span><br><span class=\"line\">  &#125;()</span><br><span class=\"line\">  time.Sleep(<span class=\"number\">5</span> * time.Second)</span><br><span class=\"line\">  cancel()</span><br><span class=\"line\">  wg.Wait()</span><br><span class=\"line\">  <span class=\"built_in\">close</span>(cChannel)</span><br><span class=\"line\">  log.Println(<span class=\"string\">&quot;结束!&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ReadHandler</span><span class=\"params\">(ctx context.Context, rCh <span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> &lt;-ctx.Done():</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> ele := &lt;-rCh:</span><br><span class=\"line\">      log.Println(ele)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">WriteHandler</span><span class=\"params\">(ctx context.Context, wCh <span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">  i := <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> &lt;-ctx.Done():</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      i++</span><br><span class=\"line\">      wCh &lt;- i</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"04-只读和只写的channel\"><a href=\"#04-只读和只写的channel\" class=\"headerlink\" title=\"04. 只读和只写的channel\"></a>04. 只读和只写的channel</h3><p>对于只读channel,可以读取channel中的元素,但是,不能写入和关闭</p>\n<p>对于只写channel,可以向channel中写入元素,但是,不能读取和关闭</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Model <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\"> <span class=\"comment\">// 只读</span></span><br><span class=\"line\">  _ReadChannel &lt;-<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span> </span><br><span class=\"line\">  <span class=\"comment\">// </span></span><br><span class=\"line\">  _WriteChannel <span class=\"keyword\">chan</span>&lt;- <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>下面是一个只读和只写的channel demo</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">&quot;context&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;sync&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  RWChannel()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">RWChannel</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> wg sync.WaitGroup</span><br><span class=\"line\">  cChannel := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">  ctx, cancel := context.WithCancel(context.Background())</span><br><span class=\"line\">  wg.Add(<span class=\"number\">2</span>)</span><br><span class=\"line\">  <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> wg.Done()</span><br><span class=\"line\">    ReadHandler(ctx, cChannel)</span><br><span class=\"line\">  &#125;()</span><br><span class=\"line\">  <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> wg.Done()</span><br><span class=\"line\">    WriteHandler(ctx, cChannel)</span><br><span class=\"line\">  &#125;()</span><br><span class=\"line\">  time.Sleep(<span class=\"number\">5</span> * time.Second)</span><br><span class=\"line\">  cancel()</span><br><span class=\"line\">  wg.Wait()</span><br><span class=\"line\">  <span class=\"built_in\">close</span>(cChannel)</span><br><span class=\"line\">  log.Println(<span class=\"string\">&quot;结束!&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ReadHandler</span><span class=\"params\">(ctx context.Context, rCh &lt;-<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//// rCh 只能读,不能写,不能被关闭,否则编译不过</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> &lt;-ctx.Done():</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> ele := &lt;-rCh:</span><br><span class=\"line\">      log.Println(ele)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">WriteHandler</span><span class=\"params\">(ctx context.Context, wCh <span class=\"keyword\">chan</span>&lt;- <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// wCh 只能写,不能读,不能被关闭,否则编译不过</span></span><br><span class=\"line\">  i := <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> &lt;-ctx.Done():</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      i++</span><br><span class=\"line\">      wCh &lt;- i</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2-关于select\"><a href=\"#2-关于select\" class=\"headerlink\" title=\"2.关于select\"></a>2.关于select</h2><p>谈到了channel,肯定离不开select</p>\n<p>Go中的select是Golang在语言层面提供的I/O多路复用的机制，其专门用来检测多个channel是否准备完毕：可读或可写。</p>\n<p>其大致结构如下</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> r1 := &lt;- ch1:</span><br><span class=\"line\">  log.Println(r1)</span><br><span class=\"line\"><span class=\"keyword\">case</span> r2 :=  &lt;- ch2:</span><br><span class=\"line\">  log.Println(r2)</span><br><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\">  log.Println(<span class=\"string\">&quot;default&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>看到select的结构,是不是觉得和switch很像. 其实他和switch有着诸多的区别.</p>\n<p>下面,我们来探索下,select的神奇之处</p>\n<p>01.select中,对于case的选择是随机的.</p>\n<p>为了验证case是随机的,下了下面的例子.</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  ch1 := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">  ch2 := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    ch1 &lt;- <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;()</span><br><span class=\"line\">  <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    ch2 &lt;- <span class=\"number\">2</span></span><br><span class=\"line\">  &#125;()</span><br><span class=\"line\">  <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> v1 := &lt;-ch1:</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;v1:&quot;</span>, v1)</span><br><span class=\"line\">  <span class=\"keyword\">case</span> v2 := &lt;-ch2:</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;v2:&quot;</span>, v2)</span><br><span class=\"line\">  <span class=\"keyword\">default</span>:</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;default&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>对于上面的例子,输出可能如下</p>\n<p>第一种: v1:1</p>\n<p>第二种: v2:2</p>\n<p>第三种: default</p>\n<h3 id=\"02-select中-如果没有default语句，则会阻塞等待任一case\"><a href=\"#02-select中-如果没有default语句，则会阻塞等待任一case\" class=\"headerlink\" title=\"02.select中,如果没有default语句，则会阻塞等待任一case\"></a>02.select中,如果没有default语句，则会阻塞等待任一case</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  ch1 := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">  ch2 := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> v1 := &lt;-ch1:</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;v1:&quot;</span>, v1)</span><br><span class=\"line\">  <span class=\"keyword\">case</span> v2 := &lt;-ch2:</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;v2:&quot;</span>, v2)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>输出结果如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fatal error: all goroutines are asleep - deadlock!</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"03-select中-对于接受的channel-一定要判断管道是否关闭\"><a href=\"#03-select中-对于接受的channel-一定要判断管道是否关闭\" class=\"headerlink\" title=\"03.select中,对于接受的channel,一定要判断管道是否关闭.\"></a>03.select中,对于接受的channel,一定要判断管道是否关闭.</h3><p>要判断管道是否关闭,因为管道关闭后,返回的是一个当前元素的默认值.</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  ch1 := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> *<span class=\"keyword\">int</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">  ch2 := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> *<span class=\"keyword\">int</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"built_in\">close</span>(ch1)</span><br><span class=\"line\">  <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> v1,ok := &lt;-ch1:</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;v1:&quot;</span>, v1,ok)</span><br><span class=\"line\">  <span class=\"keyword\">case</span> v2 := &lt;-ch2:</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;v2:&quot;</span>, v2)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>输出结果如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v1: &lt;nil&gt; false</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"04-select中-如果什么语句都没有-则会阻塞住当前的协程-最终报死锁的错误\"><a href=\"#04-select中-如果什么语句都没有-则会阻塞住当前的协程-最终报死锁的错误\" class=\"headerlink\" title=\"04.select中,如果什么语句都没有,则会阻塞住当前的协程.最终报死锁的错误\"></a>04.select中,如果什么语句都没有,则会阻塞住当前的协程.最终报死锁的错误</h3><p>如果select语句中什么都没有,协程就会被阻塞住.</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">select</span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>输出结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fatal error: all goroutines are asleep - deadlock!</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"3-使用技巧\"><a href=\"#3-使用技巧\" class=\"headerlink\" title=\"3.使用技巧\"></a>3.使用技巧</h2><h3 id=\"01-channel关闭时-读取该channel的协程都会收到通知\"><a href=\"#01-channel关闭时-读取该channel的协程都会收到通知\" class=\"headerlink\" title=\"01.channel关闭时,读取该channel的协程都会收到通知\"></a>01.channel关闭时,读取该channel的协程都会收到通知</h3><p>基于该特性,我们可以用一个channel,通知所有的协程退出.此种情况,一般发生在进程收到进程的退出信号,做进程退出前的清理工作时.</p>\n<p>样例代码:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;sync&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> wg sync.WaitGroup</span><br><span class=\"line\">  cExit := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;)</span><br><span class=\"line\">  wg.Add(<span class=\"number\">3</span>)</span><br><span class=\"line\">  <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> wg.Done()</span><br><span class=\"line\">    <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> &lt;-cExit:</span><br><span class=\"line\">      fmt.Println(<span class=\"string\">&quot;g1 退出&quot;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;()</span><br><span class=\"line\">  <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> wg.Done()</span><br><span class=\"line\">    <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> &lt;-cExit:</span><br><span class=\"line\">      fmt.Println(<span class=\"string\">&quot;g2 退出&quot;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;()</span><br><span class=\"line\">  <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> wg.Done()</span><br><span class=\"line\">    <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> &lt;-cExit:</span><br><span class=\"line\">      fmt.Println(<span class=\"string\">&quot;g3 退出&quot;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;()</span><br><span class=\"line\">  <span class=\"built_in\">close</span>(cExit)</span><br><span class=\"line\">  wg.Wait()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>输出结果:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g2 退出</span><br><span class=\"line\">g3 退出</span><br><span class=\"line\">g1 退出</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"02-基于channel的可读可写特性-可以保护参数式channel不被胡乱读取或者写入-从而导致程序写入死锁\"><a href=\"#02-基于channel的可读可写特性-可以保护参数式channel不被胡乱读取或者写入-从而导致程序写入死锁\" class=\"headerlink\" title=\"02.基于channel的可读可写特性,可以保护参数式channel不被胡乱读取或者写入,从而导致程序写入死锁.\"></a>02.基于channel的可读可写特性,可以保护参数式channel不被胡乱读取或者写入,从而导致程序写入死锁.</h3><p>样例代码:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">WriteExample</span><span class=\"params\">(ctx context.Context, ch <span class=\"keyword\">chan</span>&lt;- <span class=\"keyword\">int</span> )</span></span> &#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ReadExample</span><span class=\"params\">(ctx context.Context, ch &lt;-<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>如此写法,可以确保channel在WriteExample只能写,不能读不能关闭.在ReadExample中只能读,不能写,不能关闭</p>\n<h3 id=\"03-基于向已经关闭的channel中写入会发生异常的特性-可以简化代码\"><a href=\"#03-基于向已经关闭的channel中写入会发生异常的特性-可以简化代码\" class=\"headerlink\" title=\"03.基于向已经关闭的channel中写入会发生异常的特性,可以简化代码\"></a>03.基于向已经关闭的channel中写入会发生异常的特性,可以简化代码</h3><h3 id=\"04-基于timer可做协程的驻留时间-以及异步任务的超时操作\"><a href=\"#04-基于timer可做协程的驻留时间-以及异步任务的超时操作\" class=\"headerlink\" title=\"04.基于timer可做协程的驻留时间,以及异步任务的超时操作\"></a>04.基于timer可做协程的驻留时间,以及异步任务的超时操作</h3><p>说到这里,肯定会有人反驳.因为,在写程序的时候,一直遵循着谁开启谁关闭,谁申请谁释放的原则.</p>\n<p>这个原则是正确的.但是对于一些场景,你发现背道而驰会意想不到的简洁.</p>\n<p>下面就以实现驻留式协程池为例.</p>\n<p>驻留式协程池要实现的目标是,对协程的复用,避免频繁开启协程所带来的花销.</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">&quot;context&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;math/rand&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;sync&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;sync/atomic&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Worker 用于描述一个工人</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Worker <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  _WID    <span class=\"keyword\">uint64</span></span><br><span class=\"line\">  _TaskCh <span class=\"keyword\">chan</span> <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// NewWorker 新建立一个工人</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewWorker</span><span class=\"params\">(iWID <span class=\"keyword\">uint64</span>)</span> *<span class=\"title\">Worker</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &amp;Worker&#123;</span><br><span class=\"line\">    _WID:    iWID,</span><br><span class=\"line\">    _TaskCh: <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>),</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Do 用于工人执行任务</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(w *Worker)</span> <span class=\"title\">Do</span><span class=\"params\">(ctx context.Context)</span></span> &#123;</span><br><span class=\"line\">  tIdleDuration := <span class=\"number\">500</span> * time.Millisecond</span><br><span class=\"line\">  <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> &lt;-ctx.Done():</span><br><span class=\"line\">      log.Println(<span class=\"string\">&quot;进程退出&quot;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">goto</span> end</span><br><span class=\"line\">    <span class=\"keyword\">case</span> &lt;-time.After(tIdleDuration):</span><br><span class=\"line\">      log.Println(<span class=\"string\">&quot;Worker驻留时间已到准备退出!&quot;</span>, w._WID)</span><br><span class=\"line\">      <span class=\"keyword\">goto</span> end</span><br><span class=\"line\">    <span class=\"keyword\">case</span> task := &lt;-w._TaskCh:</span><br><span class=\"line\">      time.Sleep(time.Second) <span class=\"comment\">// 模拟任务处理时长</span></span><br><span class=\"line\">      log.Println(<span class=\"string\">&quot;Worker:&quot;</span>, w._WID, <span class=\"string\">&quot; 收到任务&quot;</span>, task)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">end:</span><br><span class=\"line\">  <span class=\"built_in\">close</span>(w._TaskCh)</span><br><span class=\"line\">  <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Leader 用于管理工人</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Leader <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  sync.WaitGroup</span><br><span class=\"line\">  ctx    context.Context</span><br><span class=\"line\">  idx    <span class=\"keyword\">uint64</span></span><br><span class=\"line\">  cancel context.CancelFunc</span><br><span class=\"line\">  works  <span class=\"keyword\">map</span>[<span class=\"keyword\">uint64</span>]*Worker</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// NewLeader 实例化一个leader</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewLeader</span><span class=\"params\">()</span> *<span class=\"title\">Leader</span></span> &#123;</span><br><span class=\"line\">  mCtx, mCancel := context.WithCancel(context.Background())</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &amp;Leader&#123;</span><br><span class=\"line\">    ctx:    mCtx,</span><br><span class=\"line\">    idx:    <span class=\"number\">0</span>,</span><br><span class=\"line\">    cancel: mCancel,</span><br><span class=\"line\">    works:  <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">uint64</span>]*Worker),</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ClearWorker 用于清理工人</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(l *Leader)</span> <span class=\"title\">ClearWorker</span><span class=\"params\">(w *Worker)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">delete</span>(l.works, w._WID)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// DispatchTask 用于派发任务</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(l *Leader)</span> <span class=\"title\">DispatchTask</span><span class=\"params\">(iTask <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">  bSuccess := <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> _, work := <span class=\"keyword\">range</span> l.works &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> l.NotifyWorker(work, iTask) &#123;</span><br><span class=\"line\">      bSuccess = <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> !bSuccess &#123;</span><br><span class=\"line\">    l.WorkerStartup(iTask)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// NotifyWorker 用于通知</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(l *Leader)</span> <span class=\"title\">NotifyWorker</span><span class=\"params\">(w *Worker, iTask <span class=\"keyword\">int</span>)</span> <span class=\"params\">(status <span class=\"keyword\">bool</span>)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> r := <span class=\"built_in\">recover</span>(); r != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 进入这里代表工人已经退出了</span></span><br><span class=\"line\">      l.ClearWorker(w)</span><br><span class=\"line\">      log.Println(<span class=\"string\">&quot;清理了工人:&quot;</span>, w._WID)</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;()</span><br><span class=\"line\">  <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> w._TaskCh &lt;- iTask:</span><br><span class=\"line\">    status = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  <span class=\"keyword\">default</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// WorkerStartup 启动一个工人</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(l *Leader)</span> <span class=\"title\">WorkerStartup</span><span class=\"params\">(iTask <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">  w := NewWorker(atomic.AddUint64(&amp;l.idx, <span class=\"number\">1</span>))</span><br><span class=\"line\">  <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    l.Add(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> l.Done()</span><br><span class=\"line\">    w.Do(l.ctx)</span><br><span class=\"line\">  &#125;()</span><br><span class=\"line\">  w._TaskCh &lt;- iTask</span><br><span class=\"line\">  l.works[w._WID] = w</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Exit 用于退出操作</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(l *Leader)</span> <span class=\"title\">Exit</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 向所有协程通知退出信号</span></span><br><span class=\"line\">  l.cancel()</span><br><span class=\"line\">  <span class=\"comment\">// 等待所有协程退出</span></span><br><span class=\"line\">  l.Wait()</span><br><span class=\"line\">  log.Println(<span class=\"string\">&quot;开启协程的最大编号是:&quot;</span>, l.idx)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  mLeader := NewLeader()</span><br><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++ &#123;</span><br><span class=\"line\">    mLeader.DispatchTask(i)</span><br><span class=\"line\">    <span class=\"comment\">// 模拟任务的不确定性</span></span><br><span class=\"line\">    time.Sleep(time.Duration(rand.Intn(<span class=\"number\">10</span>)) * time.Second)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  time.Sleep(<span class=\"number\">15</span> * time.Second)</span><br><span class=\"line\">  mLeader.Exit()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>输出样例:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2021&#x2F;03&#x2F;13 09:24:38 Worker: 1  收到任务 0</span><br><span class=\"line\">2021&#x2F;03&#x2F;13 09:24:38 Worker驻留时间已到准备退出! 1</span><br><span class=\"line\">2021&#x2F;03&#x2F;13 09:24:39 Worker: 2  收到任务 1</span><br><span class=\"line\">2021&#x2F;03&#x2F;13 09:24:39 Worker驻留时间已到准备退出! 2</span><br><span class=\"line\">2021&#x2F;03&#x2F;13 09:24:45 清理了工人: 1</span><br><span class=\"line\">2021&#x2F;03&#x2F;13 09:24:45 清理了工人: 2</span><br><span class=\"line\">2021&#x2F;03&#x2F;13 09:24:46 Worker: 3  收到任务 2</span><br><span class=\"line\">2021&#x2F;03&#x2F;13 09:24:46 Worker驻留时间已到准备退出! 3</span><br><span class=\"line\">2021&#x2F;03&#x2F;13 09:24:52 清理了工人: 3</span><br><span class=\"line\">2021&#x2F;03&#x2F;13 09:24:53 Worker: 4  收到任务 3</span><br><span class=\"line\">2021&#x2F;03&#x2F;13 09:24:53 Worker驻留时间已到准备退出! 4</span><br><span class=\"line\">2021&#x2F;03&#x2F;13 09:25:01 清理了工人: 4</span><br><span class=\"line\">2021&#x2F;03&#x2F;13 09:25:02 Worker: 5  收到任务 4</span><br><span class=\"line\">2021&#x2F;03&#x2F;13 09:25:02 Worker驻留时间已到准备退出! 5</span><br><span class=\"line\">2021&#x2F;03&#x2F;13 09:25:03 Worker: 6  收到任务 5</span><br><span class=\"line\">2021&#x2F;03&#x2F;13 09:25:03 Worker驻留时间已到准备退出! 6</span><br><span class=\"line\">2021&#x2F;03&#x2F;13 09:25:10 清理了工人: 5</span><br><span class=\"line\">2021&#x2F;03&#x2F;13 09:25:10 清理了工人: 6</span><br><span class=\"line\">2021&#x2F;03&#x2F;13 09:25:11 Worker: 7  收到任务 6</span><br><span class=\"line\">2021&#x2F;03&#x2F;13 09:25:11 Worker驻留时间已到准备退出! 7</span><br><span class=\"line\">2021&#x2F;03&#x2F;13 09:25:15 清理了工人: 7</span><br><span class=\"line\">2021&#x2F;03&#x2F;13 09:25:16 Worker: 9  收到任务 8</span><br><span class=\"line\">2021&#x2F;03&#x2F;13 09:25:16 Worker: 8  收到任务 7</span><br><span class=\"line\">2021&#x2F;03&#x2F;13 09:25:16 Worker驻留时间已到准备退出! 9</span><br><span class=\"line\">2021&#x2F;03&#x2F;13 09:25:16 Worker驻留时间已到准备退出! 8</span><br><span class=\"line\">2021&#x2F;03&#x2F;13 09:25:21 清理了工人: 8</span><br><span class=\"line\">2021&#x2F;03&#x2F;13 09:25:21 清理了工人: 9</span><br><span class=\"line\">2021&#x2F;03&#x2F;13 09:25:22 Worker: 10  收到任务 9</span><br><span class=\"line\">2021&#x2F;03&#x2F;13 09:25:22 Worker: 11  收到任务 10</span><br><span class=\"line\">2021&#x2F;03&#x2F;13 09:25:22 Worker驻留时间已到准备退出! 11</span><br><span class=\"line\">2021&#x2F;03&#x2F;13 09:25:22 Worker驻留时间已到准备退出! 10</span><br></pre></td></tr></table></figure>","site":{"data":{"contact":[{"title":"github","icon":"icon-github","link":"https://github.com/yuansudong"},{"title":"email","icon":"icon-email","link":"mailto:1145919989@qq.com"},{"title":"qq","icon":"icon-qq","link":"/atom.xml"}],"favicons":["<link rel=\"shortcut icon\" href=\"/img//favicon.ico\">","<link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/img//favicon-16x16.png\">","<link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/img//favicon-32x32.png\">","<link rel=\"icon\" type=\"image/png\" sizes=\"48x48\" href=\"/img//favicon-48x48.png\">","<link rel=\"manifest\" href=\"/img//manifest.json\">","<meta name=\"mobile-web-app-capable\" content=\"yes\">","<meta name=\"theme-color\" content=\"#fff\">","<meta name=\"application-name\">","<link rel=\"apple-touch-icon\" sizes=\"57x57\" href=\"/img//apple-touch-icon-57x57.png\">","<link rel=\"apple-touch-icon\" sizes=\"60x60\" href=\"/img//apple-touch-icon-60x60.png\">","<link rel=\"apple-touch-icon\" sizes=\"72x72\" href=\"/img//apple-touch-icon-72x72.png\">","<link rel=\"apple-touch-icon\" sizes=\"76x76\" href=\"/img//apple-touch-icon-76x76.png\">","<link rel=\"apple-touch-icon\" sizes=\"114x114\" href=\"/img//apple-touch-icon-114x114.png\">","<link rel=\"apple-touch-icon\" sizes=\"120x120\" href=\"/img//apple-touch-icon-120x120.png\">","<link rel=\"apple-touch-icon\" sizes=\"144x144\" href=\"/img//apple-touch-icon-144x144.png\">","<link rel=\"apple-touch-icon\" sizes=\"152x152\" href=\"/img//apple-touch-icon-152x152.png\">","<link rel=\"apple-touch-icon\" sizes=\"167x167\" href=\"/img//apple-touch-icon-167x167.png\">","<link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/img//apple-touch-icon-180x180.png\">","<link rel=\"apple-touch-icon\" sizes=\"1024x1024\" href=\"/img//apple-touch-icon-1024x1024.png\">","<meta name=\"apple-mobile-web-app-capable\" content=\"yes\">","<meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black-translucent\">","<meta name=\"apple-mobile-web-app-title\">","<meta name=\"msapplication-TileColor\" content=\"#fff\">","<meta name=\"msapplication-TileImage\" content=\"/img//mstile-144x144.png\">","<meta name=\"msapplication-config\" content=\"/img//browserconfig.xml\">"]}},"excerpt":"","more":"<p>channel是Go中的一个核心类型，你可以把它看成一个管道，通过它并发核心单元就可以发送或者接收数据进行通讯(communication)。</p>\n<p>channel具有四个6个特性,它们分别是有缓冲的channel,无缓冲的channel,只读channel和只写channel,打开的channel关闭的channel.</p>\n<h2 id=\"1-关于channel\"><a href=\"#1-关于channel\" class=\"headerlink\" title=\"1.关于channel\"></a>1.关于channel</h2><h3 id=\"01-channel的打开和关闭\"><a href=\"#01-channel的打开和关闭\" class=\"headerlink\" title=\"01.channel的打开和关闭\"></a>01.channel的打开和关闭</h3><p>channel的打开通过make(chan int),channel的关闭通过内置函数close</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"> ch :=  <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)</span><br><span class=\"line\"> <span class=\"built_in\">close</span>(ch)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"02-有缓冲的channel和无缓冲的channel\"><a href=\"#02-有缓冲的channel和无缓冲的channel\" class=\"headerlink\" title=\"02.有缓冲的channel和无缓冲的channel\"></a>02.有缓冲的channel和无缓冲的channel</h3><p>在写入的过程中,有缓冲的channel除非缓冲区已满,否则执行流程不会阻塞.无缓冲的channel则会被阻塞,直到无缓冲的channel中的元素被读取为止.</p>\n<p>在读取的过程中,对于有缓冲的channel,只要channel中有元素就会读取.对于无缓冲的channel,需要等待其他协程写入</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">&quot;context&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;sync&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  BlockChannel()</span><br><span class=\"line\">  NonBlockChannel()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// BlockChannel 阻塞channel</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BlockChannel</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> wg sync.WaitGroup</span><br><span class=\"line\">  cCh := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  ctx, cancel := context.WithCancel(context.Background())</span><br><span class=\"line\">  wg.Add(<span class=\"number\">2</span>)</span><br><span class=\"line\">  <span class=\"comment\">// 写入</span></span><br><span class=\"line\">  <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(wCtx context.Context, wCh <span class=\"keyword\">chan</span>&lt;- <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> wg.Done()</span><br><span class=\"line\">    i := <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> &lt;-wCtx.Done():</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> wCh &lt;- i:</span><br><span class=\"line\">      <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        log.Println(<span class=\"string\">&quot;Write处于阻塞状态&quot;</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      i++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;(ctx, cCh)</span><br><span class=\"line\">  <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(rCtx context.Context, rCh &lt;-<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> wg.Done()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> &lt;-rCtx.Done():</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> ele := &lt;-rCh:</span><br><span class=\"line\">        log.Println(<span class=\"string\">&quot;接收新值:&quot;</span>, ele)</span><br><span class=\"line\">      <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        log.Println(<span class=\"string\">&quot;Read处于阻塞状态&quot;</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;(ctx, cCh)</span><br><span class=\"line\">  time.Sleep(<span class=\"number\">5</span> * time.Second)</span><br><span class=\"line\">  cancel()</span><br><span class=\"line\">  wg.Wait()</span><br><span class=\"line\">  <span class=\"built_in\">close</span>(cCh)</span><br><span class=\"line\">  log.Println(<span class=\"string\">&quot;结束!&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// NonBlockChannel 非阻塞的channel</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NonBlockChannel</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  cChannel := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">  cChannel &lt;- <span class=\"number\">1</span></span><br><span class=\"line\">  log.Println(&lt;-cChannel)</span><br><span class=\"line\">  <span class=\"built_in\">close</span>(cChannel)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"03-只读的channel和只写的channel\"><a href=\"#03-只读的channel和只写的channel\" class=\"headerlink\" title=\"03.只读的channel和只写的channel\"></a>03.只读的channel和只写的channel</h3><p>channel具有只读和只写的特性,只读的channel只能从channel内接收元素,不能向channel里写入元素.</p>\n<p>只写的channel只能向管道内写入元素,不能从管道内读取元素</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">&quot;context&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;sync&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  RWChannel()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">RWChannel</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> wg sync.WaitGroup</span><br><span class=\"line\">  cChannel := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">  ctx, cancel := context.WithCancel(context.Background())</span><br><span class=\"line\">  wg.Add(<span class=\"number\">2</span>)</span><br><span class=\"line\">  <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> wg.Done()</span><br><span class=\"line\">    ReadHandler(ctx, cChannel)</span><br><span class=\"line\">  &#125;()</span><br><span class=\"line\">  <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> wg.Done()</span><br><span class=\"line\">    WriteHandler(ctx, cChannel)</span><br><span class=\"line\">  &#125;()</span><br><span class=\"line\">  time.Sleep(<span class=\"number\">5</span> * time.Second)</span><br><span class=\"line\">  cancel()</span><br><span class=\"line\">  wg.Wait()</span><br><span class=\"line\">  <span class=\"built_in\">close</span>(cChannel)</span><br><span class=\"line\">  log.Println(<span class=\"string\">&quot;结束!&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ReadHandler</span><span class=\"params\">(ctx context.Context, rCh <span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> &lt;-ctx.Done():</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> ele := &lt;-rCh:</span><br><span class=\"line\">      log.Println(ele)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">WriteHandler</span><span class=\"params\">(ctx context.Context, wCh <span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">  i := <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> &lt;-ctx.Done():</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      i++</span><br><span class=\"line\">      wCh &lt;- i</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"04-只读和只写的channel\"><a href=\"#04-只读和只写的channel\" class=\"headerlink\" title=\"04. 只读和只写的channel\"></a>04. 只读和只写的channel</h3><p>对于只读channel,可以读取channel中的元素,但是,不能写入和关闭</p>\n<p>对于只写channel,可以向channel中写入元素,但是,不能读取和关闭</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Model <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\"> <span class=\"comment\">// 只读</span></span><br><span class=\"line\">  _ReadChannel &lt;-<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span> </span><br><span class=\"line\">  <span class=\"comment\">// </span></span><br><span class=\"line\">  _WriteChannel <span class=\"keyword\">chan</span>&lt;- <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>下面是一个只读和只写的channel demo</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">&quot;context&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;sync&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  RWChannel()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">RWChannel</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> wg sync.WaitGroup</span><br><span class=\"line\">  cChannel := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">  ctx, cancel := context.WithCancel(context.Background())</span><br><span class=\"line\">  wg.Add(<span class=\"number\">2</span>)</span><br><span class=\"line\">  <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> wg.Done()</span><br><span class=\"line\">    ReadHandler(ctx, cChannel)</span><br><span class=\"line\">  &#125;()</span><br><span class=\"line\">  <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> wg.Done()</span><br><span class=\"line\">    WriteHandler(ctx, cChannel)</span><br><span class=\"line\">  &#125;()</span><br><span class=\"line\">  time.Sleep(<span class=\"number\">5</span> * time.Second)</span><br><span class=\"line\">  cancel()</span><br><span class=\"line\">  wg.Wait()</span><br><span class=\"line\">  <span class=\"built_in\">close</span>(cChannel)</span><br><span class=\"line\">  log.Println(<span class=\"string\">&quot;结束!&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ReadHandler</span><span class=\"params\">(ctx context.Context, rCh &lt;-<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//// rCh 只能读,不能写,不能被关闭,否则编译不过</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> &lt;-ctx.Done():</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> ele := &lt;-rCh:</span><br><span class=\"line\">      log.Println(ele)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">WriteHandler</span><span class=\"params\">(ctx context.Context, wCh <span class=\"keyword\">chan</span>&lt;- <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// wCh 只能写,不能读,不能被关闭,否则编译不过</span></span><br><span class=\"line\">  i := <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> &lt;-ctx.Done():</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      i++</span><br><span class=\"line\">      wCh &lt;- i</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2-关于select\"><a href=\"#2-关于select\" class=\"headerlink\" title=\"2.关于select\"></a>2.关于select</h2><p>谈到了channel,肯定离不开select</p>\n<p>Go中的select是Golang在语言层面提供的I/O多路复用的机制，其专门用来检测多个channel是否准备完毕：可读或可写。</p>\n<p>其大致结构如下</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> r1 := &lt;- ch1:</span><br><span class=\"line\">  log.Println(r1)</span><br><span class=\"line\"><span class=\"keyword\">case</span> r2 :=  &lt;- ch2:</span><br><span class=\"line\">  log.Println(r2)</span><br><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\">  log.Println(<span class=\"string\">&quot;default&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>看到select的结构,是不是觉得和switch很像. 其实他和switch有着诸多的区别.</p>\n<p>下面,我们来探索下,select的神奇之处</p>\n<p>01.select中,对于case的选择是随机的.</p>\n<p>为了验证case是随机的,下了下面的例子.</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  ch1 := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">  ch2 := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    ch1 &lt;- <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;()</span><br><span class=\"line\">  <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    ch2 &lt;- <span class=\"number\">2</span></span><br><span class=\"line\">  &#125;()</span><br><span class=\"line\">  <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> v1 := &lt;-ch1:</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;v1:&quot;</span>, v1)</span><br><span class=\"line\">  <span class=\"keyword\">case</span> v2 := &lt;-ch2:</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;v2:&quot;</span>, v2)</span><br><span class=\"line\">  <span class=\"keyword\">default</span>:</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;default&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>对于上面的例子,输出可能如下</p>\n<p>第一种: v1:1</p>\n<p>第二种: v2:2</p>\n<p>第三种: default</p>\n<h3 id=\"02-select中-如果没有default语句，则会阻塞等待任一case\"><a href=\"#02-select中-如果没有default语句，则会阻塞等待任一case\" class=\"headerlink\" title=\"02.select中,如果没有default语句，则会阻塞等待任一case\"></a>02.select中,如果没有default语句，则会阻塞等待任一case</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  ch1 := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">  ch2 := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> v1 := &lt;-ch1:</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;v1:&quot;</span>, v1)</span><br><span class=\"line\">  <span class=\"keyword\">case</span> v2 := &lt;-ch2:</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;v2:&quot;</span>, v2)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>输出结果如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fatal error: all goroutines are asleep - deadlock!</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"03-select中-对于接受的channel-一定要判断管道是否关闭\"><a href=\"#03-select中-对于接受的channel-一定要判断管道是否关闭\" class=\"headerlink\" title=\"03.select中,对于接受的channel,一定要判断管道是否关闭.\"></a>03.select中,对于接受的channel,一定要判断管道是否关闭.</h3><p>要判断管道是否关闭,因为管道关闭后,返回的是一个当前元素的默认值.</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  ch1 := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> *<span class=\"keyword\">int</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">  ch2 := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> *<span class=\"keyword\">int</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"built_in\">close</span>(ch1)</span><br><span class=\"line\">  <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> v1,ok := &lt;-ch1:</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;v1:&quot;</span>, v1,ok)</span><br><span class=\"line\">  <span class=\"keyword\">case</span> v2 := &lt;-ch2:</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;v2:&quot;</span>, v2)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>输出结果如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v1: &lt;nil&gt; false</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"04-select中-如果什么语句都没有-则会阻塞住当前的协程-最终报死锁的错误\"><a href=\"#04-select中-如果什么语句都没有-则会阻塞住当前的协程-最终报死锁的错误\" class=\"headerlink\" title=\"04.select中,如果什么语句都没有,则会阻塞住当前的协程.最终报死锁的错误\"></a>04.select中,如果什么语句都没有,则会阻塞住当前的协程.最终报死锁的错误</h3><p>如果select语句中什么都没有,协程就会被阻塞住.</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">select</span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>输出结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fatal error: all goroutines are asleep - deadlock!</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"3-使用技巧\"><a href=\"#3-使用技巧\" class=\"headerlink\" title=\"3.使用技巧\"></a>3.使用技巧</h2><h3 id=\"01-channel关闭时-读取该channel的协程都会收到通知\"><a href=\"#01-channel关闭时-读取该channel的协程都会收到通知\" class=\"headerlink\" title=\"01.channel关闭时,读取该channel的协程都会收到通知\"></a>01.channel关闭时,读取该channel的协程都会收到通知</h3><p>基于该特性,我们可以用一个channel,通知所有的协程退出.此种情况,一般发生在进程收到进程的退出信号,做进程退出前的清理工作时.</p>\n<p>样例代码:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;sync&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> wg sync.WaitGroup</span><br><span class=\"line\">  cExit := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;)</span><br><span class=\"line\">  wg.Add(<span class=\"number\">3</span>)</span><br><span class=\"line\">  <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> wg.Done()</span><br><span class=\"line\">    <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> &lt;-cExit:</span><br><span class=\"line\">      fmt.Println(<span class=\"string\">&quot;g1 退出&quot;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;()</span><br><span class=\"line\">  <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> wg.Done()</span><br><span class=\"line\">    <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> &lt;-cExit:</span><br><span class=\"line\">      fmt.Println(<span class=\"string\">&quot;g2 退出&quot;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;()</span><br><span class=\"line\">  <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> wg.Done()</span><br><span class=\"line\">    <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> &lt;-cExit:</span><br><span class=\"line\">      fmt.Println(<span class=\"string\">&quot;g3 退出&quot;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;()</span><br><span class=\"line\">  <span class=\"built_in\">close</span>(cExit)</span><br><span class=\"line\">  wg.Wait()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>输出结果:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g2 退出</span><br><span class=\"line\">g3 退出</span><br><span class=\"line\">g1 退出</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"02-基于channel的可读可写特性-可以保护参数式channel不被胡乱读取或者写入-从而导致程序写入死锁\"><a href=\"#02-基于channel的可读可写特性-可以保护参数式channel不被胡乱读取或者写入-从而导致程序写入死锁\" class=\"headerlink\" title=\"02.基于channel的可读可写特性,可以保护参数式channel不被胡乱读取或者写入,从而导致程序写入死锁.\"></a>02.基于channel的可读可写特性,可以保护参数式channel不被胡乱读取或者写入,从而导致程序写入死锁.</h3><p>样例代码:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">WriteExample</span><span class=\"params\">(ctx context.Context, ch <span class=\"keyword\">chan</span>&lt;- <span class=\"keyword\">int</span> )</span></span> &#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ReadExample</span><span class=\"params\">(ctx context.Context, ch &lt;-<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>如此写法,可以确保channel在WriteExample只能写,不能读不能关闭.在ReadExample中只能读,不能写,不能关闭</p>\n<h3 id=\"03-基于向已经关闭的channel中写入会发生异常的特性-可以简化代码\"><a href=\"#03-基于向已经关闭的channel中写入会发生异常的特性-可以简化代码\" class=\"headerlink\" title=\"03.基于向已经关闭的channel中写入会发生异常的特性,可以简化代码\"></a>03.基于向已经关闭的channel中写入会发生异常的特性,可以简化代码</h3><h3 id=\"04-基于timer可做协程的驻留时间-以及异步任务的超时操作\"><a href=\"#04-基于timer可做协程的驻留时间-以及异步任务的超时操作\" class=\"headerlink\" title=\"04.基于timer可做协程的驻留时间,以及异步任务的超时操作\"></a>04.基于timer可做协程的驻留时间,以及异步任务的超时操作</h3><p>说到这里,肯定会有人反驳.因为,在写程序的时候,一直遵循着谁开启谁关闭,谁申请谁释放的原则.</p>\n<p>这个原则是正确的.但是对于一些场景,你发现背道而驰会意想不到的简洁.</p>\n<p>下面就以实现驻留式协程池为例.</p>\n<p>驻留式协程池要实现的目标是,对协程的复用,避免频繁开启协程所带来的花销.</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">&quot;context&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;math/rand&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;sync&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;sync/atomic&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Worker 用于描述一个工人</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Worker <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  _WID    <span class=\"keyword\">uint64</span></span><br><span class=\"line\">  _TaskCh <span class=\"keyword\">chan</span> <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// NewWorker 新建立一个工人</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewWorker</span><span class=\"params\">(iWID <span class=\"keyword\">uint64</span>)</span> *<span class=\"title\">Worker</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &amp;Worker&#123;</span><br><span class=\"line\">    _WID:    iWID,</span><br><span class=\"line\">    _TaskCh: <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>),</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Do 用于工人执行任务</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(w *Worker)</span> <span class=\"title\">Do</span><span class=\"params\">(ctx context.Context)</span></span> &#123;</span><br><span class=\"line\">  tIdleDuration := <span class=\"number\">500</span> * time.Millisecond</span><br><span class=\"line\">  <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> &lt;-ctx.Done():</span><br><span class=\"line\">      log.Println(<span class=\"string\">&quot;进程退出&quot;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">goto</span> end</span><br><span class=\"line\">    <span class=\"keyword\">case</span> &lt;-time.After(tIdleDuration):</span><br><span class=\"line\">      log.Println(<span class=\"string\">&quot;Worker驻留时间已到准备退出!&quot;</span>, w._WID)</span><br><span class=\"line\">      <span class=\"keyword\">goto</span> end</span><br><span class=\"line\">    <span class=\"keyword\">case</span> task := &lt;-w._TaskCh:</span><br><span class=\"line\">      time.Sleep(time.Second) <span class=\"comment\">// 模拟任务处理时长</span></span><br><span class=\"line\">      log.Println(<span class=\"string\">&quot;Worker:&quot;</span>, w._WID, <span class=\"string\">&quot; 收到任务&quot;</span>, task)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">end:</span><br><span class=\"line\">  <span class=\"built_in\">close</span>(w._TaskCh)</span><br><span class=\"line\">  <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Leader 用于管理工人</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Leader <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  sync.WaitGroup</span><br><span class=\"line\">  ctx    context.Context</span><br><span class=\"line\">  idx    <span class=\"keyword\">uint64</span></span><br><span class=\"line\">  cancel context.CancelFunc</span><br><span class=\"line\">  works  <span class=\"keyword\">map</span>[<span class=\"keyword\">uint64</span>]*Worker</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// NewLeader 实例化一个leader</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewLeader</span><span class=\"params\">()</span> *<span class=\"title\">Leader</span></span> &#123;</span><br><span class=\"line\">  mCtx, mCancel := context.WithCancel(context.Background())</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &amp;Leader&#123;</span><br><span class=\"line\">    ctx:    mCtx,</span><br><span class=\"line\">    idx:    <span class=\"number\">0</span>,</span><br><span class=\"line\">    cancel: mCancel,</span><br><span class=\"line\">    works:  <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">uint64</span>]*Worker),</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ClearWorker 用于清理工人</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(l *Leader)</span> <span class=\"title\">ClearWorker</span><span class=\"params\">(w *Worker)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">delete</span>(l.works, w._WID)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// DispatchTask 用于派发任务</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(l *Leader)</span> <span class=\"title\">DispatchTask</span><span class=\"params\">(iTask <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">  bSuccess := <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> _, work := <span class=\"keyword\">range</span> l.works &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> l.NotifyWorker(work, iTask) &#123;</span><br><span class=\"line\">      bSuccess = <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> !bSuccess &#123;</span><br><span class=\"line\">    l.WorkerStartup(iTask)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// NotifyWorker 用于通知</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(l *Leader)</span> <span class=\"title\">NotifyWorker</span><span class=\"params\">(w *Worker, iTask <span class=\"keyword\">int</span>)</span> <span class=\"params\">(status <span class=\"keyword\">bool</span>)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> r := <span class=\"built_in\">recover</span>(); r != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 进入这里代表工人已经退出了</span></span><br><span class=\"line\">      l.ClearWorker(w)</span><br><span class=\"line\">      log.Println(<span class=\"string\">&quot;清理了工人:&quot;</span>, w._WID)</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;()</span><br><span class=\"line\">  <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> w._TaskCh &lt;- iTask:</span><br><span class=\"line\">    status = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  <span class=\"keyword\">default</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// WorkerStartup 启动一个工人</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(l *Leader)</span> <span class=\"title\">WorkerStartup</span><span class=\"params\">(iTask <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">  w := NewWorker(atomic.AddUint64(&amp;l.idx, <span class=\"number\">1</span>))</span><br><span class=\"line\">  <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    l.Add(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> l.Done()</span><br><span class=\"line\">    w.Do(l.ctx)</span><br><span class=\"line\">  &#125;()</span><br><span class=\"line\">  w._TaskCh &lt;- iTask</span><br><span class=\"line\">  l.works[w._WID] = w</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Exit 用于退出操作</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(l *Leader)</span> <span class=\"title\">Exit</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 向所有协程通知退出信号</span></span><br><span class=\"line\">  l.cancel()</span><br><span class=\"line\">  <span class=\"comment\">// 等待所有协程退出</span></span><br><span class=\"line\">  l.Wait()</span><br><span class=\"line\">  log.Println(<span class=\"string\">&quot;开启协程的最大编号是:&quot;</span>, l.idx)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  mLeader := NewLeader()</span><br><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++ &#123;</span><br><span class=\"line\">    mLeader.DispatchTask(i)</span><br><span class=\"line\">    <span class=\"comment\">// 模拟任务的不确定性</span></span><br><span class=\"line\">    time.Sleep(time.Duration(rand.Intn(<span class=\"number\">10</span>)) * time.Second)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  time.Sleep(<span class=\"number\">15</span> * time.Second)</span><br><span class=\"line\">  mLeader.Exit()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>输出样例:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2021&#x2F;03&#x2F;13 09:24:38 Worker: 1  收到任务 0</span><br><span class=\"line\">2021&#x2F;03&#x2F;13 09:24:38 Worker驻留时间已到准备退出! 1</span><br><span class=\"line\">2021&#x2F;03&#x2F;13 09:24:39 Worker: 2  收到任务 1</span><br><span class=\"line\">2021&#x2F;03&#x2F;13 09:24:39 Worker驻留时间已到准备退出! 2</span><br><span class=\"line\">2021&#x2F;03&#x2F;13 09:24:45 清理了工人: 1</span><br><span class=\"line\">2021&#x2F;03&#x2F;13 09:24:45 清理了工人: 2</span><br><span class=\"line\">2021&#x2F;03&#x2F;13 09:24:46 Worker: 3  收到任务 2</span><br><span class=\"line\">2021&#x2F;03&#x2F;13 09:24:46 Worker驻留时间已到准备退出! 3</span><br><span class=\"line\">2021&#x2F;03&#x2F;13 09:24:52 清理了工人: 3</span><br><span class=\"line\">2021&#x2F;03&#x2F;13 09:24:53 Worker: 4  收到任务 3</span><br><span class=\"line\">2021&#x2F;03&#x2F;13 09:24:53 Worker驻留时间已到准备退出! 4</span><br><span class=\"line\">2021&#x2F;03&#x2F;13 09:25:01 清理了工人: 4</span><br><span class=\"line\">2021&#x2F;03&#x2F;13 09:25:02 Worker: 5  收到任务 4</span><br><span class=\"line\">2021&#x2F;03&#x2F;13 09:25:02 Worker驻留时间已到准备退出! 5</span><br><span class=\"line\">2021&#x2F;03&#x2F;13 09:25:03 Worker: 6  收到任务 5</span><br><span class=\"line\">2021&#x2F;03&#x2F;13 09:25:03 Worker驻留时间已到准备退出! 6</span><br><span class=\"line\">2021&#x2F;03&#x2F;13 09:25:10 清理了工人: 5</span><br><span class=\"line\">2021&#x2F;03&#x2F;13 09:25:10 清理了工人: 6</span><br><span class=\"line\">2021&#x2F;03&#x2F;13 09:25:11 Worker: 7  收到任务 6</span><br><span class=\"line\">2021&#x2F;03&#x2F;13 09:25:11 Worker驻留时间已到准备退出! 7</span><br><span class=\"line\">2021&#x2F;03&#x2F;13 09:25:15 清理了工人: 7</span><br><span class=\"line\">2021&#x2F;03&#x2F;13 09:25:16 Worker: 9  收到任务 8</span><br><span class=\"line\">2021&#x2F;03&#x2F;13 09:25:16 Worker: 8  收到任务 7</span><br><span class=\"line\">2021&#x2F;03&#x2F;13 09:25:16 Worker驻留时间已到准备退出! 9</span><br><span class=\"line\">2021&#x2F;03&#x2F;13 09:25:16 Worker驻留时间已到准备退出! 8</span><br><span class=\"line\">2021&#x2F;03&#x2F;13 09:25:21 清理了工人: 8</span><br><span class=\"line\">2021&#x2F;03&#x2F;13 09:25:21 清理了工人: 9</span><br><span class=\"line\">2021&#x2F;03&#x2F;13 09:25:22 Worker: 10  收到任务 9</span><br><span class=\"line\">2021&#x2F;03&#x2F;13 09:25:22 Worker: 11  收到任务 10</span><br><span class=\"line\">2021&#x2F;03&#x2F;13 09:25:22 Worker驻留时间已到准备退出! 11</span><br><span class=\"line\">2021&#x2F;03&#x2F;13 09:25:22 Worker驻留时间已到准备退出! 10</span><br></pre></td></tr></table></figure>"},{"title":"聊聊golang中的interface","cover":"/img/golang/interface_title.png","subtitle":"聊聊golang中的interface","author":{"nick":"袁苏东","link":"https://github.com/yuansudong"},"typora-root-url":"development-manual-jwt","_content":"\nGO是静态编译语言,自2009发布至今,已有11年之久.其主要应用于云原生,微服务,web开发,运维工具等场景.\n\n\n\n除此之外,GO也进入了数据科学(GO+),嵌入式等领域.\n\n\n\n在我的理解中,GO既是面向对象语言也不是面向对象语言.因为,GO有面向对象编程的类型和方法的概念,但是却没有继承这一说.\n\n\n\n在GO中,接口定义了一套方法的集合,任何实现这些方法的struct都可以被认为实现了这个接口.\n\n\n\n而之所以需要接口(interface),是因为在日常开发中,接口可以屏蔽实现细节,保护结构体不被无意修改.\n\n\n\n除此之外,接口(interface)还可以达到先设计后编写的目的.比如服务器中的会话管理.而这个会话可以是tcp也可以是websocket,通过定义接口ISession,让tcp会话结构体(struct)或者websocket会话结构体(struct),达到类型一致,业务功能上无差别的目的\n\n\n\n## 1.标准定义\n\n\n\n在GO中,标准库对于接口方法的定义遵循以职能为单元,组合单元形成功能的原则\n\n\n\n比如,标准包中的ReadWriter接口,该部分的代码在io包下的io.go的文件中.\n\n\n\n```go\n// Reader is the interface that wraps the basic Read method.\n//\n// Read reads up to len(p) bytes into p. It returns the number of bytes\n// read (0 <= n <= len(p)) and any error encountered. Even if Read\n// returns n < len(p), it may use all of p as scratch space during the call.\n// If some data is available but not len(p) bytes, Read conventionally\n// returns what is available instead of waiting for more.\n//\n// When Read encounters an error or end-of-file condition after\n// successfully reading n > 0 bytes, it returns the number of\n// bytes read. It may return the (non-nil) error from the same call\n// or return the error (and n == 0) from a subsequent call.\n// An instance of this general case is that a Reader returning\n// a non-zero number of bytes at the end of the input stream may\n// return either err == EOF or err == nil. The next Read should\n// return 0, EOF.\n//\n// Callers should always process the n > 0 bytes returned before\n// considering the error err. Doing so correctly handles I/O errors\n// that happen after reading some bytes and also both of the\n// allowed EOF behaviors.\n//\n// Implementations of Read are discouraged from returning a\n// zero byte count with a nil error, except when len(p) == 0.\n// Callers should treat a return of 0 and nil as indicating that\n// nothing happened; in particular it does not indicate EOF.\n//\n// Implementations must not retain p.\ntype Reader interface {\n  Read(p []byte) (n int, err error)\n}\n\n// Writer is the interface that wraps the basic Write method.\n//\n// Write writes len(p) bytes from p to the underlying data stream.\n// It returns the number of bytes written from p (0 <= n <= len(p))\n// and any error encountered that caused the write to stop early.\n// Write must return a non-nil error if it returns n < len(p).\n// Write must not modify the slice data, even temporarily.\n//\n// Implementations must not retain p.\ntype Writer interface {\n  Write(p []byte) (n int, err error)\n}\n\n// ReadWriter is the interface that groups the basic Read and Write methods.\ntype ReadWriter interface {\n  Reader\n  Writer\n}\n```\n\n\n\n在上面的定义中,我们可以看到ReadWriter中嵌套了两个接口,他们分别是Reader和Writer.\n\n\n\nReader定义了Read方法,倘若函数参数值是io.Reader,那么传入的结构体(struct)只要实现了Read方法就可以被当做参数传入.\n\n\n\nWriter定义了Write方法,倘若函数参数值是io.Writer,那么传入的结构体(struct)只要实现了Write方法就可以被当做参数传入.\n\n\n\n而ReadWriter嵌套了Reader和Writer,倘若让io.ReadWriter作为参数传递或者返回值返回,则需要结构体实现Reader中的Read方法和Writer中的Write方法.\n\n\n\n在开源社区,接口方法的定义其遵循的原则是\n\n\n\n```ABAP\n接口嵌入接口，保持深度在0或1为最佳。\n接口中直接定义的方法数量10个之内最佳。\n```","source":"_posts/golang-interface.md","raw":"---\n\ntitle: 聊聊golang中的interface\ncover: /img/golang/interface_title.png\nsubtitle: 聊聊golang中的interface\ncategories: \"GO语言\"\ntags: \"开发手册\"\nauthor:\n  nick: 袁苏东\n  link: https://github.com/yuansudong\ntypora-root-url: development-manual-jwt\n---\n\nGO是静态编译语言,自2009发布至今,已有11年之久.其主要应用于云原生,微服务,web开发,运维工具等场景.\n\n\n\n除此之外,GO也进入了数据科学(GO+),嵌入式等领域.\n\n\n\n在我的理解中,GO既是面向对象语言也不是面向对象语言.因为,GO有面向对象编程的类型和方法的概念,但是却没有继承这一说.\n\n\n\n在GO中,接口定义了一套方法的集合,任何实现这些方法的struct都可以被认为实现了这个接口.\n\n\n\n而之所以需要接口(interface),是因为在日常开发中,接口可以屏蔽实现细节,保护结构体不被无意修改.\n\n\n\n除此之外,接口(interface)还可以达到先设计后编写的目的.比如服务器中的会话管理.而这个会话可以是tcp也可以是websocket,通过定义接口ISession,让tcp会话结构体(struct)或者websocket会话结构体(struct),达到类型一致,业务功能上无差别的目的\n\n\n\n## 1.标准定义\n\n\n\n在GO中,标准库对于接口方法的定义遵循以职能为单元,组合单元形成功能的原则\n\n\n\n比如,标准包中的ReadWriter接口,该部分的代码在io包下的io.go的文件中.\n\n\n\n```go\n// Reader is the interface that wraps the basic Read method.\n//\n// Read reads up to len(p) bytes into p. It returns the number of bytes\n// read (0 <= n <= len(p)) and any error encountered. Even if Read\n// returns n < len(p), it may use all of p as scratch space during the call.\n// If some data is available but not len(p) bytes, Read conventionally\n// returns what is available instead of waiting for more.\n//\n// When Read encounters an error or end-of-file condition after\n// successfully reading n > 0 bytes, it returns the number of\n// bytes read. It may return the (non-nil) error from the same call\n// or return the error (and n == 0) from a subsequent call.\n// An instance of this general case is that a Reader returning\n// a non-zero number of bytes at the end of the input stream may\n// return either err == EOF or err == nil. The next Read should\n// return 0, EOF.\n//\n// Callers should always process the n > 0 bytes returned before\n// considering the error err. Doing so correctly handles I/O errors\n// that happen after reading some bytes and also both of the\n// allowed EOF behaviors.\n//\n// Implementations of Read are discouraged from returning a\n// zero byte count with a nil error, except when len(p) == 0.\n// Callers should treat a return of 0 and nil as indicating that\n// nothing happened; in particular it does not indicate EOF.\n//\n// Implementations must not retain p.\ntype Reader interface {\n  Read(p []byte) (n int, err error)\n}\n\n// Writer is the interface that wraps the basic Write method.\n//\n// Write writes len(p) bytes from p to the underlying data stream.\n// It returns the number of bytes written from p (0 <= n <= len(p))\n// and any error encountered that caused the write to stop early.\n// Write must return a non-nil error if it returns n < len(p).\n// Write must not modify the slice data, even temporarily.\n//\n// Implementations must not retain p.\ntype Writer interface {\n  Write(p []byte) (n int, err error)\n}\n\n// ReadWriter is the interface that groups the basic Read and Write methods.\ntype ReadWriter interface {\n  Reader\n  Writer\n}\n```\n\n\n\n在上面的定义中,我们可以看到ReadWriter中嵌套了两个接口,他们分别是Reader和Writer.\n\n\n\nReader定义了Read方法,倘若函数参数值是io.Reader,那么传入的结构体(struct)只要实现了Read方法就可以被当做参数传入.\n\n\n\nWriter定义了Write方法,倘若函数参数值是io.Writer,那么传入的结构体(struct)只要实现了Write方法就可以被当做参数传入.\n\n\n\n而ReadWriter嵌套了Reader和Writer,倘若让io.ReadWriter作为参数传递或者返回值返回,则需要结构体实现Reader中的Read方法和Writer中的Write方法.\n\n\n\n在开源社区,接口方法的定义其遵循的原则是\n\n\n\n```ABAP\n接口嵌入接口，保持深度在0或1为最佳。\n接口中直接定义的方法数量10个之内最佳。\n```","slug":"golang-interface","published":1,"date":"2021-03-16T19:04:40.011Z","updated":"2021-03-16T19:18:29.549Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmchg4i700057gvlg393d6md","content":"<p>GO是静态编译语言,自2009发布至今,已有11年之久.其主要应用于云原生,微服务,web开发,运维工具等场景.</p>\n<p>除此之外,GO也进入了数据科学(GO+),嵌入式等领域.</p>\n<p>在我的理解中,GO既是面向对象语言也不是面向对象语言.因为,GO有面向对象编程的类型和方法的概念,但是却没有继承这一说.</p>\n<p>在GO中,接口定义了一套方法的集合,任何实现这些方法的struct都可以被认为实现了这个接口.</p>\n<p>而之所以需要接口(interface),是因为在日常开发中,接口可以屏蔽实现细节,保护结构体不被无意修改.</p>\n<p>除此之外,接口(interface)还可以达到先设计后编写的目的.比如服务器中的会话管理.而这个会话可以是tcp也可以是websocket,通过定义接口ISession,让tcp会话结构体(struct)或者websocket会话结构体(struct),达到类型一致,业务功能上无差别的目的</p>\n<h2 id=\"1-标准定义\"><a href=\"#1-标准定义\" class=\"headerlink\" title=\"1.标准定义\"></a>1.标准定义</h2><p>在GO中,标准库对于接口方法的定义遵循以职能为单元,组合单元形成功能的原则</p>\n<p>比如,标准包中的ReadWriter接口,该部分的代码在io包下的io.go的文件中.</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Reader is the interface that wraps the basic Read method.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Read reads up to len(p) bytes into p. It returns the number of bytes</span></span><br><span class=\"line\"><span class=\"comment\">// read (0 &lt;= n &lt;= len(p)) and any error encountered. Even if Read</span></span><br><span class=\"line\"><span class=\"comment\">// returns n &lt; len(p), it may use all of p as scratch space during the call.</span></span><br><span class=\"line\"><span class=\"comment\">// If some data is available but not len(p) bytes, Read conventionally</span></span><br><span class=\"line\"><span class=\"comment\">// returns what is available instead of waiting for more.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// When Read encounters an error or end-of-file condition after</span></span><br><span class=\"line\"><span class=\"comment\">// successfully reading n &gt; 0 bytes, it returns the number of</span></span><br><span class=\"line\"><span class=\"comment\">// bytes read. It may return the (non-nil) error from the same call</span></span><br><span class=\"line\"><span class=\"comment\">// or return the error (and n == 0) from a subsequent call.</span></span><br><span class=\"line\"><span class=\"comment\">// An instance of this general case is that a Reader returning</span></span><br><span class=\"line\"><span class=\"comment\">// a non-zero number of bytes at the end of the input stream may</span></span><br><span class=\"line\"><span class=\"comment\">// return either err == EOF or err == nil. The next Read should</span></span><br><span class=\"line\"><span class=\"comment\">// return 0, EOF.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Callers should always process the n &gt; 0 bytes returned before</span></span><br><span class=\"line\"><span class=\"comment\">// considering the error err. Doing so correctly handles I/O errors</span></span><br><span class=\"line\"><span class=\"comment\">// that happen after reading some bytes and also both of the</span></span><br><span class=\"line\"><span class=\"comment\">// allowed EOF behaviors.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Implementations of Read are discouraged from returning a</span></span><br><span class=\"line\"><span class=\"comment\">// zero byte count with a nil error, except when len(p) == 0.</span></span><br><span class=\"line\"><span class=\"comment\">// Callers should treat a return of 0 and nil as indicating that</span></span><br><span class=\"line\"><span class=\"comment\">// nothing happened; in particular it does not indicate EOF.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Implementations must not retain p.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Reader <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">  Read(p []<span class=\"keyword\">byte</span>) (n <span class=\"keyword\">int</span>, err error)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Writer is the interface that wraps the basic Write method.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Write writes len(p) bytes from p to the underlying data stream.</span></span><br><span class=\"line\"><span class=\"comment\">// It returns the number of bytes written from p (0 &lt;= n &lt;= len(p))</span></span><br><span class=\"line\"><span class=\"comment\">// and any error encountered that caused the write to stop early.</span></span><br><span class=\"line\"><span class=\"comment\">// Write must return a non-nil error if it returns n &lt; len(p).</span></span><br><span class=\"line\"><span class=\"comment\">// Write must not modify the slice data, even temporarily.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Implementations must not retain p.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Writer <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">  Write(p []<span class=\"keyword\">byte</span>) (n <span class=\"keyword\">int</span>, err error)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ReadWriter is the interface that groups the basic Read and Write methods.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> ReadWriter <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">  Reader</span><br><span class=\"line\">  Writer</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>在上面的定义中,我们可以看到ReadWriter中嵌套了两个接口,他们分别是Reader和Writer.</p>\n<p>Reader定义了Read方法,倘若函数参数值是io.Reader,那么传入的结构体(struct)只要实现了Read方法就可以被当做参数传入.</p>\n<p>Writer定义了Write方法,倘若函数参数值是io.Writer,那么传入的结构体(struct)只要实现了Write方法就可以被当做参数传入.</p>\n<p>而ReadWriter嵌套了Reader和Writer,倘若让io.ReadWriter作为参数传递或者返回值返回,则需要结构体实现Reader中的Read方法和Writer中的Write方法.</p>\n<p>在开源社区,接口方法的定义其遵循的原则是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">接口嵌入接口，保持深度在0或1为最佳。</span><br><span class=\"line\">接口中直接定义的方法数量10个之内最佳。</span><br></pre></td></tr></table></figure>","site":{"data":{"contact":[{"title":"github","icon":"icon-github","link":"https://github.com/yuansudong"},{"title":"email","icon":"icon-email","link":"mailto:1145919989@qq.com"},{"title":"qq","icon":"icon-qq","link":"/atom.xml"}],"favicons":["<link rel=\"shortcut icon\" href=\"/img//favicon.ico\">","<link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/img//favicon-16x16.png\">","<link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/img//favicon-32x32.png\">","<link rel=\"icon\" type=\"image/png\" sizes=\"48x48\" href=\"/img//favicon-48x48.png\">","<link rel=\"manifest\" href=\"/img//manifest.json\">","<meta name=\"mobile-web-app-capable\" content=\"yes\">","<meta name=\"theme-color\" content=\"#fff\">","<meta name=\"application-name\">","<link rel=\"apple-touch-icon\" sizes=\"57x57\" href=\"/img//apple-touch-icon-57x57.png\">","<link rel=\"apple-touch-icon\" sizes=\"60x60\" href=\"/img//apple-touch-icon-60x60.png\">","<link rel=\"apple-touch-icon\" sizes=\"72x72\" href=\"/img//apple-touch-icon-72x72.png\">","<link rel=\"apple-touch-icon\" sizes=\"76x76\" href=\"/img//apple-touch-icon-76x76.png\">","<link rel=\"apple-touch-icon\" sizes=\"114x114\" href=\"/img//apple-touch-icon-114x114.png\">","<link rel=\"apple-touch-icon\" sizes=\"120x120\" href=\"/img//apple-touch-icon-120x120.png\">","<link rel=\"apple-touch-icon\" sizes=\"144x144\" href=\"/img//apple-touch-icon-144x144.png\">","<link rel=\"apple-touch-icon\" sizes=\"152x152\" href=\"/img//apple-touch-icon-152x152.png\">","<link rel=\"apple-touch-icon\" sizes=\"167x167\" href=\"/img//apple-touch-icon-167x167.png\">","<link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/img//apple-touch-icon-180x180.png\">","<link rel=\"apple-touch-icon\" sizes=\"1024x1024\" href=\"/img//apple-touch-icon-1024x1024.png\">","<meta name=\"apple-mobile-web-app-capable\" content=\"yes\">","<meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black-translucent\">","<meta name=\"apple-mobile-web-app-title\">","<meta name=\"msapplication-TileColor\" content=\"#fff\">","<meta name=\"msapplication-TileImage\" content=\"/img//mstile-144x144.png\">","<meta name=\"msapplication-config\" content=\"/img//browserconfig.xml\">"]}},"excerpt":"","more":"<p>GO是静态编译语言,自2009发布至今,已有11年之久.其主要应用于云原生,微服务,web开发,运维工具等场景.</p>\n<p>除此之外,GO也进入了数据科学(GO+),嵌入式等领域.</p>\n<p>在我的理解中,GO既是面向对象语言也不是面向对象语言.因为,GO有面向对象编程的类型和方法的概念,但是却没有继承这一说.</p>\n<p>在GO中,接口定义了一套方法的集合,任何实现这些方法的struct都可以被认为实现了这个接口.</p>\n<p>而之所以需要接口(interface),是因为在日常开发中,接口可以屏蔽实现细节,保护结构体不被无意修改.</p>\n<p>除此之外,接口(interface)还可以达到先设计后编写的目的.比如服务器中的会话管理.而这个会话可以是tcp也可以是websocket,通过定义接口ISession,让tcp会话结构体(struct)或者websocket会话结构体(struct),达到类型一致,业务功能上无差别的目的</p>\n<h2 id=\"1-标准定义\"><a href=\"#1-标准定义\" class=\"headerlink\" title=\"1.标准定义\"></a>1.标准定义</h2><p>在GO中,标准库对于接口方法的定义遵循以职能为单元,组合单元形成功能的原则</p>\n<p>比如,标准包中的ReadWriter接口,该部分的代码在io包下的io.go的文件中.</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Reader is the interface that wraps the basic Read method.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Read reads up to len(p) bytes into p. It returns the number of bytes</span></span><br><span class=\"line\"><span class=\"comment\">// read (0 &lt;= n &lt;= len(p)) and any error encountered. Even if Read</span></span><br><span class=\"line\"><span class=\"comment\">// returns n &lt; len(p), it may use all of p as scratch space during the call.</span></span><br><span class=\"line\"><span class=\"comment\">// If some data is available but not len(p) bytes, Read conventionally</span></span><br><span class=\"line\"><span class=\"comment\">// returns what is available instead of waiting for more.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// When Read encounters an error or end-of-file condition after</span></span><br><span class=\"line\"><span class=\"comment\">// successfully reading n &gt; 0 bytes, it returns the number of</span></span><br><span class=\"line\"><span class=\"comment\">// bytes read. It may return the (non-nil) error from the same call</span></span><br><span class=\"line\"><span class=\"comment\">// or return the error (and n == 0) from a subsequent call.</span></span><br><span class=\"line\"><span class=\"comment\">// An instance of this general case is that a Reader returning</span></span><br><span class=\"line\"><span class=\"comment\">// a non-zero number of bytes at the end of the input stream may</span></span><br><span class=\"line\"><span class=\"comment\">// return either err == EOF or err == nil. The next Read should</span></span><br><span class=\"line\"><span class=\"comment\">// return 0, EOF.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Callers should always process the n &gt; 0 bytes returned before</span></span><br><span class=\"line\"><span class=\"comment\">// considering the error err. Doing so correctly handles I/O errors</span></span><br><span class=\"line\"><span class=\"comment\">// that happen after reading some bytes and also both of the</span></span><br><span class=\"line\"><span class=\"comment\">// allowed EOF behaviors.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Implementations of Read are discouraged from returning a</span></span><br><span class=\"line\"><span class=\"comment\">// zero byte count with a nil error, except when len(p) == 0.</span></span><br><span class=\"line\"><span class=\"comment\">// Callers should treat a return of 0 and nil as indicating that</span></span><br><span class=\"line\"><span class=\"comment\">// nothing happened; in particular it does not indicate EOF.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Implementations must not retain p.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Reader <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">  Read(p []<span class=\"keyword\">byte</span>) (n <span class=\"keyword\">int</span>, err error)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Writer is the interface that wraps the basic Write method.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Write writes len(p) bytes from p to the underlying data stream.</span></span><br><span class=\"line\"><span class=\"comment\">// It returns the number of bytes written from p (0 &lt;= n &lt;= len(p))</span></span><br><span class=\"line\"><span class=\"comment\">// and any error encountered that caused the write to stop early.</span></span><br><span class=\"line\"><span class=\"comment\">// Write must return a non-nil error if it returns n &lt; len(p).</span></span><br><span class=\"line\"><span class=\"comment\">// Write must not modify the slice data, even temporarily.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Implementations must not retain p.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Writer <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">  Write(p []<span class=\"keyword\">byte</span>) (n <span class=\"keyword\">int</span>, err error)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ReadWriter is the interface that groups the basic Read and Write methods.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> ReadWriter <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">  Reader</span><br><span class=\"line\">  Writer</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>在上面的定义中,我们可以看到ReadWriter中嵌套了两个接口,他们分别是Reader和Writer.</p>\n<p>Reader定义了Read方法,倘若函数参数值是io.Reader,那么传入的结构体(struct)只要实现了Read方法就可以被当做参数传入.</p>\n<p>Writer定义了Write方法,倘若函数参数值是io.Writer,那么传入的结构体(struct)只要实现了Write方法就可以被当做参数传入.</p>\n<p>而ReadWriter嵌套了Reader和Writer,倘若让io.ReadWriter作为参数传递或者返回值返回,则需要结构体实现Reader中的Read方法和Writer中的Write方法.</p>\n<p>在开源社区,接口方法的定义其遵循的原则是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">接口嵌入接口，保持深度在0或1为最佳。</span><br><span class=\"line\">接口中直接定义的方法数量10个之内最佳。</span><br></pre></td></tr></table></figure>"},{"title":"聊聊golang中,与context相关的使用技巧","cover":"/img/golang/context_title.png","subtitle":"聊聊golang中,与context相关的使用技巧","author":{"nick":"袁苏东","link":"https://github.com/yuansudong"},"typora-root-url":"development-manual-jwt","_content":"\ncontext,译为上下文,自go1.7引入,按照官方所述,它是一个请求的全局上下文,携带了截止时间,手动取消等信号,并且包含一个并发安全的map,可以用于传递数据.context被定义在官方包中,其结构如下\n\n\n\n```go\ntype Context interface {\n  //Deadline返回代表此上下文完成工作的时间\n  //应该取消。没有指定截止日期时，Deadline返回ok==false,否则返回true\n  //设置。连续调用Deadline返回相同的结果。\n  Deadline() (deadline time.Time, ok bool)\n  // 通过select case <-Done() 可以主动退出\n  Done() <-chan struct{}\n  // 判断context是否是正常退出\n  Err() error\n  //  可通过key取得与key对应的val\n  Value(key interface{}) interface{}\n}\n```\n\n\n\n## 1.使用技巧\n\n\n\n### 01.基于context.WithValue向下文传值.\n\n\n\n```go\npackage main\n\nimport (\n  \"context\"\n  \"log\"\n)\ntype _ContextWithValue struct {\n  key string\n  val string\n}\nfunc _NewContextWithValue() *_ContextWithValue {\n  return &_ContextWithValue{\n    key: \"hello\",\n    val: \"world\",\n  }\n}\nfunc (cwv *_ContextWithValue) Do() {\n  cwv.Func1(context.Background())\n}\nfunc (cwv *_ContextWithValue) Func1(ctx context.Context) *_ContextWithValue {\n\n  cwv.Func2(context.WithValue(ctx, cwv.key, cwv.val))\n  return cwv\n}\n\n// Func2 用于获得func1设置的值\nfunc (cwv *_ContextWithValue) Func2(ctx context.Context) *_ContextWithValue {\n  log.Println(ctx.Value(cwv.key))\n  return cwv\n}\n\n```\n\n\n\n通过调用Do函数,会输出world.\n\n\n\n需要注意的是,此种方式需要注意的是,子context可以通过ctx.Value(key)得到父context设置的val.\n\n\n\n但是,父context不能通过ctx.Value(key)得到子context的值\n\n\n\n### 02.基于context.WithTimeout可以对异步任务设置超时.\n\n\n\n在日常开发中,这种情况情况挺多,比如通过RPC,去后台服务获取数据.而在RPC调用中,不可能无休止的等待下去.\n\n\n\n所以,一般需要基于context.WithTimeout做超时处理\n\n\n\n样例代码如下\n\n\n\n```go\npackage main\n\nimport (\n  \"context\"\n  \"time\"\n)\n\ntype _Request struct {\n}\n\ntype _Response struct {\n}\n\n//\ntype _ContextWithTimeout struct {\n}\n\nfunc (cwt *_ContextWithTimeout) Do() {\n  ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n  defer cancel()\n  cwt.handle(ctx, new(_Request))\n  time.Sleep(2 * time.Second)\n}\n\nfunc (cwt *_ContextWithTimeout) handle(ctx context.Context, req *_Request) (*_Response, error) {\n  cRspChan := make(chan *_Response)\n  go func(cReplyChan chan<- *_Response) {\n    time.Sleep(2 * time.Second) // 模拟rpc请求\n    cReplyChan <- new(_Response)\n  }(cRspChan)\n  select {\n  case <-ctx.Done():\n    return nil, ctx.Err()\n  case rsp := <-cRspChan:\n    return rsp, nil\n  }\n}\n\n```\n\n\n\n### 03.基于context.WithCancel让进程优雅的退出.\n\n\n\n在服务器开发中,基本一个进程需要开启很多协程用于异步完成任务.但是golang的协程没有主动打断的办法,只有等待协程执行完毕才表示协程退出.\n\n\n\n我们可以通过调用context.WithCancel返回的cancel函数,让派生自该context的所有子context触发 <- ctx.Done() 执行,从而退出协程.\n\n\n\n样例代码如下\n\n\n\n```\nfunc _ContextWithCancel() {\n  ctx, cancel := context.WithCancel(context.Background())\n  go func() {\n    aCtx, aCancel := context.WithCancel(ctx)\n    aCancel()\n    select {\n    case <-aCtx.Done():\n      log.Println(\"A协程退出\")\n    }\n  }()\n  go func() {\n    select {\n    case <-ctx.Done():\n      log.Println(\"B协程\")\n    }\n  }()\n  time.Sleep(5 * time.Second)\n  cancel()\n  time.Sleep(5 * time.Second)\n  log.Println(ctx.Err())\n}\n```\n\n\n\n需要注意的是,父context的cancel被调用.子context的Done()会收到信号通知,子context的cancel被调用.父context的Done()不会收到信号通知.\n\n\n\n因此,在进程监听到linux系统发出的关闭信号时,调用cancel函数,通知所有的协程退出.\n\n\n\n然后,基于sync.Waitgroup中的Wait()等待所有协程退出,是非常合适的.","source":"_posts/golang-context.md","raw":"---\n\ntitle: 聊聊golang中,与context相关的使用技巧\ncover: /img/golang/context_title.png\nsubtitle: 聊聊golang中,与context相关的使用技巧\ncategories: \"GO语言\"\ntags: \"GO语言\"\nauthor:\n  nick: 袁苏东\n  link: https://github.com/yuansudong\ntypora-root-url: development-manual-jwt\n---\n\ncontext,译为上下文,自go1.7引入,按照官方所述,它是一个请求的全局上下文,携带了截止时间,手动取消等信号,并且包含一个并发安全的map,可以用于传递数据.context被定义在官方包中,其结构如下\n\n\n\n```go\ntype Context interface {\n  //Deadline返回代表此上下文完成工作的时间\n  //应该取消。没有指定截止日期时，Deadline返回ok==false,否则返回true\n  //设置。连续调用Deadline返回相同的结果。\n  Deadline() (deadline time.Time, ok bool)\n  // 通过select case <-Done() 可以主动退出\n  Done() <-chan struct{}\n  // 判断context是否是正常退出\n  Err() error\n  //  可通过key取得与key对应的val\n  Value(key interface{}) interface{}\n}\n```\n\n\n\n## 1.使用技巧\n\n\n\n### 01.基于context.WithValue向下文传值.\n\n\n\n```go\npackage main\n\nimport (\n  \"context\"\n  \"log\"\n)\ntype _ContextWithValue struct {\n  key string\n  val string\n}\nfunc _NewContextWithValue() *_ContextWithValue {\n  return &_ContextWithValue{\n    key: \"hello\",\n    val: \"world\",\n  }\n}\nfunc (cwv *_ContextWithValue) Do() {\n  cwv.Func1(context.Background())\n}\nfunc (cwv *_ContextWithValue) Func1(ctx context.Context) *_ContextWithValue {\n\n  cwv.Func2(context.WithValue(ctx, cwv.key, cwv.val))\n  return cwv\n}\n\n// Func2 用于获得func1设置的值\nfunc (cwv *_ContextWithValue) Func2(ctx context.Context) *_ContextWithValue {\n  log.Println(ctx.Value(cwv.key))\n  return cwv\n}\n\n```\n\n\n\n通过调用Do函数,会输出world.\n\n\n\n需要注意的是,此种方式需要注意的是,子context可以通过ctx.Value(key)得到父context设置的val.\n\n\n\n但是,父context不能通过ctx.Value(key)得到子context的值\n\n\n\n### 02.基于context.WithTimeout可以对异步任务设置超时.\n\n\n\n在日常开发中,这种情况情况挺多,比如通过RPC,去后台服务获取数据.而在RPC调用中,不可能无休止的等待下去.\n\n\n\n所以,一般需要基于context.WithTimeout做超时处理\n\n\n\n样例代码如下\n\n\n\n```go\npackage main\n\nimport (\n  \"context\"\n  \"time\"\n)\n\ntype _Request struct {\n}\n\ntype _Response struct {\n}\n\n//\ntype _ContextWithTimeout struct {\n}\n\nfunc (cwt *_ContextWithTimeout) Do() {\n  ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n  defer cancel()\n  cwt.handle(ctx, new(_Request))\n  time.Sleep(2 * time.Second)\n}\n\nfunc (cwt *_ContextWithTimeout) handle(ctx context.Context, req *_Request) (*_Response, error) {\n  cRspChan := make(chan *_Response)\n  go func(cReplyChan chan<- *_Response) {\n    time.Sleep(2 * time.Second) // 模拟rpc请求\n    cReplyChan <- new(_Response)\n  }(cRspChan)\n  select {\n  case <-ctx.Done():\n    return nil, ctx.Err()\n  case rsp := <-cRspChan:\n    return rsp, nil\n  }\n}\n\n```\n\n\n\n### 03.基于context.WithCancel让进程优雅的退出.\n\n\n\n在服务器开发中,基本一个进程需要开启很多协程用于异步完成任务.但是golang的协程没有主动打断的办法,只有等待协程执行完毕才表示协程退出.\n\n\n\n我们可以通过调用context.WithCancel返回的cancel函数,让派生自该context的所有子context触发 <- ctx.Done() 执行,从而退出协程.\n\n\n\n样例代码如下\n\n\n\n```\nfunc _ContextWithCancel() {\n  ctx, cancel := context.WithCancel(context.Background())\n  go func() {\n    aCtx, aCancel := context.WithCancel(ctx)\n    aCancel()\n    select {\n    case <-aCtx.Done():\n      log.Println(\"A协程退出\")\n    }\n  }()\n  go func() {\n    select {\n    case <-ctx.Done():\n      log.Println(\"B协程\")\n    }\n  }()\n  time.Sleep(5 * time.Second)\n  cancel()\n  time.Sleep(5 * time.Second)\n  log.Println(ctx.Err())\n}\n```\n\n\n\n需要注意的是,父context的cancel被调用.子context的Done()会收到信号通知,子context的cancel被调用.父context的Done()不会收到信号通知.\n\n\n\n因此,在进程监听到linux系统发出的关闭信号时,调用cancel函数,通知所有的协程退出.\n\n\n\n然后,基于sync.Waitgroup中的Wait()等待所有协程退出,是非常合适的.","slug":"golang-context","published":1,"date":"2021-03-16T19:33:04.217Z","updated":"2021-03-16T19:42:22.396Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmchg4i900067gvl06m65i4h","content":"<p>context,译为上下文,自go1.7引入,按照官方所述,它是一个请求的全局上下文,携带了截止时间,手动取消等信号,并且包含一个并发安全的map,可以用于传递数据.context被定义在官方包中,其结构如下</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Context <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//Deadline返回代表此上下文完成工作的时间</span></span><br><span class=\"line\">  <span class=\"comment\">//应该取消。没有指定截止日期时，Deadline返回ok==false,否则返回true</span></span><br><span class=\"line\">  <span class=\"comment\">//设置。连续调用Deadline返回相同的结果。</span></span><br><span class=\"line\">  Deadline() (deadline time.Time, ok <span class=\"keyword\">bool</span>)</span><br><span class=\"line\">  <span class=\"comment\">// 通过select case &lt;-Done() 可以主动退出</span></span><br><span class=\"line\">  Done() &lt;-<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\">  <span class=\"comment\">// 判断context是否是正常退出</span></span><br><span class=\"line\">  Err() error</span><br><span class=\"line\">  <span class=\"comment\">//  可通过key取得与key对应的val</span></span><br><span class=\"line\">  Value(key <span class=\"keyword\">interface</span>&#123;&#125;) <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"1-使用技巧\"><a href=\"#1-使用技巧\" class=\"headerlink\" title=\"1.使用技巧\"></a>1.使用技巧</h2><h3 id=\"01-基于context-WithValue向下文传值\"><a href=\"#01-基于context-WithValue向下文传值\" class=\"headerlink\" title=\"01.基于context.WithValue向下文传值.\"></a>01.基于context.WithValue向下文传值.</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">&quot;context&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">type</span> _ContextWithValue <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  key <span class=\"keyword\">string</span></span><br><span class=\"line\">  val <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> _<span class=\"title\">NewContextWithValue</span><span class=\"params\">()</span> *_<span class=\"title\">ContextWithValue</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &amp;_ContextWithValue&#123;</span><br><span class=\"line\">    key: <span class=\"string\">&quot;hello&quot;</span>,</span><br><span class=\"line\">    val: <span class=\"string\">&quot;world&quot;</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(cwv *_ContextWithValue)</span> <span class=\"title\">Do</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  cwv.Func1(context.Background())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(cwv *_ContextWithValue)</span> <span class=\"title\">Func1</span><span class=\"params\">(ctx context.Context)</span> *_<span class=\"title\">ContextWithValue</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  cwv.Func2(context.WithValue(ctx, cwv.key, cwv.val))</span><br><span class=\"line\">  <span class=\"keyword\">return</span> cwv</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Func2 用于获得func1设置的值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(cwv *_ContextWithValue)</span> <span class=\"title\">Func2</span><span class=\"params\">(ctx context.Context)</span> *_<span class=\"title\">ContextWithValue</span></span> &#123;</span><br><span class=\"line\">  log.Println(ctx.Value(cwv.key))</span><br><span class=\"line\">  <span class=\"keyword\">return</span> cwv</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>通过调用Do函数,会输出world.</p>\n<p>需要注意的是,此种方式需要注意的是,子context可以通过ctx.Value(key)得到父context设置的val.</p>\n<p>但是,父context不能通过ctx.Value(key)得到子context的值</p>\n<h3 id=\"02-基于context-WithTimeout可以对异步任务设置超时\"><a href=\"#02-基于context-WithTimeout可以对异步任务设置超时\" class=\"headerlink\" title=\"02.基于context.WithTimeout可以对异步任务设置超时.\"></a>02.基于context.WithTimeout可以对异步任务设置超时.</h3><p>在日常开发中,这种情况情况挺多,比如通过RPC,去后台服务获取数据.而在RPC调用中,不可能无休止的等待下去.</p>\n<p>所以,一般需要基于context.WithTimeout做超时处理</p>\n<p>样例代码如下</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">&quot;context&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> _Request <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> _Response <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> _ContextWithTimeout <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(cwt *_ContextWithTimeout)</span> <span class=\"title\">Do</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  ctx, cancel := context.WithTimeout(context.Background(), <span class=\"number\">5</span>*time.Second)</span><br><span class=\"line\">  <span class=\"keyword\">defer</span> cancel()</span><br><span class=\"line\">  cwt.handle(ctx, <span class=\"built_in\">new</span>(_Request))</span><br><span class=\"line\">  time.Sleep(<span class=\"number\">2</span> * time.Second)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(cwt *_ContextWithTimeout)</span> <span class=\"title\">handle</span><span class=\"params\">(ctx context.Context, req *_Request)</span> <span class=\"params\">(*_Response, error)</span></span> &#123;</span><br><span class=\"line\">  cRspChan := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> *_Response)</span><br><span class=\"line\">  <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(cReplyChan <span class=\"keyword\">chan</span>&lt;- *_Response)</span></span> &#123;</span><br><span class=\"line\">    time.Sleep(<span class=\"number\">2</span> * time.Second) <span class=\"comment\">// 模拟rpc请求</span></span><br><span class=\"line\">    cReplyChan &lt;- <span class=\"built_in\">new</span>(_Response)</span><br><span class=\"line\">  &#125;(cRspChan)</span><br><span class=\"line\">  <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> &lt;-ctx.Done():</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, ctx.Err()</span><br><span class=\"line\">  <span class=\"keyword\">case</span> rsp := &lt;-cRspChan:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rsp, <span class=\"literal\">nil</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"03-基于context-WithCancel让进程优雅的退出\"><a href=\"#03-基于context-WithCancel让进程优雅的退出\" class=\"headerlink\" title=\"03.基于context.WithCancel让进程优雅的退出.\"></a>03.基于context.WithCancel让进程优雅的退出.</h3><p>在服务器开发中,基本一个进程需要开启很多协程用于异步完成任务.但是golang的协程没有主动打断的办法,只有等待协程执行完毕才表示协程退出.</p>\n<p>我们可以通过调用context.WithCancel返回的cancel函数,让派生自该context的所有子context触发 &lt;- ctx.Done() 执行,从而退出协程.</p>\n<p>样例代码如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func _ContextWithCancel() &#123;</span><br><span class=\"line\">  ctx, cancel :&#x3D; context.WithCancel(context.Background())</span><br><span class=\"line\">  go func() &#123;</span><br><span class=\"line\">    aCtx, aCancel :&#x3D; context.WithCancel(ctx)</span><br><span class=\"line\">    aCancel()</span><br><span class=\"line\">    select &#123;</span><br><span class=\"line\">    case &lt;-aCtx.Done():</span><br><span class=\"line\">      log.Println(&quot;A协程退出&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;()</span><br><span class=\"line\">  go func() &#123;</span><br><span class=\"line\">    select &#123;</span><br><span class=\"line\">    case &lt;-ctx.Done():</span><br><span class=\"line\">      log.Println(&quot;B协程&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;()</span><br><span class=\"line\">  time.Sleep(5 * time.Second)</span><br><span class=\"line\">  cancel()</span><br><span class=\"line\">  time.Sleep(5 * time.Second)</span><br><span class=\"line\">  log.Println(ctx.Err())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>需要注意的是,父context的cancel被调用.子context的Done()会收到信号通知,子context的cancel被调用.父context的Done()不会收到信号通知.</p>\n<p>因此,在进程监听到linux系统发出的关闭信号时,调用cancel函数,通知所有的协程退出.</p>\n<p>然后,基于sync.Waitgroup中的Wait()等待所有协程退出,是非常合适的.</p>\n","site":{"data":{"contact":[{"title":"github","icon":"icon-github","link":"https://github.com/yuansudong"},{"title":"email","icon":"icon-email","link":"mailto:1145919989@qq.com"},{"title":"qq","icon":"icon-qq","link":"/atom.xml"}],"favicons":["<link rel=\"shortcut icon\" href=\"/img//favicon.ico\">","<link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/img//favicon-16x16.png\">","<link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/img//favicon-32x32.png\">","<link rel=\"icon\" type=\"image/png\" sizes=\"48x48\" href=\"/img//favicon-48x48.png\">","<link rel=\"manifest\" href=\"/img//manifest.json\">","<meta name=\"mobile-web-app-capable\" content=\"yes\">","<meta name=\"theme-color\" content=\"#fff\">","<meta name=\"application-name\">","<link rel=\"apple-touch-icon\" sizes=\"57x57\" href=\"/img//apple-touch-icon-57x57.png\">","<link rel=\"apple-touch-icon\" sizes=\"60x60\" href=\"/img//apple-touch-icon-60x60.png\">","<link rel=\"apple-touch-icon\" sizes=\"72x72\" href=\"/img//apple-touch-icon-72x72.png\">","<link rel=\"apple-touch-icon\" sizes=\"76x76\" href=\"/img//apple-touch-icon-76x76.png\">","<link rel=\"apple-touch-icon\" sizes=\"114x114\" href=\"/img//apple-touch-icon-114x114.png\">","<link rel=\"apple-touch-icon\" sizes=\"120x120\" href=\"/img//apple-touch-icon-120x120.png\">","<link rel=\"apple-touch-icon\" sizes=\"144x144\" href=\"/img//apple-touch-icon-144x144.png\">","<link rel=\"apple-touch-icon\" sizes=\"152x152\" href=\"/img//apple-touch-icon-152x152.png\">","<link rel=\"apple-touch-icon\" sizes=\"167x167\" href=\"/img//apple-touch-icon-167x167.png\">","<link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/img//apple-touch-icon-180x180.png\">","<link rel=\"apple-touch-icon\" sizes=\"1024x1024\" href=\"/img//apple-touch-icon-1024x1024.png\">","<meta name=\"apple-mobile-web-app-capable\" content=\"yes\">","<meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black-translucent\">","<meta name=\"apple-mobile-web-app-title\">","<meta name=\"msapplication-TileColor\" content=\"#fff\">","<meta name=\"msapplication-TileImage\" content=\"/img//mstile-144x144.png\">","<meta name=\"msapplication-config\" content=\"/img//browserconfig.xml\">"]}},"excerpt":"","more":"<p>context,译为上下文,自go1.7引入,按照官方所述,它是一个请求的全局上下文,携带了截止时间,手动取消等信号,并且包含一个并发安全的map,可以用于传递数据.context被定义在官方包中,其结构如下</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Context <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//Deadline返回代表此上下文完成工作的时间</span></span><br><span class=\"line\">  <span class=\"comment\">//应该取消。没有指定截止日期时，Deadline返回ok==false,否则返回true</span></span><br><span class=\"line\">  <span class=\"comment\">//设置。连续调用Deadline返回相同的结果。</span></span><br><span class=\"line\">  Deadline() (deadline time.Time, ok <span class=\"keyword\">bool</span>)</span><br><span class=\"line\">  <span class=\"comment\">// 通过select case &lt;-Done() 可以主动退出</span></span><br><span class=\"line\">  Done() &lt;-<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\">  <span class=\"comment\">// 判断context是否是正常退出</span></span><br><span class=\"line\">  Err() error</span><br><span class=\"line\">  <span class=\"comment\">//  可通过key取得与key对应的val</span></span><br><span class=\"line\">  Value(key <span class=\"keyword\">interface</span>&#123;&#125;) <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"1-使用技巧\"><a href=\"#1-使用技巧\" class=\"headerlink\" title=\"1.使用技巧\"></a>1.使用技巧</h2><h3 id=\"01-基于context-WithValue向下文传值\"><a href=\"#01-基于context-WithValue向下文传值\" class=\"headerlink\" title=\"01.基于context.WithValue向下文传值.\"></a>01.基于context.WithValue向下文传值.</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">&quot;context&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">type</span> _ContextWithValue <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  key <span class=\"keyword\">string</span></span><br><span class=\"line\">  val <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> _<span class=\"title\">NewContextWithValue</span><span class=\"params\">()</span> *_<span class=\"title\">ContextWithValue</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &amp;_ContextWithValue&#123;</span><br><span class=\"line\">    key: <span class=\"string\">&quot;hello&quot;</span>,</span><br><span class=\"line\">    val: <span class=\"string\">&quot;world&quot;</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(cwv *_ContextWithValue)</span> <span class=\"title\">Do</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  cwv.Func1(context.Background())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(cwv *_ContextWithValue)</span> <span class=\"title\">Func1</span><span class=\"params\">(ctx context.Context)</span> *_<span class=\"title\">ContextWithValue</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  cwv.Func2(context.WithValue(ctx, cwv.key, cwv.val))</span><br><span class=\"line\">  <span class=\"keyword\">return</span> cwv</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Func2 用于获得func1设置的值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(cwv *_ContextWithValue)</span> <span class=\"title\">Func2</span><span class=\"params\">(ctx context.Context)</span> *_<span class=\"title\">ContextWithValue</span></span> &#123;</span><br><span class=\"line\">  log.Println(ctx.Value(cwv.key))</span><br><span class=\"line\">  <span class=\"keyword\">return</span> cwv</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>通过调用Do函数,会输出world.</p>\n<p>需要注意的是,此种方式需要注意的是,子context可以通过ctx.Value(key)得到父context设置的val.</p>\n<p>但是,父context不能通过ctx.Value(key)得到子context的值</p>\n<h3 id=\"02-基于context-WithTimeout可以对异步任务设置超时\"><a href=\"#02-基于context-WithTimeout可以对异步任务设置超时\" class=\"headerlink\" title=\"02.基于context.WithTimeout可以对异步任务设置超时.\"></a>02.基于context.WithTimeout可以对异步任务设置超时.</h3><p>在日常开发中,这种情况情况挺多,比如通过RPC,去后台服务获取数据.而在RPC调用中,不可能无休止的等待下去.</p>\n<p>所以,一般需要基于context.WithTimeout做超时处理</p>\n<p>样例代码如下</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">&quot;context&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> _Request <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> _Response <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> _ContextWithTimeout <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(cwt *_ContextWithTimeout)</span> <span class=\"title\">Do</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  ctx, cancel := context.WithTimeout(context.Background(), <span class=\"number\">5</span>*time.Second)</span><br><span class=\"line\">  <span class=\"keyword\">defer</span> cancel()</span><br><span class=\"line\">  cwt.handle(ctx, <span class=\"built_in\">new</span>(_Request))</span><br><span class=\"line\">  time.Sleep(<span class=\"number\">2</span> * time.Second)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(cwt *_ContextWithTimeout)</span> <span class=\"title\">handle</span><span class=\"params\">(ctx context.Context, req *_Request)</span> <span class=\"params\">(*_Response, error)</span></span> &#123;</span><br><span class=\"line\">  cRspChan := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> *_Response)</span><br><span class=\"line\">  <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(cReplyChan <span class=\"keyword\">chan</span>&lt;- *_Response)</span></span> &#123;</span><br><span class=\"line\">    time.Sleep(<span class=\"number\">2</span> * time.Second) <span class=\"comment\">// 模拟rpc请求</span></span><br><span class=\"line\">    cReplyChan &lt;- <span class=\"built_in\">new</span>(_Response)</span><br><span class=\"line\">  &#125;(cRspChan)</span><br><span class=\"line\">  <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> &lt;-ctx.Done():</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, ctx.Err()</span><br><span class=\"line\">  <span class=\"keyword\">case</span> rsp := &lt;-cRspChan:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rsp, <span class=\"literal\">nil</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"03-基于context-WithCancel让进程优雅的退出\"><a href=\"#03-基于context-WithCancel让进程优雅的退出\" class=\"headerlink\" title=\"03.基于context.WithCancel让进程优雅的退出.\"></a>03.基于context.WithCancel让进程优雅的退出.</h3><p>在服务器开发中,基本一个进程需要开启很多协程用于异步完成任务.但是golang的协程没有主动打断的办法,只有等待协程执行完毕才表示协程退出.</p>\n<p>我们可以通过调用context.WithCancel返回的cancel函数,让派生自该context的所有子context触发 &lt;- ctx.Done() 执行,从而退出协程.</p>\n<p>样例代码如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func _ContextWithCancel() &#123;</span><br><span class=\"line\">  ctx, cancel :&#x3D; context.WithCancel(context.Background())</span><br><span class=\"line\">  go func() &#123;</span><br><span class=\"line\">    aCtx, aCancel :&#x3D; context.WithCancel(ctx)</span><br><span class=\"line\">    aCancel()</span><br><span class=\"line\">    select &#123;</span><br><span class=\"line\">    case &lt;-aCtx.Done():</span><br><span class=\"line\">      log.Println(&quot;A协程退出&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;()</span><br><span class=\"line\">  go func() &#123;</span><br><span class=\"line\">    select &#123;</span><br><span class=\"line\">    case &lt;-ctx.Done():</span><br><span class=\"line\">      log.Println(&quot;B协程&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;()</span><br><span class=\"line\">  time.Sleep(5 * time.Second)</span><br><span class=\"line\">  cancel()</span><br><span class=\"line\">  time.Sleep(5 * time.Second)</span><br><span class=\"line\">  log.Println(ctx.Err())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>需要注意的是,父context的cancel被调用.子context的Done()会收到信号通知,子context的cancel被调用.父context的Done()不会收到信号通知.</p>\n<p>因此,在进程监听到linux系统发出的关闭信号时,调用cancel函数,通知所有的协程退出.</p>\n<p>然后,基于sync.Waitgroup中的Wait()等待所有协程退出,是非常合适的.</p>\n"},{"title":"聊聊golang中,与JSON相关的使用技巧","cover":"/img/golang/json_title.png","subtitle":"聊聊golang中,与JSON相关的使用技巧","author":{"nick":"袁苏东","link":"https://github.com/yuansudong"},"typora-root-url":"development-manual-jwt","_content":"\nJSON（JavaScript Object Notation，JavaScript对象表示法）是一种由道格拉斯·克罗克福特构想和设计、轻量级的资料交换语言，该语言以易于让人阅读的文字为基础，用来传输由属性值或者序列性的值组成的数据对象。尽管JSON是JavaScript的一个子集，但JSON是独立于语言的文本格式，并且采用了类似于C语言家族的一些习惯。\n\n\n\n其应用领域广泛,常被用作web开发,API接口开发,配置文件,NoSQL数据库\n\n\n\n## 1.基本类型\n\n\n\nJSON的基本数据类型有,数值,字符串,布尔值,数组,对象,null\n\n\n\n数值: 十进制,不能有前导0,可为负数,可为浮点数,亦可以有e或者E表示指数部分\n\n\n\n字符串: 以双引号\"\"括起来的零个或多个Unicode码位,支持反斜杠开始的转义字符\n\n\n\n布尔值: 表示为true或者false\n\n\n\n数组: 有序的零个或者多个值.每个值可以为任意类型.其形式由[]括起来,元素只见用逗号隔开.\n\n\n\n对象: 由{}包括,若干个key-val组成.其K-V之间用:分隔.\n\n\n\nnull类型: 其值为null\n\n\n\n## 2.使用技巧\n\n\n\n在GO开发中,JSON的定义常常与结构体相关,通过在结构体字段中的tag,达到控制JSON的目的\n\n\n\n### 01.通过使用omitempty,当字段为默认值时,不序列化字段\n\n\n\n在API接口开发过程中,有些时候响应的JSON数据中,有些字段是默认值,比如0,\"\",null.\n\n\n\n为了避免流量消耗,对于这些默认值,可以在序列化时,将其抛弃.例子如下\n\n\n\n```go\npackage main\n\nimport (\n  \"encoding/json\"\n  \"log\"\n)\n\n// Old 原始结构\ntype Old struct {\n  Name    string `json:\"name\"`\n  Age     int    `json:\"age\"`\n  Address string `json:\"address\"`\n  Sex     *int   `json:\"sex\"`\n}\n\n// New 改变结构\ntype New struct {\n  Name    string `json:\"name,omitempty\"`\n  Age     int    `json:\"age,omitempty\"`\n  Address string `json:\"address\"`\n  Sex     *int   `json:\"sex,omitempty\"`\n}\n\nfunc main() {\n  // now := time.Now()\n  mOld := new(Old)\n  // mOld.Time = now\n  bOldData, mOldErr := json.Marshal(mOld)\n  if mOldErr != nil {\n    log.Fatalln(mOldErr.Error())\n  }\n  log.Println(\"old ==> \", string(bOldData))\n  mNew := new(New)\n  // mNew.Time = now\n  bNewData, mNewErr := json.Marshal(mNew)\n  if mNewErr != nil {\n    log.Fatalln(mOldErr.Error())\n  }\n  log.Println(\"new ==> \", string(bNewData))\n}\n```\n\n\n\n输出结果如下\n\n\n\n```log\nold ==>  {\"name\":\"\",\"age\":0,\"address\":\"\",\"sex\":null}\nnew ==>  {\"address\":\"\"}\n```\n\n\n\n从结果中可以看到,tag中有omitempty修饰的字段,当其值是空值时,不会被序列化\n\n\n\n### 02.可用\"-\"忽略某个字段,让其不加入序列化\n\n\n\n在实际开发中,结构体中的有些字段需要在接口代码中使用,但是不想将其呈现在接口返回数据中.\n\n\n\n此时,我们可以在tag中使用\"-\",将其忽略掉.倘若你的JSON对象的key是\"-\",那么需要使用\"-,\",达到不被屏蔽的效果.\n\n\n\n示例代码如下\n\n\n\n```json\npackage main\n\nimport (\n  \"encoding/json\"\n  \"fmt\"\n  \"log\"\n)\n\n// Old 原始结构\ntype Old struct {\n  Name    string `json:\"name\"`\n  Age     int    `json:\"age\"`\n  Address string `json:\"address\"`\n  Sex     *int   `json:\"sex\"`\n  Ignore  string `json:\"ignore\"`\n  Dec     string `json:\"-\"`\n}\n\n// New 改变结构\ntype New struct {\n  Name    string `json:\"name,omitempty\"`\n  Age     int    `json:\"age,omitempty\"`\n  Address string `json:\"address\"`\n  Sex     *int   `json:\"sex,omitempty\"`\n  Ignore  string `json:\"-\"`\n  Dec     string `json:\"-,\"`\n}\n\nfunc main() {\n  // now := time.Now()\n  mOld := new(Old)\n  // mOld.Time = now\n  bOldData, mOldErr := json.Marshal(mOld)\n  if mOldErr != nil {\n    log.Fatalln(mOldErr.Error())\n  }\n  fmt.Println(\"old ==> \", string(bOldData))\n  mNew := new(New)\n  // mNew.Time = now\n  bNewData, mNewErr := json.Marshal(mNew)\n  if mNewErr != nil {\n    log.Fatalln(mOldErr.Error())\n  }\n  fmt.Println(\"new ==> \", string(bNewData))\n}\n```\n\n\n\n输出结果如下\n\n\n\n```\nold ==>{\"name\":\"\",\"age\":0,\"address\":\"\",\"sex\":null,\"ignore\":\"\"}\nnew ==>{\"address\":\"\",\"-\":\"\"}\n```\n\n\n\n### 03.通过实现json.Marshaler接口和json.Unmarshaler接口控制序列化\n\n\n\n在实际开发中,GO中的时间操作都是以time.Time为单位.但是,json在序列化时将time.Time序列化成了字符串,其格式为time.RFC3339Nano.反序列化时需要传递同等格式字符串才能被反序列化成时间对象.\n\n\n\n因为时区问题的存在,所以有关于时间,服务器以及上传参数中都是以UNIX时间戳的方式来表达时间.\n\n\n\n其实,以RFC3339Nano的形式返回时间,客户端也是能够转换时间到本地时间的.但是,怎奈习惯一经形成,想让别人改变.\n\n\n\n一般会回绝你四个字--\"好麻烦啊\"\n\n\n\n所以,以时间戳作为参数和返回数据中的时间,已经成为了一种常态.此时,我们可以通过实现json.Marshaler接口和json.Unmarshaler,来控制实例化.\n\n\n\n[GO之理解接口在开发中的应用](https://www.yuansudong.top/2021/golang-interface/index.html)\n\n\n\n而相关方法的生成,可通过编写protobuf的插件来达到避免每个结构体都要手写一次的体力活\n\n\n\n相关代码如下\n\n\n\n```json\npackage main\n\nimport (\n  \"encoding/json\"\n  \"fmt\"\n  \"log\"\n  \"time\"\n)\n\n// Old 原始结构\ntype Old struct {\n  Name    string    `json:\"name\"`\n  Age     int       `json:\"age\"`\n  Address string    `json:\"address\"`\n  Sex     *int      `json:\"sex\"`\n  Ignore  string    `json:\"ignore\"`\n  Dec     string    `json:\"-\"`\n  Time    time.Time `json:\"time\"`\n}\n\n// New 该收\ntype New struct {\n  Name      string    `json:\"name,omitempty\"`\n  Age       int       `json:\"age,omitempty\"`\n  Address   string    `json:\"address\"`\n  Sex       *int      `json:\"sex,omitempty\"`\n  Ignore    string    `json:\"-\"`\n  Dec       string    `json:\"-,\"`\n  Time      time.Time `json:\"-\"`\n  Timestamp int64     `json:\"timestamp\"`\n}\n\n// UnmarshalJSON 用于反序列化JSON\nfunc (n *New) UnmarshalJSON(data []byte) error {\n  type Alise New\n  n1 := new(Alise)\n  if err := json.Unmarshal(data, n1); err != nil {\n    log.Println(err.Error())\n    return err\n  }\n  n1.Time = time.Unix(n1.Timestamp, 0)\n  *n = *(*New)(n1)\n  return nil\n}\n\n// MarshalJSON 实现json.Marshaler\nfunc (n *New) MarshalJSON() ([]byte, error) {\n  type Alise New\n  n.Timestamp = n.Time.Unix()\n  n1 := (*Alise)(n)\n  return json.Marshal(n1)\n}\n\nfunc main() {\n  now := time.Now()\n  mOld := new(Old)\n  mOld.Time = now\n  bOldData, mOldErr := json.Marshal(mOld)\n  if mOldErr != nil {\n    log.Fatalln(mOldErr.Error())\n  }\n  fmt.Println(\"old ==> \", string(bOldData))\n  mNew := new(New)\n  mNew.Time = now\n  bNewData, mNewErr := json.Marshal(mNew)\n  if mNewErr != nil {\n    log.Fatalln(mOldErr.Error())\n  }\n  fmt.Println(\"new ==> \", string(bNewData))\n  mUnNew := new(New)\n  json.Unmarshal([]byte(`{\"address\":\"erdads\",\"-\":\"\",\"timestamp\":1615315849}`), mUnNew)\n  fmt.Printf(\"%+v \\n\", mUnNew)\n}\n```\n\n\n\n输出结果如下:\n\n\n\n```\nold ==>  {\"name\":\"\",\"age\":0,\"address\":\"\",\"sex\":null,\"ignore\":\"\",\"time\":\"2021-03-10T02:58:32.8308486+08:00\"}\nnew ==>  {\"address\":\"\",\"-\":\"\",\"timestamp\":1615316312}\n&{Name: Age:0 Address:erdads Sex:<nil> Ignore: Dec: Time:2021-03-10 02:50:49 +0800 CST Timestamp:1615315849}\n```\n\n\n\n### 04.为什么在实现json.Marshaler和json.Unmarshaler时,需要起别名\n\n\n\n原因是,倘若还是使用New结构体,将New结构体放入json.Marshal()和json.Unmarshal() 这会导致无限递归.\n\n\n\n最终程序会出现下列错误,崩溃掉\n\n\n\n```\nruntime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020161388 stack=[0xc020160000, 0xc040160000]\n```\n\n\n\n通过定义 type Alise New 的形式该New重新定义了一个类型,该类型定义时,Alise会保留New中的所有字段,但是不会保留New中的方法,从而规避了无限递归.","source":"_posts/golang-json.md","raw":"---\n\ntitle: 聊聊golang中,与JSON相关的使用技巧\ncover: /img/golang/json_title.png\nsubtitle: 聊聊golang中,与JSON相关的使用技巧\ncategories: \"GO语言\"\ntags: \"GO语言\"\nauthor:\n  nick: 袁苏东\n  link: https://github.com/yuansudong\ntypora-root-url: development-manual-jwt\n---\n\nJSON（JavaScript Object Notation，JavaScript对象表示法）是一种由道格拉斯·克罗克福特构想和设计、轻量级的资料交换语言，该语言以易于让人阅读的文字为基础，用来传输由属性值或者序列性的值组成的数据对象。尽管JSON是JavaScript的一个子集，但JSON是独立于语言的文本格式，并且采用了类似于C语言家族的一些习惯。\n\n\n\n其应用领域广泛,常被用作web开发,API接口开发,配置文件,NoSQL数据库\n\n\n\n## 1.基本类型\n\n\n\nJSON的基本数据类型有,数值,字符串,布尔值,数组,对象,null\n\n\n\n数值: 十进制,不能有前导0,可为负数,可为浮点数,亦可以有e或者E表示指数部分\n\n\n\n字符串: 以双引号\"\"括起来的零个或多个Unicode码位,支持反斜杠开始的转义字符\n\n\n\n布尔值: 表示为true或者false\n\n\n\n数组: 有序的零个或者多个值.每个值可以为任意类型.其形式由[]括起来,元素只见用逗号隔开.\n\n\n\n对象: 由{}包括,若干个key-val组成.其K-V之间用:分隔.\n\n\n\nnull类型: 其值为null\n\n\n\n## 2.使用技巧\n\n\n\n在GO开发中,JSON的定义常常与结构体相关,通过在结构体字段中的tag,达到控制JSON的目的\n\n\n\n### 01.通过使用omitempty,当字段为默认值时,不序列化字段\n\n\n\n在API接口开发过程中,有些时候响应的JSON数据中,有些字段是默认值,比如0,\"\",null.\n\n\n\n为了避免流量消耗,对于这些默认值,可以在序列化时,将其抛弃.例子如下\n\n\n\n```go\npackage main\n\nimport (\n  \"encoding/json\"\n  \"log\"\n)\n\n// Old 原始结构\ntype Old struct {\n  Name    string `json:\"name\"`\n  Age     int    `json:\"age\"`\n  Address string `json:\"address\"`\n  Sex     *int   `json:\"sex\"`\n}\n\n// New 改变结构\ntype New struct {\n  Name    string `json:\"name,omitempty\"`\n  Age     int    `json:\"age,omitempty\"`\n  Address string `json:\"address\"`\n  Sex     *int   `json:\"sex,omitempty\"`\n}\n\nfunc main() {\n  // now := time.Now()\n  mOld := new(Old)\n  // mOld.Time = now\n  bOldData, mOldErr := json.Marshal(mOld)\n  if mOldErr != nil {\n    log.Fatalln(mOldErr.Error())\n  }\n  log.Println(\"old ==> \", string(bOldData))\n  mNew := new(New)\n  // mNew.Time = now\n  bNewData, mNewErr := json.Marshal(mNew)\n  if mNewErr != nil {\n    log.Fatalln(mOldErr.Error())\n  }\n  log.Println(\"new ==> \", string(bNewData))\n}\n```\n\n\n\n输出结果如下\n\n\n\n```log\nold ==>  {\"name\":\"\",\"age\":0,\"address\":\"\",\"sex\":null}\nnew ==>  {\"address\":\"\"}\n```\n\n\n\n从结果中可以看到,tag中有omitempty修饰的字段,当其值是空值时,不会被序列化\n\n\n\n### 02.可用\"-\"忽略某个字段,让其不加入序列化\n\n\n\n在实际开发中,结构体中的有些字段需要在接口代码中使用,但是不想将其呈现在接口返回数据中.\n\n\n\n此时,我们可以在tag中使用\"-\",将其忽略掉.倘若你的JSON对象的key是\"-\",那么需要使用\"-,\",达到不被屏蔽的效果.\n\n\n\n示例代码如下\n\n\n\n```json\npackage main\n\nimport (\n  \"encoding/json\"\n  \"fmt\"\n  \"log\"\n)\n\n// Old 原始结构\ntype Old struct {\n  Name    string `json:\"name\"`\n  Age     int    `json:\"age\"`\n  Address string `json:\"address\"`\n  Sex     *int   `json:\"sex\"`\n  Ignore  string `json:\"ignore\"`\n  Dec     string `json:\"-\"`\n}\n\n// New 改变结构\ntype New struct {\n  Name    string `json:\"name,omitempty\"`\n  Age     int    `json:\"age,omitempty\"`\n  Address string `json:\"address\"`\n  Sex     *int   `json:\"sex,omitempty\"`\n  Ignore  string `json:\"-\"`\n  Dec     string `json:\"-,\"`\n}\n\nfunc main() {\n  // now := time.Now()\n  mOld := new(Old)\n  // mOld.Time = now\n  bOldData, mOldErr := json.Marshal(mOld)\n  if mOldErr != nil {\n    log.Fatalln(mOldErr.Error())\n  }\n  fmt.Println(\"old ==> \", string(bOldData))\n  mNew := new(New)\n  // mNew.Time = now\n  bNewData, mNewErr := json.Marshal(mNew)\n  if mNewErr != nil {\n    log.Fatalln(mOldErr.Error())\n  }\n  fmt.Println(\"new ==> \", string(bNewData))\n}\n```\n\n\n\n输出结果如下\n\n\n\n```\nold ==>{\"name\":\"\",\"age\":0,\"address\":\"\",\"sex\":null,\"ignore\":\"\"}\nnew ==>{\"address\":\"\",\"-\":\"\"}\n```\n\n\n\n### 03.通过实现json.Marshaler接口和json.Unmarshaler接口控制序列化\n\n\n\n在实际开发中,GO中的时间操作都是以time.Time为单位.但是,json在序列化时将time.Time序列化成了字符串,其格式为time.RFC3339Nano.反序列化时需要传递同等格式字符串才能被反序列化成时间对象.\n\n\n\n因为时区问题的存在,所以有关于时间,服务器以及上传参数中都是以UNIX时间戳的方式来表达时间.\n\n\n\n其实,以RFC3339Nano的形式返回时间,客户端也是能够转换时间到本地时间的.但是,怎奈习惯一经形成,想让别人改变.\n\n\n\n一般会回绝你四个字--\"好麻烦啊\"\n\n\n\n所以,以时间戳作为参数和返回数据中的时间,已经成为了一种常态.此时,我们可以通过实现json.Marshaler接口和json.Unmarshaler,来控制实例化.\n\n\n\n[GO之理解接口在开发中的应用](https://www.yuansudong.top/2021/golang-interface/index.html)\n\n\n\n而相关方法的生成,可通过编写protobuf的插件来达到避免每个结构体都要手写一次的体力活\n\n\n\n相关代码如下\n\n\n\n```json\npackage main\n\nimport (\n  \"encoding/json\"\n  \"fmt\"\n  \"log\"\n  \"time\"\n)\n\n// Old 原始结构\ntype Old struct {\n  Name    string    `json:\"name\"`\n  Age     int       `json:\"age\"`\n  Address string    `json:\"address\"`\n  Sex     *int      `json:\"sex\"`\n  Ignore  string    `json:\"ignore\"`\n  Dec     string    `json:\"-\"`\n  Time    time.Time `json:\"time\"`\n}\n\n// New 该收\ntype New struct {\n  Name      string    `json:\"name,omitempty\"`\n  Age       int       `json:\"age,omitempty\"`\n  Address   string    `json:\"address\"`\n  Sex       *int      `json:\"sex,omitempty\"`\n  Ignore    string    `json:\"-\"`\n  Dec       string    `json:\"-,\"`\n  Time      time.Time `json:\"-\"`\n  Timestamp int64     `json:\"timestamp\"`\n}\n\n// UnmarshalJSON 用于反序列化JSON\nfunc (n *New) UnmarshalJSON(data []byte) error {\n  type Alise New\n  n1 := new(Alise)\n  if err := json.Unmarshal(data, n1); err != nil {\n    log.Println(err.Error())\n    return err\n  }\n  n1.Time = time.Unix(n1.Timestamp, 0)\n  *n = *(*New)(n1)\n  return nil\n}\n\n// MarshalJSON 实现json.Marshaler\nfunc (n *New) MarshalJSON() ([]byte, error) {\n  type Alise New\n  n.Timestamp = n.Time.Unix()\n  n1 := (*Alise)(n)\n  return json.Marshal(n1)\n}\n\nfunc main() {\n  now := time.Now()\n  mOld := new(Old)\n  mOld.Time = now\n  bOldData, mOldErr := json.Marshal(mOld)\n  if mOldErr != nil {\n    log.Fatalln(mOldErr.Error())\n  }\n  fmt.Println(\"old ==> \", string(bOldData))\n  mNew := new(New)\n  mNew.Time = now\n  bNewData, mNewErr := json.Marshal(mNew)\n  if mNewErr != nil {\n    log.Fatalln(mOldErr.Error())\n  }\n  fmt.Println(\"new ==> \", string(bNewData))\n  mUnNew := new(New)\n  json.Unmarshal([]byte(`{\"address\":\"erdads\",\"-\":\"\",\"timestamp\":1615315849}`), mUnNew)\n  fmt.Printf(\"%+v \\n\", mUnNew)\n}\n```\n\n\n\n输出结果如下:\n\n\n\n```\nold ==>  {\"name\":\"\",\"age\":0,\"address\":\"\",\"sex\":null,\"ignore\":\"\",\"time\":\"2021-03-10T02:58:32.8308486+08:00\"}\nnew ==>  {\"address\":\"\",\"-\":\"\",\"timestamp\":1615316312}\n&{Name: Age:0 Address:erdads Sex:<nil> Ignore: Dec: Time:2021-03-10 02:50:49 +0800 CST Timestamp:1615315849}\n```\n\n\n\n### 04.为什么在实现json.Marshaler和json.Unmarshaler时,需要起别名\n\n\n\n原因是,倘若还是使用New结构体,将New结构体放入json.Marshal()和json.Unmarshal() 这会导致无限递归.\n\n\n\n最终程序会出现下列错误,崩溃掉\n\n\n\n```\nruntime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020161388 stack=[0xc020160000, 0xc040160000]\n```\n\n\n\n通过定义 type Alise New 的形式该New重新定义了一个类型,该类型定义时,Alise会保留New中的所有字段,但是不会保留New中的方法,从而规避了无限递归.","slug":"golang-json","published":1,"date":"2021-03-16T19:14:06.038Z","updated":"2021-03-16T19:25:44.946Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmchg4if000a7gvl405x5ba9","content":"<p>JSON（JavaScript Object Notation，JavaScript对象表示法）是一种由道格拉斯·克罗克福特构想和设计、轻量级的资料交换语言，该语言以易于让人阅读的文字为基础，用来传输由属性值或者序列性的值组成的数据对象。尽管JSON是JavaScript的一个子集，但JSON是独立于语言的文本格式，并且采用了类似于C语言家族的一些习惯。</p>\n<p>其应用领域广泛,常被用作web开发,API接口开发,配置文件,NoSQL数据库</p>\n<h2 id=\"1-基本类型\"><a href=\"#1-基本类型\" class=\"headerlink\" title=\"1.基本类型\"></a>1.基本类型</h2><p>JSON的基本数据类型有,数值,字符串,布尔值,数组,对象,null</p>\n<p>数值: 十进制,不能有前导0,可为负数,可为浮点数,亦可以有e或者E表示指数部分</p>\n<p>字符串: 以双引号””括起来的零个或多个Unicode码位,支持反斜杠开始的转义字符</p>\n<p>布尔值: 表示为true或者false</p>\n<p>数组: 有序的零个或者多个值.每个值可以为任意类型.其形式由[]括起来,元素只见用逗号隔开.</p>\n<p>对象: 由{}包括,若干个key-val组成.其K-V之间用:分隔.</p>\n<p>null类型: 其值为null</p>\n<h2 id=\"2-使用技巧\"><a href=\"#2-使用技巧\" class=\"headerlink\" title=\"2.使用技巧\"></a>2.使用技巧</h2><p>在GO开发中,JSON的定义常常与结构体相关,通过在结构体字段中的tag,达到控制JSON的目的</p>\n<h3 id=\"01-通过使用omitempty-当字段为默认值时-不序列化字段\"><a href=\"#01-通过使用omitempty-当字段为默认值时-不序列化字段\" class=\"headerlink\" title=\"01.通过使用omitempty,当字段为默认值时,不序列化字段\"></a>01.通过使用omitempty,当字段为默认值时,不序列化字段</h3><p>在API接口开发过程中,有些时候响应的JSON数据中,有些字段是默认值,比如0,””,null.</p>\n<p>为了避免流量消耗,对于这些默认值,可以在序列化时,将其抛弃.例子如下</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">&quot;encoding/json&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Old 原始结构</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Old <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  Name    <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;name&quot;`</span></span><br><span class=\"line\">  Age     <span class=\"keyword\">int</span>    <span class=\"string\">`json:&quot;age&quot;`</span></span><br><span class=\"line\">  Address <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;address&quot;`</span></span><br><span class=\"line\">  Sex     *<span class=\"keyword\">int</span>   <span class=\"string\">`json:&quot;sex&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// New 改变结构</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> New <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  Name    <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;name,omitempty&quot;`</span></span><br><span class=\"line\">  Age     <span class=\"keyword\">int</span>    <span class=\"string\">`json:&quot;age,omitempty&quot;`</span></span><br><span class=\"line\">  Address <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;address&quot;`</span></span><br><span class=\"line\">  Sex     *<span class=\"keyword\">int</span>   <span class=\"string\">`json:&quot;sex,omitempty&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// now := time.Now()</span></span><br><span class=\"line\">  mOld := <span class=\"built_in\">new</span>(Old)</span><br><span class=\"line\">  <span class=\"comment\">// mOld.Time = now</span></span><br><span class=\"line\">  bOldData, mOldErr := json.Marshal(mOld)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> mOldErr != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    log.Fatalln(mOldErr.Error())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  log.Println(<span class=\"string\">&quot;old ==&gt; &quot;</span>, <span class=\"keyword\">string</span>(bOldData))</span><br><span class=\"line\">  mNew := <span class=\"built_in\">new</span>(New)</span><br><span class=\"line\">  <span class=\"comment\">// mNew.Time = now</span></span><br><span class=\"line\">  bNewData, mNewErr := json.Marshal(mNew)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> mNewErr != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    log.Fatalln(mOldErr.Error())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  log.Println(<span class=\"string\">&quot;new ==&gt; &quot;</span>, <span class=\"keyword\">string</span>(bNewData))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>输出结果如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">old &#x3D;&#x3D;&gt;  &#123;&quot;name&quot;:&quot;&quot;,&quot;age&quot;:0,&quot;address&quot;:&quot;&quot;,&quot;sex&quot;:null&#125;</span><br><span class=\"line\">new &#x3D;&#x3D;&gt;  &#123;&quot;address&quot;:&quot;&quot;&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>从结果中可以看到,tag中有omitempty修饰的字段,当其值是空值时,不会被序列化</p>\n<h3 id=\"02-可用”-“忽略某个字段-让其不加入序列化\"><a href=\"#02-可用”-“忽略某个字段-让其不加入序列化\" class=\"headerlink\" title=\"02.可用”-“忽略某个字段,让其不加入序列化\"></a>02.可用”-“忽略某个字段,让其不加入序列化</h3><p>在实际开发中,结构体中的有些字段需要在接口代码中使用,但是不想将其呈现在接口返回数据中.</p>\n<p>此时,我们可以在tag中使用”-“,将其忽略掉.倘若你的JSON对象的key是”-“,那么需要使用”-,”,达到不被屏蔽的效果.</p>\n<p>示例代码如下</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">  <span class=\"string\">&quot;encoding/json&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Old 原始结构</span></span><br><span class=\"line\">type Old struct &#123;</span><br><span class=\"line\">  Name    string `json:&quot;name&quot;`</span><br><span class=\"line\">  Age     int    `json:&quot;age&quot;`</span><br><span class=\"line\">  Address string `json:&quot;address&quot;`</span><br><span class=\"line\">  Sex     *int   `json:&quot;sex&quot;`</span><br><span class=\"line\">  Ignore  string `json:&quot;ignore&quot;`</span><br><span class=\"line\">  Dec     string `json:&quot;-&quot;`</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// New 改变结构</span></span><br><span class=\"line\">type New struct &#123;</span><br><span class=\"line\">  Name    string `json:&quot;name,omitempty&quot;`</span><br><span class=\"line\">  Age     int    `json:&quot;age,omitempty&quot;`</span><br><span class=\"line\">  Address string `json:&quot;address&quot;`</span><br><span class=\"line\">  Sex     *int   `json:&quot;sex,omitempty&quot;`</span><br><span class=\"line\">  Ignore  string `json:&quot;-&quot;`</span><br><span class=\"line\">  Dec     string `json:&quot;-,&quot;`</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">  <span class=\"comment\">// now := time.Now()</span></span><br><span class=\"line\">  mOld := new(Old)</span><br><span class=\"line\">  <span class=\"comment\">// mOld.Time = now</span></span><br><span class=\"line\">  bOldData, mOldErr := json.Marshal(mOld)</span><br><span class=\"line\">  if mOldErr != nil &#123;</span><br><span class=\"line\">    log.Fatalln(mOldErr.Error())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  fmt.Println(&quot;old ==&gt; &quot;, string(bOldData))</span><br><span class=\"line\">  mNew := new(New)</span><br><span class=\"line\">  <span class=\"comment\">// mNew.Time = now</span></span><br><span class=\"line\">  bNewData, mNewErr := json.Marshal(mNew)</span><br><span class=\"line\">  if mNewErr != nil &#123;</span><br><span class=\"line\">    log.Fatalln(mOldErr.Error())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  fmt.Println(&quot;new ==&gt; &quot;, string(bNewData))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>输出结果如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">old &#x3D;&#x3D;&gt;&#123;&quot;name&quot;:&quot;&quot;,&quot;age&quot;:0,&quot;address&quot;:&quot;&quot;,&quot;sex&quot;:null,&quot;ignore&quot;:&quot;&quot;&#125;</span><br><span class=\"line\">new &#x3D;&#x3D;&gt;&#123;&quot;address&quot;:&quot;&quot;,&quot;-&quot;:&quot;&quot;&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"03-通过实现json-Marshaler接口和json-Unmarshaler接口控制序列化\"><a href=\"#03-通过实现json-Marshaler接口和json-Unmarshaler接口控制序列化\" class=\"headerlink\" title=\"03.通过实现json.Marshaler接口和json.Unmarshaler接口控制序列化\"></a>03.通过实现json.Marshaler接口和json.Unmarshaler接口控制序列化</h3><p>在实际开发中,GO中的时间操作都是以time.Time为单位.但是,json在序列化时将time.Time序列化成了字符串,其格式为time.RFC3339Nano.反序列化时需要传递同等格式字符串才能被反序列化成时间对象.</p>\n<p>因为时区问题的存在,所以有关于时间,服务器以及上传参数中都是以UNIX时间戳的方式来表达时间.</p>\n<p>其实,以RFC3339Nano的形式返回时间,客户端也是能够转换时间到本地时间的.但是,怎奈习惯一经形成,想让别人改变.</p>\n<p>一般会回绝你四个字–”好麻烦啊”</p>\n<p>所以,以时间戳作为参数和返回数据中的时间,已经成为了一种常态.此时,我们可以通过实现json.Marshaler接口和json.Unmarshaler,来控制实例化.</p>\n<p><a href=\"https://www.yuansudong.top/2021/golang-interface/index.html\">GO之理解接口在开发中的应用</a></p>\n<p>而相关方法的生成,可通过编写protobuf的插件来达到避免每个结构体都要手写一次的体力活</p>\n<p>相关代码如下</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">  <span class=\"string\">&quot;encoding/json&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Old 原始结构</span></span><br><span class=\"line\">type Old struct &#123;</span><br><span class=\"line\">  Name    string    `json:&quot;name&quot;`</span><br><span class=\"line\">  Age     int       `json:&quot;age&quot;`</span><br><span class=\"line\">  Address string    `json:&quot;address&quot;`</span><br><span class=\"line\">  Sex     *int      `json:&quot;sex&quot;`</span><br><span class=\"line\">  Ignore  string    `json:&quot;ignore&quot;`</span><br><span class=\"line\">  Dec     string    `json:&quot;-&quot;`</span><br><span class=\"line\">  Time    time.Time `json:&quot;time&quot;`</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// New 该收</span></span><br><span class=\"line\">type New struct &#123;</span><br><span class=\"line\">  Name      string    `json:&quot;name,omitempty&quot;`</span><br><span class=\"line\">  Age       int       `json:&quot;age,omitempty&quot;`</span><br><span class=\"line\">  Address   string    `json:&quot;address&quot;`</span><br><span class=\"line\">  Sex       *int      `json:&quot;sex,omitempty&quot;`</span><br><span class=\"line\">  Ignore    string    `json:&quot;-&quot;`</span><br><span class=\"line\">  Dec       string    `json:&quot;-,&quot;`</span><br><span class=\"line\">  Time      time.Time `json:&quot;-&quot;`</span><br><span class=\"line\">  Timestamp int64     `json:&quot;timestamp&quot;`</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// UnmarshalJSON 用于反序列化JSON</span></span><br><span class=\"line\">func (n *New) UnmarshalJSON(data []byte) error &#123;</span><br><span class=\"line\">  type Alise New</span><br><span class=\"line\">  n1 := new(Alise)</span><br><span class=\"line\">  if err := json.Unmarshal(data, n1); err != nil &#123;</span><br><span class=\"line\">    log.Println(err.Error())</span><br><span class=\"line\">    return err</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  n1.Time = time.Unix(n1.Timestamp, 0)</span><br><span class=\"line\">  *n = *(*New)(n1)</span><br><span class=\"line\">  return nil</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// MarshalJSON 实现json.Marshaler</span></span><br><span class=\"line\">func (n *New) MarshalJSON() ([]byte, error) &#123;</span><br><span class=\"line\">  type Alise New</span><br><span class=\"line\">  n.Timestamp = n.Time.Unix()</span><br><span class=\"line\">  n1 := (*Alise)(n)</span><br><span class=\"line\">  return json.Marshal(n1)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">  now := time.Now()</span><br><span class=\"line\">  mOld := new(Old)</span><br><span class=\"line\">  mOld.Time = now</span><br><span class=\"line\">  bOldData, mOldErr := json.Marshal(mOld)</span><br><span class=\"line\">  if mOldErr != nil &#123;</span><br><span class=\"line\">    log.Fatalln(mOldErr.Error())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  fmt.Println(&quot;old ==&gt; &quot;, string(bOldData))</span><br><span class=\"line\">  mNew := new(New)</span><br><span class=\"line\">  mNew.Time = now</span><br><span class=\"line\">  bNewData, mNewErr := json.Marshal(mNew)</span><br><span class=\"line\">  if mNewErr != nil &#123;</span><br><span class=\"line\">    log.Fatalln(mOldErr.Error())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  fmt.Println(&quot;new ==&gt; &quot;, string(bNewData))</span><br><span class=\"line\">  mUnNew := new(New)</span><br><span class=\"line\">  json.Unmarshal([]byte(`&#123;&quot;address&quot;:&quot;erdads&quot;,&quot;-&quot;:&quot;&quot;,&quot;timestamp&quot;:1615315849&#125;`), mUnNew)</span><br><span class=\"line\">  fmt.Printf(&quot;%+v \\n&quot;, mUnNew)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>输出结果如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">old &#x3D;&#x3D;&gt;  &#123;&quot;name&quot;:&quot;&quot;,&quot;age&quot;:0,&quot;address&quot;:&quot;&quot;,&quot;sex&quot;:null,&quot;ignore&quot;:&quot;&quot;,&quot;time&quot;:&quot;2021-03-10T02:58:32.8308486+08:00&quot;&#125;</span><br><span class=\"line\">new &#x3D;&#x3D;&gt;  &#123;&quot;address&quot;:&quot;&quot;,&quot;-&quot;:&quot;&quot;,&quot;timestamp&quot;:1615316312&#125;</span><br><span class=\"line\">&amp;&#123;Name: Age:0 Address:erdads Sex:&lt;nil&gt; Ignore: Dec: Time:2021-03-10 02:50:49 +0800 CST Timestamp:1615315849&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"04-为什么在实现json-Marshaler和json-Unmarshaler时-需要起别名\"><a href=\"#04-为什么在实现json-Marshaler和json-Unmarshaler时-需要起别名\" class=\"headerlink\" title=\"04.为什么在实现json.Marshaler和json.Unmarshaler时,需要起别名\"></a>04.为什么在实现json.Marshaler和json.Unmarshaler时,需要起别名</h3><p>原因是,倘若还是使用New结构体,将New结构体放入json.Marshal()和json.Unmarshal() 这会导致无限递归.</p>\n<p>最终程序会出现下列错误,崩溃掉</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">runtime: goroutine stack exceeds 1000000000-byte limit</span><br><span class=\"line\">runtime: sp&#x3D;0xc020161388 stack&#x3D;[0xc020160000, 0xc040160000]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>通过定义 type Alise New 的形式该New重新定义了一个类型,该类型定义时,Alise会保留New中的所有字段,但是不会保留New中的方法,从而规避了无限递归.</p>\n","site":{"data":{"contact":[{"title":"github","icon":"icon-github","link":"https://github.com/yuansudong"},{"title":"email","icon":"icon-email","link":"mailto:1145919989@qq.com"},{"title":"qq","icon":"icon-qq","link":"/atom.xml"}],"favicons":["<link rel=\"shortcut icon\" href=\"/img//favicon.ico\">","<link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/img//favicon-16x16.png\">","<link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/img//favicon-32x32.png\">","<link rel=\"icon\" type=\"image/png\" sizes=\"48x48\" href=\"/img//favicon-48x48.png\">","<link rel=\"manifest\" href=\"/img//manifest.json\">","<meta name=\"mobile-web-app-capable\" content=\"yes\">","<meta name=\"theme-color\" content=\"#fff\">","<meta name=\"application-name\">","<link rel=\"apple-touch-icon\" sizes=\"57x57\" href=\"/img//apple-touch-icon-57x57.png\">","<link rel=\"apple-touch-icon\" sizes=\"60x60\" href=\"/img//apple-touch-icon-60x60.png\">","<link rel=\"apple-touch-icon\" sizes=\"72x72\" href=\"/img//apple-touch-icon-72x72.png\">","<link rel=\"apple-touch-icon\" sizes=\"76x76\" href=\"/img//apple-touch-icon-76x76.png\">","<link rel=\"apple-touch-icon\" sizes=\"114x114\" href=\"/img//apple-touch-icon-114x114.png\">","<link rel=\"apple-touch-icon\" sizes=\"120x120\" href=\"/img//apple-touch-icon-120x120.png\">","<link rel=\"apple-touch-icon\" sizes=\"144x144\" href=\"/img//apple-touch-icon-144x144.png\">","<link rel=\"apple-touch-icon\" sizes=\"152x152\" href=\"/img//apple-touch-icon-152x152.png\">","<link rel=\"apple-touch-icon\" sizes=\"167x167\" href=\"/img//apple-touch-icon-167x167.png\">","<link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/img//apple-touch-icon-180x180.png\">","<link rel=\"apple-touch-icon\" sizes=\"1024x1024\" href=\"/img//apple-touch-icon-1024x1024.png\">","<meta name=\"apple-mobile-web-app-capable\" content=\"yes\">","<meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black-translucent\">","<meta name=\"apple-mobile-web-app-title\">","<meta name=\"msapplication-TileColor\" content=\"#fff\">","<meta name=\"msapplication-TileImage\" content=\"/img//mstile-144x144.png\">","<meta name=\"msapplication-config\" content=\"/img//browserconfig.xml\">"]}},"excerpt":"","more":"<p>JSON（JavaScript Object Notation，JavaScript对象表示法）是一种由道格拉斯·克罗克福特构想和设计、轻量级的资料交换语言，该语言以易于让人阅读的文字为基础，用来传输由属性值或者序列性的值组成的数据对象。尽管JSON是JavaScript的一个子集，但JSON是独立于语言的文本格式，并且采用了类似于C语言家族的一些习惯。</p>\n<p>其应用领域广泛,常被用作web开发,API接口开发,配置文件,NoSQL数据库</p>\n<h2 id=\"1-基本类型\"><a href=\"#1-基本类型\" class=\"headerlink\" title=\"1.基本类型\"></a>1.基本类型</h2><p>JSON的基本数据类型有,数值,字符串,布尔值,数组,对象,null</p>\n<p>数值: 十进制,不能有前导0,可为负数,可为浮点数,亦可以有e或者E表示指数部分</p>\n<p>字符串: 以双引号””括起来的零个或多个Unicode码位,支持反斜杠开始的转义字符</p>\n<p>布尔值: 表示为true或者false</p>\n<p>数组: 有序的零个或者多个值.每个值可以为任意类型.其形式由[]括起来,元素只见用逗号隔开.</p>\n<p>对象: 由{}包括,若干个key-val组成.其K-V之间用:分隔.</p>\n<p>null类型: 其值为null</p>\n<h2 id=\"2-使用技巧\"><a href=\"#2-使用技巧\" class=\"headerlink\" title=\"2.使用技巧\"></a>2.使用技巧</h2><p>在GO开发中,JSON的定义常常与结构体相关,通过在结构体字段中的tag,达到控制JSON的目的</p>\n<h3 id=\"01-通过使用omitempty-当字段为默认值时-不序列化字段\"><a href=\"#01-通过使用omitempty-当字段为默认值时-不序列化字段\" class=\"headerlink\" title=\"01.通过使用omitempty,当字段为默认值时,不序列化字段\"></a>01.通过使用omitempty,当字段为默认值时,不序列化字段</h3><p>在API接口开发过程中,有些时候响应的JSON数据中,有些字段是默认值,比如0,””,null.</p>\n<p>为了避免流量消耗,对于这些默认值,可以在序列化时,将其抛弃.例子如下</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">&quot;encoding/json&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Old 原始结构</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Old <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  Name    <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;name&quot;`</span></span><br><span class=\"line\">  Age     <span class=\"keyword\">int</span>    <span class=\"string\">`json:&quot;age&quot;`</span></span><br><span class=\"line\">  Address <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;address&quot;`</span></span><br><span class=\"line\">  Sex     *<span class=\"keyword\">int</span>   <span class=\"string\">`json:&quot;sex&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// New 改变结构</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> New <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  Name    <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;name,omitempty&quot;`</span></span><br><span class=\"line\">  Age     <span class=\"keyword\">int</span>    <span class=\"string\">`json:&quot;age,omitempty&quot;`</span></span><br><span class=\"line\">  Address <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;address&quot;`</span></span><br><span class=\"line\">  Sex     *<span class=\"keyword\">int</span>   <span class=\"string\">`json:&quot;sex,omitempty&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// now := time.Now()</span></span><br><span class=\"line\">  mOld := <span class=\"built_in\">new</span>(Old)</span><br><span class=\"line\">  <span class=\"comment\">// mOld.Time = now</span></span><br><span class=\"line\">  bOldData, mOldErr := json.Marshal(mOld)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> mOldErr != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    log.Fatalln(mOldErr.Error())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  log.Println(<span class=\"string\">&quot;old ==&gt; &quot;</span>, <span class=\"keyword\">string</span>(bOldData))</span><br><span class=\"line\">  mNew := <span class=\"built_in\">new</span>(New)</span><br><span class=\"line\">  <span class=\"comment\">// mNew.Time = now</span></span><br><span class=\"line\">  bNewData, mNewErr := json.Marshal(mNew)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> mNewErr != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    log.Fatalln(mOldErr.Error())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  log.Println(<span class=\"string\">&quot;new ==&gt; &quot;</span>, <span class=\"keyword\">string</span>(bNewData))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>输出结果如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">old &#x3D;&#x3D;&gt;  &#123;&quot;name&quot;:&quot;&quot;,&quot;age&quot;:0,&quot;address&quot;:&quot;&quot;,&quot;sex&quot;:null&#125;</span><br><span class=\"line\">new &#x3D;&#x3D;&gt;  &#123;&quot;address&quot;:&quot;&quot;&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>从结果中可以看到,tag中有omitempty修饰的字段,当其值是空值时,不会被序列化</p>\n<h3 id=\"02-可用”-“忽略某个字段-让其不加入序列化\"><a href=\"#02-可用”-“忽略某个字段-让其不加入序列化\" class=\"headerlink\" title=\"02.可用”-“忽略某个字段,让其不加入序列化\"></a>02.可用”-“忽略某个字段,让其不加入序列化</h3><p>在实际开发中,结构体中的有些字段需要在接口代码中使用,但是不想将其呈现在接口返回数据中.</p>\n<p>此时,我们可以在tag中使用”-“,将其忽略掉.倘若你的JSON对象的key是”-“,那么需要使用”-,”,达到不被屏蔽的效果.</p>\n<p>示例代码如下</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">  <span class=\"string\">&quot;encoding/json&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Old 原始结构</span></span><br><span class=\"line\">type Old struct &#123;</span><br><span class=\"line\">  Name    string `json:&quot;name&quot;`</span><br><span class=\"line\">  Age     int    `json:&quot;age&quot;`</span><br><span class=\"line\">  Address string `json:&quot;address&quot;`</span><br><span class=\"line\">  Sex     *int   `json:&quot;sex&quot;`</span><br><span class=\"line\">  Ignore  string `json:&quot;ignore&quot;`</span><br><span class=\"line\">  Dec     string `json:&quot;-&quot;`</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// New 改变结构</span></span><br><span class=\"line\">type New struct &#123;</span><br><span class=\"line\">  Name    string `json:&quot;name,omitempty&quot;`</span><br><span class=\"line\">  Age     int    `json:&quot;age,omitempty&quot;`</span><br><span class=\"line\">  Address string `json:&quot;address&quot;`</span><br><span class=\"line\">  Sex     *int   `json:&quot;sex,omitempty&quot;`</span><br><span class=\"line\">  Ignore  string `json:&quot;-&quot;`</span><br><span class=\"line\">  Dec     string `json:&quot;-,&quot;`</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">  <span class=\"comment\">// now := time.Now()</span></span><br><span class=\"line\">  mOld := new(Old)</span><br><span class=\"line\">  <span class=\"comment\">// mOld.Time = now</span></span><br><span class=\"line\">  bOldData, mOldErr := json.Marshal(mOld)</span><br><span class=\"line\">  if mOldErr != nil &#123;</span><br><span class=\"line\">    log.Fatalln(mOldErr.Error())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  fmt.Println(&quot;old ==&gt; &quot;, string(bOldData))</span><br><span class=\"line\">  mNew := new(New)</span><br><span class=\"line\">  <span class=\"comment\">// mNew.Time = now</span></span><br><span class=\"line\">  bNewData, mNewErr := json.Marshal(mNew)</span><br><span class=\"line\">  if mNewErr != nil &#123;</span><br><span class=\"line\">    log.Fatalln(mOldErr.Error())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  fmt.Println(&quot;new ==&gt; &quot;, string(bNewData))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>输出结果如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">old &#x3D;&#x3D;&gt;&#123;&quot;name&quot;:&quot;&quot;,&quot;age&quot;:0,&quot;address&quot;:&quot;&quot;,&quot;sex&quot;:null,&quot;ignore&quot;:&quot;&quot;&#125;</span><br><span class=\"line\">new &#x3D;&#x3D;&gt;&#123;&quot;address&quot;:&quot;&quot;,&quot;-&quot;:&quot;&quot;&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"03-通过实现json-Marshaler接口和json-Unmarshaler接口控制序列化\"><a href=\"#03-通过实现json-Marshaler接口和json-Unmarshaler接口控制序列化\" class=\"headerlink\" title=\"03.通过实现json.Marshaler接口和json.Unmarshaler接口控制序列化\"></a>03.通过实现json.Marshaler接口和json.Unmarshaler接口控制序列化</h3><p>在实际开发中,GO中的时间操作都是以time.Time为单位.但是,json在序列化时将time.Time序列化成了字符串,其格式为time.RFC3339Nano.反序列化时需要传递同等格式字符串才能被反序列化成时间对象.</p>\n<p>因为时区问题的存在,所以有关于时间,服务器以及上传参数中都是以UNIX时间戳的方式来表达时间.</p>\n<p>其实,以RFC3339Nano的形式返回时间,客户端也是能够转换时间到本地时间的.但是,怎奈习惯一经形成,想让别人改变.</p>\n<p>一般会回绝你四个字–”好麻烦啊”</p>\n<p>所以,以时间戳作为参数和返回数据中的时间,已经成为了一种常态.此时,我们可以通过实现json.Marshaler接口和json.Unmarshaler,来控制实例化.</p>\n<p><a href=\"https://www.yuansudong.top/2021/golang-interface/index.html\">GO之理解接口在开发中的应用</a></p>\n<p>而相关方法的生成,可通过编写protobuf的插件来达到避免每个结构体都要手写一次的体力活</p>\n<p>相关代码如下</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">  <span class=\"string\">&quot;encoding/json&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Old 原始结构</span></span><br><span class=\"line\">type Old struct &#123;</span><br><span class=\"line\">  Name    string    `json:&quot;name&quot;`</span><br><span class=\"line\">  Age     int       `json:&quot;age&quot;`</span><br><span class=\"line\">  Address string    `json:&quot;address&quot;`</span><br><span class=\"line\">  Sex     *int      `json:&quot;sex&quot;`</span><br><span class=\"line\">  Ignore  string    `json:&quot;ignore&quot;`</span><br><span class=\"line\">  Dec     string    `json:&quot;-&quot;`</span><br><span class=\"line\">  Time    time.Time `json:&quot;time&quot;`</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// New 该收</span></span><br><span class=\"line\">type New struct &#123;</span><br><span class=\"line\">  Name      string    `json:&quot;name,omitempty&quot;`</span><br><span class=\"line\">  Age       int       `json:&quot;age,omitempty&quot;`</span><br><span class=\"line\">  Address   string    `json:&quot;address&quot;`</span><br><span class=\"line\">  Sex       *int      `json:&quot;sex,omitempty&quot;`</span><br><span class=\"line\">  Ignore    string    `json:&quot;-&quot;`</span><br><span class=\"line\">  Dec       string    `json:&quot;-,&quot;`</span><br><span class=\"line\">  Time      time.Time `json:&quot;-&quot;`</span><br><span class=\"line\">  Timestamp int64     `json:&quot;timestamp&quot;`</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// UnmarshalJSON 用于反序列化JSON</span></span><br><span class=\"line\">func (n *New) UnmarshalJSON(data []byte) error &#123;</span><br><span class=\"line\">  type Alise New</span><br><span class=\"line\">  n1 := new(Alise)</span><br><span class=\"line\">  if err := json.Unmarshal(data, n1); err != nil &#123;</span><br><span class=\"line\">    log.Println(err.Error())</span><br><span class=\"line\">    return err</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  n1.Time = time.Unix(n1.Timestamp, 0)</span><br><span class=\"line\">  *n = *(*New)(n1)</span><br><span class=\"line\">  return nil</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// MarshalJSON 实现json.Marshaler</span></span><br><span class=\"line\">func (n *New) MarshalJSON() ([]byte, error) &#123;</span><br><span class=\"line\">  type Alise New</span><br><span class=\"line\">  n.Timestamp = n.Time.Unix()</span><br><span class=\"line\">  n1 := (*Alise)(n)</span><br><span class=\"line\">  return json.Marshal(n1)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">  now := time.Now()</span><br><span class=\"line\">  mOld := new(Old)</span><br><span class=\"line\">  mOld.Time = now</span><br><span class=\"line\">  bOldData, mOldErr := json.Marshal(mOld)</span><br><span class=\"line\">  if mOldErr != nil &#123;</span><br><span class=\"line\">    log.Fatalln(mOldErr.Error())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  fmt.Println(&quot;old ==&gt; &quot;, string(bOldData))</span><br><span class=\"line\">  mNew := new(New)</span><br><span class=\"line\">  mNew.Time = now</span><br><span class=\"line\">  bNewData, mNewErr := json.Marshal(mNew)</span><br><span class=\"line\">  if mNewErr != nil &#123;</span><br><span class=\"line\">    log.Fatalln(mOldErr.Error())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  fmt.Println(&quot;new ==&gt; &quot;, string(bNewData))</span><br><span class=\"line\">  mUnNew := new(New)</span><br><span class=\"line\">  json.Unmarshal([]byte(`&#123;&quot;address&quot;:&quot;erdads&quot;,&quot;-&quot;:&quot;&quot;,&quot;timestamp&quot;:1615315849&#125;`), mUnNew)</span><br><span class=\"line\">  fmt.Printf(&quot;%+v \\n&quot;, mUnNew)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>输出结果如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">old &#x3D;&#x3D;&gt;  &#123;&quot;name&quot;:&quot;&quot;,&quot;age&quot;:0,&quot;address&quot;:&quot;&quot;,&quot;sex&quot;:null,&quot;ignore&quot;:&quot;&quot;,&quot;time&quot;:&quot;2021-03-10T02:58:32.8308486+08:00&quot;&#125;</span><br><span class=\"line\">new &#x3D;&#x3D;&gt;  &#123;&quot;address&quot;:&quot;&quot;,&quot;-&quot;:&quot;&quot;,&quot;timestamp&quot;:1615316312&#125;</span><br><span class=\"line\">&amp;&#123;Name: Age:0 Address:erdads Sex:&lt;nil&gt; Ignore: Dec: Time:2021-03-10 02:50:49 +0800 CST Timestamp:1615315849&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"04-为什么在实现json-Marshaler和json-Unmarshaler时-需要起别名\"><a href=\"#04-为什么在实现json-Marshaler和json-Unmarshaler时-需要起别名\" class=\"headerlink\" title=\"04.为什么在实现json.Marshaler和json.Unmarshaler时,需要起别名\"></a>04.为什么在实现json.Marshaler和json.Unmarshaler时,需要起别名</h3><p>原因是,倘若还是使用New结构体,将New结构体放入json.Marshal()和json.Unmarshal() 这会导致无限递归.</p>\n<p>最终程序会出现下列错误,崩溃掉</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">runtime: goroutine stack exceeds 1000000000-byte limit</span><br><span class=\"line\">runtime: sp&#x3D;0xc020161388 stack&#x3D;[0xc020160000, 0xc040160000]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>通过定义 type Alise New 的形式该New重新定义了一个类型,该类型定义时,Alise会保留New中的所有字段,但是不会保留New中的方法,从而规避了无限递归.</p>\n"},{"title":"Hello World","subtitle":"人生若如初见,何时秋风悲画扇,等闲却道故人心,却道故人心意变","author":{"nick":"袁苏东","link":"https://github.com/yuansudong"},"_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world2.md","raw":"---\ntitle: Hello World\nsubtitle: 人生若如初见,何时秋风悲画扇,等闲却道故人心,却道故人心意变\ncategories: \"GO语言\"\ntags: \"Go语言\"\nauthor:\n  nick: 袁苏东\n  link: https://github.com/yuansudong\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world2","published":1,"date":"2021-03-15T12:18:05.807Z","updated":"2021-03-15T12:19:35.537Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmchg4ii000c7gvl7hv7dpj9","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{"contact":[{"title":"github","icon":"icon-github","link":"https://github.com/yuansudong"},{"title":"email","icon":"icon-email","link":"mailto:1145919989@qq.com"},{"title":"qq","icon":"icon-qq","link":"/atom.xml"}],"favicons":["<link rel=\"shortcut icon\" href=\"/img//favicon.ico\">","<link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/img//favicon-16x16.png\">","<link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/img//favicon-32x32.png\">","<link rel=\"icon\" type=\"image/png\" sizes=\"48x48\" href=\"/img//favicon-48x48.png\">","<link rel=\"manifest\" href=\"/img//manifest.json\">","<meta name=\"mobile-web-app-capable\" content=\"yes\">","<meta name=\"theme-color\" content=\"#fff\">","<meta name=\"application-name\">","<link rel=\"apple-touch-icon\" sizes=\"57x57\" href=\"/img//apple-touch-icon-57x57.png\">","<link rel=\"apple-touch-icon\" sizes=\"60x60\" href=\"/img//apple-touch-icon-60x60.png\">","<link rel=\"apple-touch-icon\" sizes=\"72x72\" href=\"/img//apple-touch-icon-72x72.png\">","<link rel=\"apple-touch-icon\" sizes=\"76x76\" href=\"/img//apple-touch-icon-76x76.png\">","<link rel=\"apple-touch-icon\" sizes=\"114x114\" href=\"/img//apple-touch-icon-114x114.png\">","<link rel=\"apple-touch-icon\" sizes=\"120x120\" href=\"/img//apple-touch-icon-120x120.png\">","<link rel=\"apple-touch-icon\" sizes=\"144x144\" href=\"/img//apple-touch-icon-144x144.png\">","<link rel=\"apple-touch-icon\" sizes=\"152x152\" href=\"/img//apple-touch-icon-152x152.png\">","<link rel=\"apple-touch-icon\" sizes=\"167x167\" href=\"/img//apple-touch-icon-167x167.png\">","<link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/img//apple-touch-icon-180x180.png\">","<link rel=\"apple-touch-icon\" sizes=\"1024x1024\" href=\"/img//apple-touch-icon-1024x1024.png\">","<meta name=\"apple-mobile-web-app-capable\" content=\"yes\">","<meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black-translucent\">","<meta name=\"apple-mobile-web-app-title\">","<meta name=\"msapplication-TileColor\" content=\"#fff\">","<meta name=\"msapplication-TileImage\" content=\"/img//mstile-144x144.png\">","<meta name=\"msapplication-config\" content=\"/img//browserconfig.xml\">"]}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"Hello World","subtitle":"人生若如初见,何时秋风悲画扇,等闲却道故人心,却道故人心意变","author":{"nick":"袁苏东","link":"https://github.com/yuansudong"},"typora-root-url":"hello-world","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n\n\n\n```sequence\nA --> B: hello\n```\n\n\n\n\n\n人生若如插件\n\n```mermaid\ngraph TD;\n    1[protoc解析处理] --> 2[拷贝经过protbuf序列化之后的二进制到标准输出]\n    2 --> 3[自定义插件 protoc-gen-template]\n    3 --> 4[从标准输出读取protobuf的二进制数据]\n    4 --> 5[通过protobuf相关的库进行反序列化,比如,proto.Unmarshal]\n    5 --> 6[反序列化之后,会获得plugin.CodeGeneratorRequest]    \n```\n\n\n\n\n![image-20210315203750702](/image-20210315203750702.png)","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\nsubtitle: 人生若如初见,何时秋风悲画扇,等闲却道故人心,却道故人心意变\ncategories: \"技术场景\"\ntags: \"技术场景\"\nauthor:\n  nick: 袁苏东\n  link: https://github.com/yuansudong\ntypora-root-url: hello-world\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n\n\n\n```sequence\nA --> B: hello\n```\n\n\n\n\n\n人生若如插件\n\n```mermaid\ngraph TD;\n    1[protoc解析处理] --> 2[拷贝经过protbuf序列化之后的二进制到标准输出]\n    2 --> 3[自定义插件 protoc-gen-template]\n    3 --> 4[从标准输出读取protobuf的二进制数据]\n    4 --> 5[通过protobuf相关的库进行反序列化,比如,proto.Unmarshal]\n    5 --> 6[反序列化之后,会获得plugin.CodeGeneratorRequest]    \n```\n\n\n\n\n![image-20210315203750702](/image-20210315203750702.png)","slug":"hello-world","published":1,"date":"2021-03-15T09:15:36.166Z","updated":"2021-03-15T13:02:26.566Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmchg4im000h7gvl9kw9625p","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A --&gt; B: hello</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>人生若如插件</p>\n<pre class=\"mermaid\">graph TD;\n    1[protoc解析处理] --> 2[拷贝经过protbuf序列化之后的二进制到标准输出]\n    2 --> 3[自定义插件 protoc-gen-template]\n    3 --> 4[从标准输出读取protobuf的二进制数据]\n    4 --> 5[通过protobuf相关的库进行反序列化,比如,proto.Unmarshal]\n    5 --> 6[反序列化之后,会获得plugin.CodeGeneratorRequest]</pre>\n\n\n\n\n<p><img src=\"/2021/hello-world/index/image-20210315203750702.png\" alt=\"image-20210315203750702\"></p>\n","site":{"data":{"contact":[{"title":"github","icon":"icon-github","link":"https://github.com/yuansudong"},{"title":"email","icon":"icon-email","link":"mailto:1145919989@qq.com"},{"title":"qq","icon":"icon-qq","link":"/atom.xml"}],"favicons":["<link rel=\"shortcut icon\" href=\"/img//favicon.ico\">","<link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/img//favicon-16x16.png\">","<link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/img//favicon-32x32.png\">","<link rel=\"icon\" type=\"image/png\" sizes=\"48x48\" href=\"/img//favicon-48x48.png\">","<link rel=\"manifest\" href=\"/img//manifest.json\">","<meta name=\"mobile-web-app-capable\" content=\"yes\">","<meta name=\"theme-color\" content=\"#fff\">","<meta name=\"application-name\">","<link rel=\"apple-touch-icon\" sizes=\"57x57\" href=\"/img//apple-touch-icon-57x57.png\">","<link rel=\"apple-touch-icon\" sizes=\"60x60\" href=\"/img//apple-touch-icon-60x60.png\">","<link rel=\"apple-touch-icon\" sizes=\"72x72\" href=\"/img//apple-touch-icon-72x72.png\">","<link rel=\"apple-touch-icon\" sizes=\"76x76\" href=\"/img//apple-touch-icon-76x76.png\">","<link rel=\"apple-touch-icon\" sizes=\"114x114\" href=\"/img//apple-touch-icon-114x114.png\">","<link rel=\"apple-touch-icon\" sizes=\"120x120\" href=\"/img//apple-touch-icon-120x120.png\">","<link rel=\"apple-touch-icon\" sizes=\"144x144\" href=\"/img//apple-touch-icon-144x144.png\">","<link rel=\"apple-touch-icon\" sizes=\"152x152\" href=\"/img//apple-touch-icon-152x152.png\">","<link rel=\"apple-touch-icon\" sizes=\"167x167\" href=\"/img//apple-touch-icon-167x167.png\">","<link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/img//apple-touch-icon-180x180.png\">","<link rel=\"apple-touch-icon\" sizes=\"1024x1024\" href=\"/img//apple-touch-icon-1024x1024.png\">","<meta name=\"apple-mobile-web-app-capable\" content=\"yes\">","<meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black-translucent\">","<meta name=\"apple-mobile-web-app-title\">","<meta name=\"msapplication-TileColor\" content=\"#fff\">","<meta name=\"msapplication-TileImage\" content=\"/img//mstile-144x144.png\">","<meta name=\"msapplication-config\" content=\"/img//browserconfig.xml\">"]}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A --&gt; B: hello</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>人生若如插件</p>\n<pre class=\"mermaid\">graph TD;\n    1[protoc解析处理] --> 2[拷贝经过protbuf序列化之后的二进制到标准输出]\n    2 --> 3[自定义插件 protoc-gen-template]\n    3 --> 4[从标准输出读取protobuf的二进制数据]\n    4 --> 5[通过protobuf相关的库进行反序列化,比如,proto.Unmarshal]\n    5 --> 6[反序列化之后,会获得plugin.CodeGeneratorRequest]</pre>\n\n\n\n\n<p><img src=\"/2021/hello-world/index/image-20210315203750702.png\" alt=\"image-20210315203750702\"></p>\n"},{"title":"企业网络之部署DNS","cover":"/img/network-deploy/dns_title.png","subtitle":"企业网络之部署DNS","author":{"nick":"袁苏东","link":"https://github.com/yuansudong"},"typora-root-url":"network-deploy-dns","_content":"### 01.通过yum源安装bind服务\n\n\n\n```bash\nyum -y install bind bind-utils bind-chroot\n```\n\n\n\n### 02.修改/etc/named.conf\n\n\n\n```shell\noptions {        \n\tlisten-on port 53 { any; }; // 此处要替换为any        \n\tlisten-on-v6 port 53 { ::1; };        \n\tdirectory       \"/var/named\"; // 域名目录        \n\tdump-file       \"/var/named/data/cache_dump.db\";        \n\tstatistics-file \"/var/named/data/named_stats.txt\";        \n\tmemstatistics-file \"/var/named/data/named_mem_stats.txt\";        \n\tsecroots-file   \"/var/named/data/named.secroots\";        \n\trecursing-file  \"/var/named/data/named.recursing\";        \n\tallow-query     { any; };  // 需要替换为any        \n\tforwarders      { 180.76.76.76; }; // 此处替换为一个公共的dns,比如百度或者阿里        \n\trecursion yes;        \n\tdnssec-enable no; // 需要和值为no,否则查询会很慢        \n\tdnssec-validation no; // 需要设置为no,否则查询会很慢        \n\tmanaged-keys-directory \"/var/named/dynamic\";        \n\tpid-file \"/run/named/named.pid\";        \n\tsession-keyfile \"/run/named/session.key\";        \n\tinclude \"/etc/crypto-policies/back-ends/bind.config\";};\n\tlogging {        \n\t\tchannel default_debug {\n        \tfile \"data/named.run\"; // 日志文件                \n        \tseverity dynamic;        \n        \t};\n     };\n     zone \".\" IN {        \n     \ttype hint;        \n     \tfile \"named.ca\";\n     };\n     include \"/etc/named.rfc1912.zones\";\n     include \"/etc/named.root.key\";\n```\n\n\n\n### 03.增加域名\n\n\n\n此时,需要在/etc/named.rfc1912.zones下,增加公司的域名.此处以hfdy.com为例\n\n```shell\nzone \"hfdy.com\" IN {     \n\ttype master;        \n\tfile \"hfdy.com.zone\";\n};\n```\n\n\n\n### 04.配置域名\n\n\n\n```\ntouch /var/named/hfdy.com.zonevim /var/named/hfdy.com.zone# 将下列内容复制进named.hfdy文件中\n```\n\n```\n$ORIGIN hfdy.com.$TTL 600        ; 10 minutes@    IN SOA dns.hfdy.com. dnsadmin.hfdy.com. (                                                2020060230  ;serial 每次更改都需要更改这个时间                                                10800    ;refresh 每三个小时刷新一次                                                900    ;每15分钟重试一次                                                604800      ;1周过期                                                86400    ;1 天更新                                               )                                             NS    dns.hfdy.com.$TTL  60   ; 1分钟过期\nwww            A     192.168.0.198\ndns            A     192.168.0.198\nredis          A     192.168.0.198\ngit            A     192.168.0.198\nhub            A     192.168.0.198\nfile           A     192.168.0.198\nsql            A     192.168.0.198\nes01           A     192.168.0.198\nftp            A     192.168.0.198\ncloud          A     192.168.0.198\npay            A     192.168.0.198\nauth           A     192.168.0.198\naccount        A     192.168.0.198\nmysql-dev      A     192.168.0.198\nmysql-models   A     192.168.0.198\ndoc            A     192.168.0.198\nsui            A     192.168.0.198\nsed            A     192.168.0.198\nnodes          A     192.168.0.198\nchess          A     192.168.0.198\nemail          A     192.168.0.198\nim             A     192.168.0.198\ngrpc           A     192.168.0.198\ngid            A     192.168.0.198\napi            A     192.168.0.198\njks            A     192.168.0.198\n```\n\n\n\n### 05.重启+开机启动\n\n\n\n```shell\nsudo systemctl restart named\nsudo systemctl enable named\n```","source":"_posts/network-deploy-dns.md","raw":"---\ntitle: 企业网络之部署DNS\ncover:  /img/network-deploy/dns_title.png\nsubtitle: 企业网络之部署DNS\ncategories: \"企业网络\"\ntags: \"企业网络\"\nauthor:\n  nick: 袁苏东\n  link: https://github.com/yuansudong\ntypora-root-url: network-deploy-dns\n---\n### 01.通过yum源安装bind服务\n\n\n\n```bash\nyum -y install bind bind-utils bind-chroot\n```\n\n\n\n### 02.修改/etc/named.conf\n\n\n\n```shell\noptions {        \n\tlisten-on port 53 { any; }; // 此处要替换为any        \n\tlisten-on-v6 port 53 { ::1; };        \n\tdirectory       \"/var/named\"; // 域名目录        \n\tdump-file       \"/var/named/data/cache_dump.db\";        \n\tstatistics-file \"/var/named/data/named_stats.txt\";        \n\tmemstatistics-file \"/var/named/data/named_mem_stats.txt\";        \n\tsecroots-file   \"/var/named/data/named.secroots\";        \n\trecursing-file  \"/var/named/data/named.recursing\";        \n\tallow-query     { any; };  // 需要替换为any        \n\tforwarders      { 180.76.76.76; }; // 此处替换为一个公共的dns,比如百度或者阿里        \n\trecursion yes;        \n\tdnssec-enable no; // 需要和值为no,否则查询会很慢        \n\tdnssec-validation no; // 需要设置为no,否则查询会很慢        \n\tmanaged-keys-directory \"/var/named/dynamic\";        \n\tpid-file \"/run/named/named.pid\";        \n\tsession-keyfile \"/run/named/session.key\";        \n\tinclude \"/etc/crypto-policies/back-ends/bind.config\";};\n\tlogging {        \n\t\tchannel default_debug {\n        \tfile \"data/named.run\"; // 日志文件                \n        \tseverity dynamic;        \n        \t};\n     };\n     zone \".\" IN {        \n     \ttype hint;        \n     \tfile \"named.ca\";\n     };\n     include \"/etc/named.rfc1912.zones\";\n     include \"/etc/named.root.key\";\n```\n\n\n\n### 03.增加域名\n\n\n\n此时,需要在/etc/named.rfc1912.zones下,增加公司的域名.此处以hfdy.com为例\n\n```shell\nzone \"hfdy.com\" IN {     \n\ttype master;        \n\tfile \"hfdy.com.zone\";\n};\n```\n\n\n\n### 04.配置域名\n\n\n\n```\ntouch /var/named/hfdy.com.zonevim /var/named/hfdy.com.zone# 将下列内容复制进named.hfdy文件中\n```\n\n```\n$ORIGIN hfdy.com.$TTL 600        ; 10 minutes@    IN SOA dns.hfdy.com. dnsadmin.hfdy.com. (                                                2020060230  ;serial 每次更改都需要更改这个时间                                                10800    ;refresh 每三个小时刷新一次                                                900    ;每15分钟重试一次                                                604800      ;1周过期                                                86400    ;1 天更新                                               )                                             NS    dns.hfdy.com.$TTL  60   ; 1分钟过期\nwww            A     192.168.0.198\ndns            A     192.168.0.198\nredis          A     192.168.0.198\ngit            A     192.168.0.198\nhub            A     192.168.0.198\nfile           A     192.168.0.198\nsql            A     192.168.0.198\nes01           A     192.168.0.198\nftp            A     192.168.0.198\ncloud          A     192.168.0.198\npay            A     192.168.0.198\nauth           A     192.168.0.198\naccount        A     192.168.0.198\nmysql-dev      A     192.168.0.198\nmysql-models   A     192.168.0.198\ndoc            A     192.168.0.198\nsui            A     192.168.0.198\nsed            A     192.168.0.198\nnodes          A     192.168.0.198\nchess          A     192.168.0.198\nemail          A     192.168.0.198\nim             A     192.168.0.198\ngrpc           A     192.168.0.198\ngid            A     192.168.0.198\napi            A     192.168.0.198\njks            A     192.168.0.198\n```\n\n\n\n### 05.重启+开机启动\n\n\n\n```shell\nsudo systemctl restart named\nsudo systemctl enable named\n```","slug":"network-deploy-dns","published":1,"date":"2021-03-15T15:42:33.953Z","updated":"2021-03-16T20:56:30.056Z","_id":"ckmchg4iq000i7gvl3l0baufn","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"01-通过yum源安装bind服务\"><a href=\"#01-通过yum源安装bind服务\" class=\"headerlink\" title=\"01.通过yum源安装bind服务\"></a>01.通过yum源安装bind服务</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install <span class=\"built_in\">bind</span> bind-utils bind-chroot</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"02-修改-etc-named-conf\"><a href=\"#02-修改-etc-named-conf\" class=\"headerlink\" title=\"02.修改/etc/named.conf\"></a>02.修改/etc/named.conf</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">options &#123;        </span><br><span class=\"line\">\tlisten-on port 53 &#123; any; &#125;; // 此处要替换为any        </span><br><span class=\"line\">\tlisten-on-v6 port 53 &#123; ::1; &#125;;        </span><br><span class=\"line\">\tdirectory       &quot;/var/named&quot;; // 域名目录        </span><br><span class=\"line\">\tdump-file       &quot;/var/named/data/cache_dump.db&quot;;        </span><br><span class=\"line\">\tstatistics-file &quot;/var/named/data/named_stats.txt&quot;;        </span><br><span class=\"line\">\tmemstatistics-file &quot;/var/named/data/named_mem_stats.txt&quot;;        </span><br><span class=\"line\">\tsecroots-file   &quot;/var/named/data/named.secroots&quot;;        </span><br><span class=\"line\">\trecursing-file  &quot;/var/named/data/named.recursing&quot;;        </span><br><span class=\"line\">\tallow-query     &#123; any; &#125;;  // 需要替换为any        </span><br><span class=\"line\">\tforwarders      &#123; 180.76.76.76; &#125;; // 此处替换为一个公共的dns,比如百度或者阿里        </span><br><span class=\"line\">\trecursion yes;        </span><br><span class=\"line\">\tdnssec-enable no; // 需要和值为no,否则查询会很慢        </span><br><span class=\"line\">\tdnssec-validation no; // 需要设置为no,否则查询会很慢        </span><br><span class=\"line\">\tmanaged-keys-directory &quot;/var/named/dynamic&quot;;        </span><br><span class=\"line\">\tpid-file &quot;/run/named/named.pid&quot;;        </span><br><span class=\"line\">\tsession-keyfile &quot;/run/named/session.key&quot;;        </span><br><span class=\"line\">\tinclude &quot;/etc/crypto-policies/back-ends/bind.config&quot;;&#125;;</span><br><span class=\"line\">\tlogging &#123;        </span><br><span class=\"line\">\t\tchannel default_debug &#123;</span><br><span class=\"line\">        \tfile &quot;data/named.run&quot;; // 日志文件                </span><br><span class=\"line\">        \tseverity dynamic;        </span><br><span class=\"line\">        \t&#125;;</span><br><span class=\"line\">     &#125;;</span><br><span class=\"line\">     zone &quot;.&quot; IN &#123;        </span><br><span class=\"line\">     \ttype hint;        </span><br><span class=\"line\">     \tfile &quot;named.ca&quot;;</span><br><span class=\"line\">     &#125;;</span><br><span class=\"line\">     include &quot;/etc/named.rfc1912.zones&quot;;</span><br><span class=\"line\">     include &quot;/etc/named.root.key&quot;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"03-增加域名\"><a href=\"#03-增加域名\" class=\"headerlink\" title=\"03.增加域名\"></a>03.增加域名</h3><p>此时,需要在/etc/named.rfc1912.zones下,增加公司的域名.此处以hfdy.com为例</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zone &quot;hfdy.com&quot; IN &#123;     </span><br><span class=\"line\">\ttype master;        </span><br><span class=\"line\">\tfile &quot;hfdy.com.zone&quot;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"04-配置域名\"><a href=\"#04-配置域名\" class=\"headerlink\" title=\"04.配置域名\"></a>04.配置域名</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch &#x2F;var&#x2F;named&#x2F;hfdy.com.zonevim &#x2F;var&#x2F;named&#x2F;hfdy.com.zone# 将下列内容复制进named.hfdy文件中</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ORIGIN hfdy.com.$TTL 600        ; 10 minutes@    IN SOA dns.hfdy.com. dnsadmin.hfdy.com. (                                                2020060230  ;serial 每次更改都需要更改这个时间                                                10800    ;refresh 每三个小时刷新一次                                                900    ;每15分钟重试一次                                                604800      ;1周过期                                                86400    ;1 天更新                                               )                                             NS    dns.hfdy.com.$TTL  60   ; 1分钟过期</span><br><span class=\"line\">www            A     192.168.0.198</span><br><span class=\"line\">dns            A     192.168.0.198</span><br><span class=\"line\">redis          A     192.168.0.198</span><br><span class=\"line\">git            A     192.168.0.198</span><br><span class=\"line\">hub            A     192.168.0.198</span><br><span class=\"line\">file           A     192.168.0.198</span><br><span class=\"line\">sql            A     192.168.0.198</span><br><span class=\"line\">es01           A     192.168.0.198</span><br><span class=\"line\">ftp            A     192.168.0.198</span><br><span class=\"line\">cloud          A     192.168.0.198</span><br><span class=\"line\">pay            A     192.168.0.198</span><br><span class=\"line\">auth           A     192.168.0.198</span><br><span class=\"line\">account        A     192.168.0.198</span><br><span class=\"line\">mysql-dev      A     192.168.0.198</span><br><span class=\"line\">mysql-models   A     192.168.0.198</span><br><span class=\"line\">doc            A     192.168.0.198</span><br><span class=\"line\">sui            A     192.168.0.198</span><br><span class=\"line\">sed            A     192.168.0.198</span><br><span class=\"line\">nodes          A     192.168.0.198</span><br><span class=\"line\">chess          A     192.168.0.198</span><br><span class=\"line\">email          A     192.168.0.198</span><br><span class=\"line\">im             A     192.168.0.198</span><br><span class=\"line\">grpc           A     192.168.0.198</span><br><span class=\"line\">gid            A     192.168.0.198</span><br><span class=\"line\">api            A     192.168.0.198</span><br><span class=\"line\">jks            A     192.168.0.198</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"05-重启-开机启动\"><a href=\"#05-重启-开机启动\" class=\"headerlink\" title=\"05.重启+开机启动\"></a>05.重启+开机启动</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart named</span><br><span class=\"line\">sudo systemctl enable named</span><br></pre></td></tr></table></figure>","site":{"data":{"contact":[{"title":"github","icon":"icon-github","link":"https://github.com/yuansudong"},{"title":"email","icon":"icon-email","link":"mailto:1145919989@qq.com"},{"title":"qq","icon":"icon-qq","link":"/atom.xml"}],"favicons":["<link rel=\"shortcut icon\" href=\"/img//favicon.ico\">","<link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/img//favicon-16x16.png\">","<link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/img//favicon-32x32.png\">","<link rel=\"icon\" type=\"image/png\" sizes=\"48x48\" href=\"/img//favicon-48x48.png\">","<link rel=\"manifest\" href=\"/img//manifest.json\">","<meta name=\"mobile-web-app-capable\" content=\"yes\">","<meta name=\"theme-color\" content=\"#fff\">","<meta name=\"application-name\">","<link rel=\"apple-touch-icon\" sizes=\"57x57\" href=\"/img//apple-touch-icon-57x57.png\">","<link rel=\"apple-touch-icon\" sizes=\"60x60\" href=\"/img//apple-touch-icon-60x60.png\">","<link rel=\"apple-touch-icon\" sizes=\"72x72\" href=\"/img//apple-touch-icon-72x72.png\">","<link rel=\"apple-touch-icon\" sizes=\"76x76\" href=\"/img//apple-touch-icon-76x76.png\">","<link rel=\"apple-touch-icon\" sizes=\"114x114\" href=\"/img//apple-touch-icon-114x114.png\">","<link rel=\"apple-touch-icon\" sizes=\"120x120\" href=\"/img//apple-touch-icon-120x120.png\">","<link rel=\"apple-touch-icon\" sizes=\"144x144\" href=\"/img//apple-touch-icon-144x144.png\">","<link rel=\"apple-touch-icon\" sizes=\"152x152\" href=\"/img//apple-touch-icon-152x152.png\">","<link rel=\"apple-touch-icon\" sizes=\"167x167\" href=\"/img//apple-touch-icon-167x167.png\">","<link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/img//apple-touch-icon-180x180.png\">","<link rel=\"apple-touch-icon\" sizes=\"1024x1024\" href=\"/img//apple-touch-icon-1024x1024.png\">","<meta name=\"apple-mobile-web-app-capable\" content=\"yes\">","<meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black-translucent\">","<meta name=\"apple-mobile-web-app-title\">","<meta name=\"msapplication-TileColor\" content=\"#fff\">","<meta name=\"msapplication-TileImage\" content=\"/img//mstile-144x144.png\">","<meta name=\"msapplication-config\" content=\"/img//browserconfig.xml\">"]}},"excerpt":"","more":"<h3 id=\"01-通过yum源安装bind服务\"><a href=\"#01-通过yum源安装bind服务\" class=\"headerlink\" title=\"01.通过yum源安装bind服务\"></a>01.通过yum源安装bind服务</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install <span class=\"built_in\">bind</span> bind-utils bind-chroot</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"02-修改-etc-named-conf\"><a href=\"#02-修改-etc-named-conf\" class=\"headerlink\" title=\"02.修改/etc/named.conf\"></a>02.修改/etc/named.conf</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">options &#123;        </span><br><span class=\"line\">\tlisten-on port 53 &#123; any; &#125;; // 此处要替换为any        </span><br><span class=\"line\">\tlisten-on-v6 port 53 &#123; ::1; &#125;;        </span><br><span class=\"line\">\tdirectory       &quot;/var/named&quot;; // 域名目录        </span><br><span class=\"line\">\tdump-file       &quot;/var/named/data/cache_dump.db&quot;;        </span><br><span class=\"line\">\tstatistics-file &quot;/var/named/data/named_stats.txt&quot;;        </span><br><span class=\"line\">\tmemstatistics-file &quot;/var/named/data/named_mem_stats.txt&quot;;        </span><br><span class=\"line\">\tsecroots-file   &quot;/var/named/data/named.secroots&quot;;        </span><br><span class=\"line\">\trecursing-file  &quot;/var/named/data/named.recursing&quot;;        </span><br><span class=\"line\">\tallow-query     &#123; any; &#125;;  // 需要替换为any        </span><br><span class=\"line\">\tforwarders      &#123; 180.76.76.76; &#125;; // 此处替换为一个公共的dns,比如百度或者阿里        </span><br><span class=\"line\">\trecursion yes;        </span><br><span class=\"line\">\tdnssec-enable no; // 需要和值为no,否则查询会很慢        </span><br><span class=\"line\">\tdnssec-validation no; // 需要设置为no,否则查询会很慢        </span><br><span class=\"line\">\tmanaged-keys-directory &quot;/var/named/dynamic&quot;;        </span><br><span class=\"line\">\tpid-file &quot;/run/named/named.pid&quot;;        </span><br><span class=\"line\">\tsession-keyfile &quot;/run/named/session.key&quot;;        </span><br><span class=\"line\">\tinclude &quot;/etc/crypto-policies/back-ends/bind.config&quot;;&#125;;</span><br><span class=\"line\">\tlogging &#123;        </span><br><span class=\"line\">\t\tchannel default_debug &#123;</span><br><span class=\"line\">        \tfile &quot;data/named.run&quot;; // 日志文件                </span><br><span class=\"line\">        \tseverity dynamic;        </span><br><span class=\"line\">        \t&#125;;</span><br><span class=\"line\">     &#125;;</span><br><span class=\"line\">     zone &quot;.&quot; IN &#123;        </span><br><span class=\"line\">     \ttype hint;        </span><br><span class=\"line\">     \tfile &quot;named.ca&quot;;</span><br><span class=\"line\">     &#125;;</span><br><span class=\"line\">     include &quot;/etc/named.rfc1912.zones&quot;;</span><br><span class=\"line\">     include &quot;/etc/named.root.key&quot;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"03-增加域名\"><a href=\"#03-增加域名\" class=\"headerlink\" title=\"03.增加域名\"></a>03.增加域名</h3><p>此时,需要在/etc/named.rfc1912.zones下,增加公司的域名.此处以hfdy.com为例</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zone &quot;hfdy.com&quot; IN &#123;     </span><br><span class=\"line\">\ttype master;        </span><br><span class=\"line\">\tfile &quot;hfdy.com.zone&quot;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"04-配置域名\"><a href=\"#04-配置域名\" class=\"headerlink\" title=\"04.配置域名\"></a>04.配置域名</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch &#x2F;var&#x2F;named&#x2F;hfdy.com.zonevim &#x2F;var&#x2F;named&#x2F;hfdy.com.zone# 将下列内容复制进named.hfdy文件中</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ORIGIN hfdy.com.$TTL 600        ; 10 minutes@    IN SOA dns.hfdy.com. dnsadmin.hfdy.com. (                                                2020060230  ;serial 每次更改都需要更改这个时间                                                10800    ;refresh 每三个小时刷新一次                                                900    ;每15分钟重试一次                                                604800      ;1周过期                                                86400    ;1 天更新                                               )                                             NS    dns.hfdy.com.$TTL  60   ; 1分钟过期</span><br><span class=\"line\">www            A     192.168.0.198</span><br><span class=\"line\">dns            A     192.168.0.198</span><br><span class=\"line\">redis          A     192.168.0.198</span><br><span class=\"line\">git            A     192.168.0.198</span><br><span class=\"line\">hub            A     192.168.0.198</span><br><span class=\"line\">file           A     192.168.0.198</span><br><span class=\"line\">sql            A     192.168.0.198</span><br><span class=\"line\">es01           A     192.168.0.198</span><br><span class=\"line\">ftp            A     192.168.0.198</span><br><span class=\"line\">cloud          A     192.168.0.198</span><br><span class=\"line\">pay            A     192.168.0.198</span><br><span class=\"line\">auth           A     192.168.0.198</span><br><span class=\"line\">account        A     192.168.0.198</span><br><span class=\"line\">mysql-dev      A     192.168.0.198</span><br><span class=\"line\">mysql-models   A     192.168.0.198</span><br><span class=\"line\">doc            A     192.168.0.198</span><br><span class=\"line\">sui            A     192.168.0.198</span><br><span class=\"line\">sed            A     192.168.0.198</span><br><span class=\"line\">nodes          A     192.168.0.198</span><br><span class=\"line\">chess          A     192.168.0.198</span><br><span class=\"line\">email          A     192.168.0.198</span><br><span class=\"line\">im             A     192.168.0.198</span><br><span class=\"line\">grpc           A     192.168.0.198</span><br><span class=\"line\">gid            A     192.168.0.198</span><br><span class=\"line\">api            A     192.168.0.198</span><br><span class=\"line\">jks            A     192.168.0.198</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"05-重启-开机启动\"><a href=\"#05-重启-开机启动\" class=\"headerlink\" title=\"05.重启+开机启动\"></a>05.重启+开机启动</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart named</span><br><span class=\"line\">sudo systemctl enable named</span><br></pre></td></tr></table></figure>"},{"title":"企业网络之部署DOCKER","cover":"/img/network-deploy/docker_title.png","subtitle":"企业网络之部署DOCKER","author":{"nick":"袁苏东","link":"https://github.com/yuansudong"},"typora-root-url":"network-deploy-docker","_content":"Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的LINUX或WINDOWS机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口\n\n\n\n### 01.安装docker-ce\n\n\n\n```\ncurl https://download.docker.com/linux/centos/docker-ce.repo -o /etc/yum.repos.d/docker-ce.repo\nyum install https://download.docker.com/linux/fedora/30/x86_64/stable/Packages/containerd.io-1.2.6-3.3.fc30.x86_64.rpm -y\nyum install docker-ce docker-ce-cli -y\nsystemctl start docker\nsystemctl enable docker\n```\n\n\n\n### 02.安装docker-compose\n\n\n\n```\ncurl -L \"https://github.com/docker/compose/releases/download/1.25.5/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\nchmod +x /usr/local/bin/docker-compose\nln -s /usr/local/bin/docker-compose /usr/bin/docker-compose\ndocker-compose --version\n```\n\n\n\n#### 03.配置daemon.json\n\n\n\n```\n\n\ncat > /etc/docker/daemon.json <<EOF\n{\n    \"exec-opts\": [\"native.cgroupdriver=systemd\"],\n    \"log-driver\": \"json-file\",\n    \"log-opts\": {\n    \"max-size\": \"100m\"\n    },\n    \"insecure-registries\":[\"192.168.42.128\"],\n    \"storage-driver\": \"overlay2\",\n    \"registry-mirrors\":[\n        \"http://hub-mirror.c.163.com\",\n        \"https://docker.mirrors.ustc.edu.cn\",\n        \"https://registry.docker-cn.com\"\n    ]\n}\nEOF\nsystemctl daemon-reload \nsystemctl restart docker\nsystemctl enable docker\n```\n\n","source":"_posts/network-deploy-docker.md","raw":"---\ntitle: 企业网络之部署DOCKER\ncover:  /img/network-deploy/docker_title.png\nsubtitle: 企业网络之部署DOCKER\ncategories: \"企业网络\"\ntags: \"企业网络\"\nauthor:\n  nick: 袁苏东\n  link: https://github.com/yuansudong\ntypora-root-url: network-deploy-docker\n\n---\nDocker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的LINUX或WINDOWS机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口\n\n\n\n### 01.安装docker-ce\n\n\n\n```\ncurl https://download.docker.com/linux/centos/docker-ce.repo -o /etc/yum.repos.d/docker-ce.repo\nyum install https://download.docker.com/linux/fedora/30/x86_64/stable/Packages/containerd.io-1.2.6-3.3.fc30.x86_64.rpm -y\nyum install docker-ce docker-ce-cli -y\nsystemctl start docker\nsystemctl enable docker\n```\n\n\n\n### 02.安装docker-compose\n\n\n\n```\ncurl -L \"https://github.com/docker/compose/releases/download/1.25.5/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\nchmod +x /usr/local/bin/docker-compose\nln -s /usr/local/bin/docker-compose /usr/bin/docker-compose\ndocker-compose --version\n```\n\n\n\n#### 03.配置daemon.json\n\n\n\n```\n\n\ncat > /etc/docker/daemon.json <<EOF\n{\n    \"exec-opts\": [\"native.cgroupdriver=systemd\"],\n    \"log-driver\": \"json-file\",\n    \"log-opts\": {\n    \"max-size\": \"100m\"\n    },\n    \"insecure-registries\":[\"192.168.42.128\"],\n    \"storage-driver\": \"overlay2\",\n    \"registry-mirrors\":[\n        \"http://hub-mirror.c.163.com\",\n        \"https://docker.mirrors.ustc.edu.cn\",\n        \"https://registry.docker-cn.com\"\n    ]\n}\nEOF\nsystemctl daemon-reload \nsystemctl restart docker\nsystemctl enable docker\n```\n\n","slug":"network-deploy-docker","published":1,"date":"2021-03-15T16:41:28.723Z","updated":"2021-03-15T16:44:42.862Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmchg4it000m7gvl2lrh0k1m","content":"<p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的LINUX或WINDOWS机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口</p>\n<h3 id=\"01-安装docker-ce\"><a href=\"#01-安装docker-ce\" class=\"headerlink\" title=\"01.安装docker-ce\"></a>01.安装docker-ce</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo -o &#x2F;etc&#x2F;yum.repos.d&#x2F;docker-ce.repo</span><br><span class=\"line\">yum install https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;fedora&#x2F;30&#x2F;x86_64&#x2F;stable&#x2F;Packages&#x2F;containerd.io-1.2.6-3.3.fc30.x86_64.rpm -y</span><br><span class=\"line\">yum install docker-ce docker-ce-cli -y</span><br><span class=\"line\">systemctl start docker</span><br><span class=\"line\">systemctl enable docker</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"02-安装docker-compose\"><a href=\"#02-安装docker-compose\" class=\"headerlink\" title=\"02.安装docker-compose\"></a>02.安装docker-compose</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -L &quot;https:&#x2F;&#x2F;github.com&#x2F;docker&#x2F;compose&#x2F;releases&#x2F;download&#x2F;1.25.5&#x2F;docker-compose-$(uname -s)-$(uname -m)&quot; -o &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose</span><br><span class=\"line\">chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose</span><br><span class=\"line\">ln -s &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose &#x2F;usr&#x2F;bin&#x2F;docker-compose</span><br><span class=\"line\">docker-compose --version</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"03-配置daemon-json\"><a href=\"#03-配置daemon-json\" class=\"headerlink\" title=\"03.配置daemon.json\"></a>03.配置daemon.json</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">cat &gt; &#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt;EOF</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;exec-opts&quot;: [&quot;native.cgroupdriver&#x3D;systemd&quot;],</span><br><span class=\"line\">    &quot;log-driver&quot;: &quot;json-file&quot;,</span><br><span class=\"line\">    &quot;log-opts&quot;: &#123;</span><br><span class=\"line\">    &quot;max-size&quot;: &quot;100m&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;insecure-registries&quot;:[&quot;192.168.42.128&quot;],</span><br><span class=\"line\">    &quot;storage-driver&quot;: &quot;overlay2&quot;,</span><br><span class=\"line\">    &quot;registry-mirrors&quot;:[</span><br><span class=\"line\">        &quot;http:&#x2F;&#x2F;hub-mirror.c.163.com&quot;,</span><br><span class=\"line\">        &quot;https:&#x2F;&#x2F;docker.mirrors.ustc.edu.cn&quot;,</span><br><span class=\"line\">        &quot;https:&#x2F;&#x2F;registry.docker-cn.com&quot;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\">systemctl daemon-reload </span><br><span class=\"line\">systemctl restart docker</span><br><span class=\"line\">systemctl enable docker</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"contact":[{"title":"github","icon":"icon-github","link":"https://github.com/yuansudong"},{"title":"email","icon":"icon-email","link":"mailto:1145919989@qq.com"},{"title":"qq","icon":"icon-qq","link":"/atom.xml"}],"favicons":["<link rel=\"shortcut icon\" href=\"/img//favicon.ico\">","<link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/img//favicon-16x16.png\">","<link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/img//favicon-32x32.png\">","<link rel=\"icon\" type=\"image/png\" sizes=\"48x48\" href=\"/img//favicon-48x48.png\">","<link rel=\"manifest\" href=\"/img//manifest.json\">","<meta name=\"mobile-web-app-capable\" content=\"yes\">","<meta name=\"theme-color\" content=\"#fff\">","<meta name=\"application-name\">","<link rel=\"apple-touch-icon\" sizes=\"57x57\" href=\"/img//apple-touch-icon-57x57.png\">","<link rel=\"apple-touch-icon\" sizes=\"60x60\" href=\"/img//apple-touch-icon-60x60.png\">","<link rel=\"apple-touch-icon\" sizes=\"72x72\" href=\"/img//apple-touch-icon-72x72.png\">","<link rel=\"apple-touch-icon\" sizes=\"76x76\" href=\"/img//apple-touch-icon-76x76.png\">","<link rel=\"apple-touch-icon\" sizes=\"114x114\" href=\"/img//apple-touch-icon-114x114.png\">","<link rel=\"apple-touch-icon\" sizes=\"120x120\" href=\"/img//apple-touch-icon-120x120.png\">","<link rel=\"apple-touch-icon\" sizes=\"144x144\" href=\"/img//apple-touch-icon-144x144.png\">","<link rel=\"apple-touch-icon\" sizes=\"152x152\" href=\"/img//apple-touch-icon-152x152.png\">","<link rel=\"apple-touch-icon\" sizes=\"167x167\" href=\"/img//apple-touch-icon-167x167.png\">","<link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/img//apple-touch-icon-180x180.png\">","<link rel=\"apple-touch-icon\" sizes=\"1024x1024\" href=\"/img//apple-touch-icon-1024x1024.png\">","<meta name=\"apple-mobile-web-app-capable\" content=\"yes\">","<meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black-translucent\">","<meta name=\"apple-mobile-web-app-title\">","<meta name=\"msapplication-TileColor\" content=\"#fff\">","<meta name=\"msapplication-TileImage\" content=\"/img//mstile-144x144.png\">","<meta name=\"msapplication-config\" content=\"/img//browserconfig.xml\">"]}},"excerpt":"","more":"<p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的LINUX或WINDOWS机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口</p>\n<h3 id=\"01-安装docker-ce\"><a href=\"#01-安装docker-ce\" class=\"headerlink\" title=\"01.安装docker-ce\"></a>01.安装docker-ce</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo -o &#x2F;etc&#x2F;yum.repos.d&#x2F;docker-ce.repo</span><br><span class=\"line\">yum install https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;fedora&#x2F;30&#x2F;x86_64&#x2F;stable&#x2F;Packages&#x2F;containerd.io-1.2.6-3.3.fc30.x86_64.rpm -y</span><br><span class=\"line\">yum install docker-ce docker-ce-cli -y</span><br><span class=\"line\">systemctl start docker</span><br><span class=\"line\">systemctl enable docker</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"02-安装docker-compose\"><a href=\"#02-安装docker-compose\" class=\"headerlink\" title=\"02.安装docker-compose\"></a>02.安装docker-compose</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -L &quot;https:&#x2F;&#x2F;github.com&#x2F;docker&#x2F;compose&#x2F;releases&#x2F;download&#x2F;1.25.5&#x2F;docker-compose-$(uname -s)-$(uname -m)&quot; -o &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose</span><br><span class=\"line\">chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose</span><br><span class=\"line\">ln -s &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose &#x2F;usr&#x2F;bin&#x2F;docker-compose</span><br><span class=\"line\">docker-compose --version</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"03-配置daemon-json\"><a href=\"#03-配置daemon-json\" class=\"headerlink\" title=\"03.配置daemon.json\"></a>03.配置daemon.json</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">cat &gt; &#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt;EOF</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;exec-opts&quot;: [&quot;native.cgroupdriver&#x3D;systemd&quot;],</span><br><span class=\"line\">    &quot;log-driver&quot;: &quot;json-file&quot;,</span><br><span class=\"line\">    &quot;log-opts&quot;: &#123;</span><br><span class=\"line\">    &quot;max-size&quot;: &quot;100m&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;insecure-registries&quot;:[&quot;192.168.42.128&quot;],</span><br><span class=\"line\">    &quot;storage-driver&quot;: &quot;overlay2&quot;,</span><br><span class=\"line\">    &quot;registry-mirrors&quot;:[</span><br><span class=\"line\">        &quot;http:&#x2F;&#x2F;hub-mirror.c.163.com&quot;,</span><br><span class=\"line\">        &quot;https:&#x2F;&#x2F;docker.mirrors.ustc.edu.cn&quot;,</span><br><span class=\"line\">        &quot;https:&#x2F;&#x2F;registry.docker-cn.com&quot;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\">systemctl daemon-reload </span><br><span class=\"line\">systemctl restart docker</span><br><span class=\"line\">systemctl enable docker</span><br></pre></td></tr></table></figure>\n\n"},{"title":"企业网络之部署GOGS服务","cover":"/img/network-deploy/git_title.png","subtitle":"企业网络之部署GOGS服务","author":{"nick":"袁苏东","link":"https://github.com/yuansudong"},"typora-root-url":"network-deploy-git","_content":"\n\n在进行部署之前,已经部署好了下面的这些环境\n\n\n\n[企业网络之局域网安全HTTPS](https://www.yuansudong.top/2021/network-deploy-https/index.html)\n\n[企业网络之部署DOCKER](https://www.yuansudong.top/2021/network-deploy-docker/index.html)\n\n[企业网络之部署DNS服务](https://www.yuansudong.top/2021/network-deploy-dns/index.html)\n\n[企业网络之部署NGINX](https://www.yuansudong.top/2021/network-deploy-nginx/index.html)\n\n\n\n#### 01.创建GIT用户,并将其加入docker组\n\n\n\n```\n\n# 创建git用户\nsudo useradd -s /bin/bash -d /home/git -m git\n# 增加git用户入docker组\nsudo gpasswd -a git docker\n# 查看用户d\nid git\nuid=1000(git) gid=1000(git) groups=1000(git),984(docker)\n```\n\n\n\n#### 02.登录GIT,部署服务\n\n\n\n```\nsu git\nmkdir docker\ncat > docker/docker-compose.yml <<EOF\nversion: \"3.8\"\nservices:\n  gogs.hfdy.net:\n    image: gogs/gogs:latest\n    restart: always\n    container_name: gogs.hfdy.net\n    ports:\n         - \"10022:22\"\n         - \"3000:3000\"\n    environment:\n         - PUID=1000  # 此处的PUID 要和id git 命令的相同\n         - PGID=1000  # 此处的PGID 要和id git 命令的相同\n    volumes:\n         - /home/git:/data\n         \nEOF\n\ncd docker && docker-compose up -d --build\n```\n\n\n\n#### 03.配置NGINX反向代理\n\n\n\n```\ncat > /etc/nginx/hosts/gogs.hfdy.com.conf <<EOF\nupstream backend.gogs  {\n    server 127.0.0.1:3000 max_fails=0 fail_timeout=0s; #api 服务器 失败10次断60秒\n    # server 127.0.0.1:8001 max_fails=10 fail_timeout=60s; #api 服务器 失败10次断60秒\n    # server 127.0.0.1:8002 backup; # api 服务器 表示服务器为备用\n    keepalive 64;   # 连接池的数量,不易太多\n}\nserver {\n    listen 80; #监听端口\n    server_name gogs.hfdy.com; #域名\n    rewrite ^(.*)$  https://$host$1 permanent; # 将http强制转换为https\n}\nserver {\n    listen       443 ssl ;\n    server_name  gogs.hfdy.com;\n    ssl_certificate /etc/nginx/cert/hfdy.pem;\n    ssl_certificate_key /etc/nginx/cert/hfdy-key.pem; \n    add_header Strict-Transport-Security \"max-age=63072000; includeSubdomains; preload\";\n    ssl_session_cache shared:SSL:10m;\n    ssl_session_timeout 1440m;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;\n    ssl_prefer_server_ciphers on;\n    ssl_ciphers \"ECDHE-ECDSA-CHACHA20-POLY1305 ECDHE-RSA-CHACHA20-POLY1305 ECDHE-ECDSA-AES128-GCM-SHA256 ECDHE-RSA-AES128-GCM-SHA256 ECDHE-ECDSA-AES256-GCM-SHA384 ECDHE-RSA-AES256-GCM-SHA384 DHE-RSA-AES128-GCM-SHA256 DHE-RSA-AES256-GCM-SHA384 ECDHE-ECDSA-AES128-SHA256 ECDHE-RSA-AES128-SHA256 ECDHE-ECDSA-AES128-SHA ECDHE-RSA-AES256-SHA384 ECDHE-RSA-AES128-SHA ECDHE-ECDSA-AES256-SHA384 ECDHE-ECDSA-AES256-SHA ECDHE-RSA-AES256-SHA DHE-RSA-AES128-SHA256 DHE-RSA-AES128-SHA DHE-RSA-AES256-SHA256 DHE-RSA-AES256-SHA ECDHE-ECDSA-DES-CBC3-SHA ECDHE-RSA-DES-CBC3-SHA EDH-RSA-DES-CBC3-SHA AES128-GCM-SHA256 AES256-GCM-SHA384 AES128-SHA256 AES256-SHA256 AES128-SHA AES256-SHA DES-CBC3-SHA !DSS\";\n    access_log  /nginx/logs/gogs.hfdy.com.access.log  main;      #访问日志路径 日志级别\n    error_log   /nginx/logs/gogs.hfdy.com.error.log;   # 错误日志  # 可以在下方直接使用 [ debug | info | notice | warn | error | crit ]  参数\n    location / {\n        add_header Access-Control-Allow-Origin $http_origin;\n        add_header Access-Control-Allow-Methods 'GET,POST,PUT,DELETE,FETCH';\n        add_header Access-Control-Allow-Credentials true;\n        add_header Access-Control-Allow-Headers 'x-mac,x-crfs-token,x-crfs-token,content-type';\n        #限速处理,现在先不配置限速\n        if ($request_method = 'OPTIONS' ) {\n                return 204;\n        }\n        proxy_pass   http://backend.gogs/;\n        #Proxy Settings\n        proxy_redirect     off;    #关闭重定向\n        proxy_set_header   Host             $host;  #在头部中设置host\n        proxy_set_header   X-Real-IP        $remote_addr;  #在头部中设置请求的真是IP\n        proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;\n        proxy_request_buffering on; #接受完整的数据包之后再向上游转发\n        proxy_connect_timeout      75;  #连接超时限制,默认为60s, 超时会返回502\n        proxy_send_timeout         75; #发送超时时间\n        proxy_read_timeout         75; #读取超时时间,默认为60s\n        proxy_buffering on; #接受完整的上游响应,再发送给浏览器\n        proxy_buffer_size          32k; #缓冲区大小\n        proxy_buffers              16 64k; #响应的缓冲区大小\n        proxy_busy_buffers_size    64K; #繁忙的缓冲区大小\n        proxy_temp_file_write_size 64k; #中间文件的写大小\n        proxy_max_temp_file_size 1024m;   #响应的最大中间文件,默认就是1G\n        proxy_limit_rate 0; #不限制读取上游的响应速度\n        proxy_http_version 1.1; #http的版本\n        proxy_set_header Connection \"\"; #设置connect\n    }\n}\nEOF\n\nnginx -t\nsystemctl reload nginx\n```\n\n\n\n#### 04.打开浏览器配置GOGS\n\n\n![图片](/acc.png)\n\n\n配置好之后,基本可以使用\n\n\n\n#### 05.docker与宿主机共享22端口\n\n\n\n```\nsu git\nssh-keygen -t rsa -b 4096 -C \"git@gogs.hfdy.com\"\ncat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys\n# 在 authorized_keys 最前面添加下面的\n# no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty\n# example:no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC0QmMG+Xz+qjIEp7Vrlt5SLGergYF4DJbY7+4l7R9nvhrbbSSVzNiKGngSCPvQWfkLv1XZhlzG9V7Pr/Gj86yJcz4/AvMYkZanVZ+zi9JFb3CfJLtxeMSUgNC6Ig2UDxAW53hGpADlFL+4Ic9yMoNw0AoqmU2FfKjfO3kFc8xXJ+vAboXgEukxWl/3vniMzIwDiQAfTftbV9RUl2UmbHO70l65FrIvo5llagvSSzu9q3xqhVN5CHdOvRFOEnNJ/xdvnoUE7hbYTjoooOK5o6paXtbPkNWlp3vpyjXnMAxJOYMr+0Gp+S1hGoTMnLyTE/94KKvC7wgrpLpKkd9CnD2uT7B/60tj+tn+hQnBTB5dVqQ1eWUhQ7tySqXXyDuWzAin5CI9q+FlCoK83OAKlFJMopIVgESf19xLkD/x064oyIY0X3q9gZ7QeZk5QSI5vIDFdG9+SYyUUhwYxSnuPn6fmn1RbetOWguzBXy6betP4jQE7HxU4RC/6r+TxapdXSmDfQ92Pjd9Qx9atJ6ntjV6bcxU3u7j5XijaDhkoIPbK5cqnTm7OXZjjfkhWeNAI+IkM2ubF6Ya53j3eOHqKE64h5aIOWgkxjojoxf4spkrGfIeE5aD6Ab4+9Lyu0KmBsCzuTT66oS2gQlQcQ/vmcIgOrGjMDd07GfAjURUzsmgxw== git@gogs.hfdy.com\n```\n\n\n\n#### 06.配置GIT用户SSH登录\n\n\n\n```\n[root@localhost ~]$ mkdir -p /app/gogs/\n[root@localhost ~]$ cat >/app/gogs/gogs <<'END'\n#!/bin/sh\nssh -p 10022 -o StrictHostKeyChecking=no git@127.0.0.1 \\\n\"SSH_ORIGINAL_COMMAND=\\\"$SSH_ORIGINAL_COMMAND\\\" $0 $@\"\nEND\n[root@localhost ~]$ chmod 755 /app/gogs/gogs\n```\n\n\n\n#### 07.遇见的问题\n\n\n\n  Q: git clone 在windows上报SSL certificate problem: unable to get local issuer certificate.\n\n\n\n  A: 对于mkcert生成的证书以及安装,于ubuntu下是不会有这个问题的.在windows下需要使用如下命令解决.\n\n  \n\n```\ngit config --global http.sslverify false\n```","source":"_posts/network-deploy-git.md","raw":"---\ntitle: 企业网络之部署GOGS服务\ncover:  /img/network-deploy/git_title.png\nsubtitle: 企业网络之部署GOGS服务\ncategories: \"企业网络\"\ntags: \"企业网络\"\nauthor:\n  nick: 袁苏东\n  link: https://github.com/yuansudong\ntypora-root-url: network-deploy-git\n---\n\n\n在进行部署之前,已经部署好了下面的这些环境\n\n\n\n[企业网络之局域网安全HTTPS](https://www.yuansudong.top/2021/network-deploy-https/index.html)\n\n[企业网络之部署DOCKER](https://www.yuansudong.top/2021/network-deploy-docker/index.html)\n\n[企业网络之部署DNS服务](https://www.yuansudong.top/2021/network-deploy-dns/index.html)\n\n[企业网络之部署NGINX](https://www.yuansudong.top/2021/network-deploy-nginx/index.html)\n\n\n\n#### 01.创建GIT用户,并将其加入docker组\n\n\n\n```\n\n# 创建git用户\nsudo useradd -s /bin/bash -d /home/git -m git\n# 增加git用户入docker组\nsudo gpasswd -a git docker\n# 查看用户d\nid git\nuid=1000(git) gid=1000(git) groups=1000(git),984(docker)\n```\n\n\n\n#### 02.登录GIT,部署服务\n\n\n\n```\nsu git\nmkdir docker\ncat > docker/docker-compose.yml <<EOF\nversion: \"3.8\"\nservices:\n  gogs.hfdy.net:\n    image: gogs/gogs:latest\n    restart: always\n    container_name: gogs.hfdy.net\n    ports:\n         - \"10022:22\"\n         - \"3000:3000\"\n    environment:\n         - PUID=1000  # 此处的PUID 要和id git 命令的相同\n         - PGID=1000  # 此处的PGID 要和id git 命令的相同\n    volumes:\n         - /home/git:/data\n         \nEOF\n\ncd docker && docker-compose up -d --build\n```\n\n\n\n#### 03.配置NGINX反向代理\n\n\n\n```\ncat > /etc/nginx/hosts/gogs.hfdy.com.conf <<EOF\nupstream backend.gogs  {\n    server 127.0.0.1:3000 max_fails=0 fail_timeout=0s; #api 服务器 失败10次断60秒\n    # server 127.0.0.1:8001 max_fails=10 fail_timeout=60s; #api 服务器 失败10次断60秒\n    # server 127.0.0.1:8002 backup; # api 服务器 表示服务器为备用\n    keepalive 64;   # 连接池的数量,不易太多\n}\nserver {\n    listen 80; #监听端口\n    server_name gogs.hfdy.com; #域名\n    rewrite ^(.*)$  https://$host$1 permanent; # 将http强制转换为https\n}\nserver {\n    listen       443 ssl ;\n    server_name  gogs.hfdy.com;\n    ssl_certificate /etc/nginx/cert/hfdy.pem;\n    ssl_certificate_key /etc/nginx/cert/hfdy-key.pem; \n    add_header Strict-Transport-Security \"max-age=63072000; includeSubdomains; preload\";\n    ssl_session_cache shared:SSL:10m;\n    ssl_session_timeout 1440m;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;\n    ssl_prefer_server_ciphers on;\n    ssl_ciphers \"ECDHE-ECDSA-CHACHA20-POLY1305 ECDHE-RSA-CHACHA20-POLY1305 ECDHE-ECDSA-AES128-GCM-SHA256 ECDHE-RSA-AES128-GCM-SHA256 ECDHE-ECDSA-AES256-GCM-SHA384 ECDHE-RSA-AES256-GCM-SHA384 DHE-RSA-AES128-GCM-SHA256 DHE-RSA-AES256-GCM-SHA384 ECDHE-ECDSA-AES128-SHA256 ECDHE-RSA-AES128-SHA256 ECDHE-ECDSA-AES128-SHA ECDHE-RSA-AES256-SHA384 ECDHE-RSA-AES128-SHA ECDHE-ECDSA-AES256-SHA384 ECDHE-ECDSA-AES256-SHA ECDHE-RSA-AES256-SHA DHE-RSA-AES128-SHA256 DHE-RSA-AES128-SHA DHE-RSA-AES256-SHA256 DHE-RSA-AES256-SHA ECDHE-ECDSA-DES-CBC3-SHA ECDHE-RSA-DES-CBC3-SHA EDH-RSA-DES-CBC3-SHA AES128-GCM-SHA256 AES256-GCM-SHA384 AES128-SHA256 AES256-SHA256 AES128-SHA AES256-SHA DES-CBC3-SHA !DSS\";\n    access_log  /nginx/logs/gogs.hfdy.com.access.log  main;      #访问日志路径 日志级别\n    error_log   /nginx/logs/gogs.hfdy.com.error.log;   # 错误日志  # 可以在下方直接使用 [ debug | info | notice | warn | error | crit ]  参数\n    location / {\n        add_header Access-Control-Allow-Origin $http_origin;\n        add_header Access-Control-Allow-Methods 'GET,POST,PUT,DELETE,FETCH';\n        add_header Access-Control-Allow-Credentials true;\n        add_header Access-Control-Allow-Headers 'x-mac,x-crfs-token,x-crfs-token,content-type';\n        #限速处理,现在先不配置限速\n        if ($request_method = 'OPTIONS' ) {\n                return 204;\n        }\n        proxy_pass   http://backend.gogs/;\n        #Proxy Settings\n        proxy_redirect     off;    #关闭重定向\n        proxy_set_header   Host             $host;  #在头部中设置host\n        proxy_set_header   X-Real-IP        $remote_addr;  #在头部中设置请求的真是IP\n        proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;\n        proxy_request_buffering on; #接受完整的数据包之后再向上游转发\n        proxy_connect_timeout      75;  #连接超时限制,默认为60s, 超时会返回502\n        proxy_send_timeout         75; #发送超时时间\n        proxy_read_timeout         75; #读取超时时间,默认为60s\n        proxy_buffering on; #接受完整的上游响应,再发送给浏览器\n        proxy_buffer_size          32k; #缓冲区大小\n        proxy_buffers              16 64k; #响应的缓冲区大小\n        proxy_busy_buffers_size    64K; #繁忙的缓冲区大小\n        proxy_temp_file_write_size 64k; #中间文件的写大小\n        proxy_max_temp_file_size 1024m;   #响应的最大中间文件,默认就是1G\n        proxy_limit_rate 0; #不限制读取上游的响应速度\n        proxy_http_version 1.1; #http的版本\n        proxy_set_header Connection \"\"; #设置connect\n    }\n}\nEOF\n\nnginx -t\nsystemctl reload nginx\n```\n\n\n\n#### 04.打开浏览器配置GOGS\n\n\n![图片](/acc.png)\n\n\n配置好之后,基本可以使用\n\n\n\n#### 05.docker与宿主机共享22端口\n\n\n\n```\nsu git\nssh-keygen -t rsa -b 4096 -C \"git@gogs.hfdy.com\"\ncat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys\n# 在 authorized_keys 最前面添加下面的\n# no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty\n# example:no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC0QmMG+Xz+qjIEp7Vrlt5SLGergYF4DJbY7+4l7R9nvhrbbSSVzNiKGngSCPvQWfkLv1XZhlzG9V7Pr/Gj86yJcz4/AvMYkZanVZ+zi9JFb3CfJLtxeMSUgNC6Ig2UDxAW53hGpADlFL+4Ic9yMoNw0AoqmU2FfKjfO3kFc8xXJ+vAboXgEukxWl/3vniMzIwDiQAfTftbV9RUl2UmbHO70l65FrIvo5llagvSSzu9q3xqhVN5CHdOvRFOEnNJ/xdvnoUE7hbYTjoooOK5o6paXtbPkNWlp3vpyjXnMAxJOYMr+0Gp+S1hGoTMnLyTE/94KKvC7wgrpLpKkd9CnD2uT7B/60tj+tn+hQnBTB5dVqQ1eWUhQ7tySqXXyDuWzAin5CI9q+FlCoK83OAKlFJMopIVgESf19xLkD/x064oyIY0X3q9gZ7QeZk5QSI5vIDFdG9+SYyUUhwYxSnuPn6fmn1RbetOWguzBXy6betP4jQE7HxU4RC/6r+TxapdXSmDfQ92Pjd9Qx9atJ6ntjV6bcxU3u7j5XijaDhkoIPbK5cqnTm7OXZjjfkhWeNAI+IkM2ubF6Ya53j3eOHqKE64h5aIOWgkxjojoxf4spkrGfIeE5aD6Ab4+9Lyu0KmBsCzuTT66oS2gQlQcQ/vmcIgOrGjMDd07GfAjURUzsmgxw== git@gogs.hfdy.com\n```\n\n\n\n#### 06.配置GIT用户SSH登录\n\n\n\n```\n[root@localhost ~]$ mkdir -p /app/gogs/\n[root@localhost ~]$ cat >/app/gogs/gogs <<'END'\n#!/bin/sh\nssh -p 10022 -o StrictHostKeyChecking=no git@127.0.0.1 \\\n\"SSH_ORIGINAL_COMMAND=\\\"$SSH_ORIGINAL_COMMAND\\\" $0 $@\"\nEND\n[root@localhost ~]$ chmod 755 /app/gogs/gogs\n```\n\n\n\n#### 07.遇见的问题\n\n\n\n  Q: git clone 在windows上报SSL certificate problem: unable to get local issuer certificate.\n\n\n\n  A: 对于mkcert生成的证书以及安装,于ubuntu下是不会有这个问题的.在windows下需要使用如下命令解决.\n\n  \n\n```\ngit config --global http.sslverify false\n```","slug":"network-deploy-git","published":1,"date":"2021-03-15T16:46:34.705Z","updated":"2021-03-15T20:14:44.205Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmchg4iw000o7gvl746bag5j","content":"<p>在进行部署之前,已经部署好了下面的这些环境</p>\n<p><a href=\"https://www.yuansudong.top/2021/network-deploy-https/index.html\">企业网络之局域网安全HTTPS</a></p>\n<p><a href=\"https://www.yuansudong.top/2021/network-deploy-docker/index.html\">企业网络之部署DOCKER</a></p>\n<p><a href=\"https://www.yuansudong.top/2021/network-deploy-dns/index.html\">企业网络之部署DNS服务</a></p>\n<p><a href=\"https://www.yuansudong.top/2021/network-deploy-nginx/index.html\">企业网络之部署NGINX</a></p>\n<h4 id=\"01-创建GIT用户-并将其加入docker组\"><a href=\"#01-创建GIT用户-并将其加入docker组\" class=\"headerlink\" title=\"01.创建GIT用户,并将其加入docker组\"></a>01.创建GIT用户,并将其加入docker组</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"># 创建git用户</span><br><span class=\"line\">sudo useradd -s &#x2F;bin&#x2F;bash -d &#x2F;home&#x2F;git -m git</span><br><span class=\"line\"># 增加git用户入docker组</span><br><span class=\"line\">sudo gpasswd -a git docker</span><br><span class=\"line\"># 查看用户d</span><br><span class=\"line\">id git</span><br><span class=\"line\">uid&#x3D;1000(git) gid&#x3D;1000(git) groups&#x3D;1000(git),984(docker)</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"02-登录GIT-部署服务\"><a href=\"#02-登录GIT-部署服务\" class=\"headerlink\" title=\"02.登录GIT,部署服务\"></a>02.登录GIT,部署服务</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su git</span><br><span class=\"line\">mkdir docker</span><br><span class=\"line\">cat &gt; docker&#x2F;docker-compose.yml &lt;&lt;EOF</span><br><span class=\"line\">version: &quot;3.8&quot;</span><br><span class=\"line\">services:</span><br><span class=\"line\">  gogs.hfdy.net:</span><br><span class=\"line\">    image: gogs&#x2F;gogs:latest</span><br><span class=\"line\">    restart: always</span><br><span class=\"line\">    container_name: gogs.hfdy.net</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">         - &quot;10022:22&quot;</span><br><span class=\"line\">         - &quot;3000:3000&quot;</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">         - PUID&#x3D;1000  # 此处的PUID 要和id git 命令的相同</span><br><span class=\"line\">         - PGID&#x3D;1000  # 此处的PGID 要和id git 命令的相同</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">         - &#x2F;home&#x2F;git:&#x2F;data</span><br><span class=\"line\">         </span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">cd docker &amp;&amp; docker-compose up -d --build</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"03-配置NGINX反向代理\"><a href=\"#03-配置NGINX反向代理\" class=\"headerlink\" title=\"03.配置NGINX反向代理\"></a>03.配置NGINX反向代理</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; &#x2F;etc&#x2F;nginx&#x2F;hosts&#x2F;gogs.hfdy.com.conf &lt;&lt;EOF</span><br><span class=\"line\">upstream backend.gogs  &#123;</span><br><span class=\"line\">    server 127.0.0.1:3000 max_fails&#x3D;0 fail_timeout&#x3D;0s; #api 服务器 失败10次断60秒</span><br><span class=\"line\">    # server 127.0.0.1:8001 max_fails&#x3D;10 fail_timeout&#x3D;60s; #api 服务器 失败10次断60秒</span><br><span class=\"line\">    # server 127.0.0.1:8002 backup; # api 服务器 表示服务器为备用</span><br><span class=\"line\">    keepalive 64;   # 连接池的数量,不易太多</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80; #监听端口</span><br><span class=\"line\">    server_name gogs.hfdy.com; #域名</span><br><span class=\"line\">    rewrite ^(.*)$  https:&#x2F;&#x2F;$host$1 permanent; # 将http强制转换为https</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       443 ssl ;</span><br><span class=\"line\">    server_name  gogs.hfdy.com;</span><br><span class=\"line\">    ssl_certificate &#x2F;etc&#x2F;nginx&#x2F;cert&#x2F;hfdy.pem;</span><br><span class=\"line\">    ssl_certificate_key &#x2F;etc&#x2F;nginx&#x2F;cert&#x2F;hfdy-key.pem; </span><br><span class=\"line\">    add_header Strict-Transport-Security &quot;max-age&#x3D;63072000; includeSubdomains; preload&quot;;</span><br><span class=\"line\">    ssl_session_cache shared:SSL:10m;</span><br><span class=\"line\">    ssl_session_timeout 1440m;</span><br><span class=\"line\">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;</span><br><span class=\"line\">    ssl_prefer_server_ciphers on;</span><br><span class=\"line\">    ssl_ciphers &quot;ECDHE-ECDSA-CHACHA20-POLY1305 ECDHE-RSA-CHACHA20-POLY1305 ECDHE-ECDSA-AES128-GCM-SHA256 ECDHE-RSA-AES128-GCM-SHA256 ECDHE-ECDSA-AES256-GCM-SHA384 ECDHE-RSA-AES256-GCM-SHA384 DHE-RSA-AES128-GCM-SHA256 DHE-RSA-AES256-GCM-SHA384 ECDHE-ECDSA-AES128-SHA256 ECDHE-RSA-AES128-SHA256 ECDHE-ECDSA-AES128-SHA ECDHE-RSA-AES256-SHA384 ECDHE-RSA-AES128-SHA ECDHE-ECDSA-AES256-SHA384 ECDHE-ECDSA-AES256-SHA ECDHE-RSA-AES256-SHA DHE-RSA-AES128-SHA256 DHE-RSA-AES128-SHA DHE-RSA-AES256-SHA256 DHE-RSA-AES256-SHA ECDHE-ECDSA-DES-CBC3-SHA ECDHE-RSA-DES-CBC3-SHA EDH-RSA-DES-CBC3-SHA AES128-GCM-SHA256 AES256-GCM-SHA384 AES128-SHA256 AES256-SHA256 AES128-SHA AES256-SHA DES-CBC3-SHA !DSS&quot;;</span><br><span class=\"line\">    access_log  &#x2F;nginx&#x2F;logs&#x2F;gogs.hfdy.com.access.log  main;      #访问日志路径 日志级别</span><br><span class=\"line\">    error_log   &#x2F;nginx&#x2F;logs&#x2F;gogs.hfdy.com.error.log;   # 错误日志  # 可以在下方直接使用 [ debug | info | notice | warn | error | crit ]  参数</span><br><span class=\"line\">    location &#x2F; &#123;</span><br><span class=\"line\">        add_header Access-Control-Allow-Origin $http_origin;</span><br><span class=\"line\">        add_header Access-Control-Allow-Methods &#39;GET,POST,PUT,DELETE,FETCH&#39;;</span><br><span class=\"line\">        add_header Access-Control-Allow-Credentials true;</span><br><span class=\"line\">        add_header Access-Control-Allow-Headers &#39;x-mac,x-crfs-token,x-crfs-token,content-type&#39;;</span><br><span class=\"line\">        #限速处理,现在先不配置限速</span><br><span class=\"line\">        if ($request_method &#x3D; &#39;OPTIONS&#39; ) &#123;</span><br><span class=\"line\">                return 204;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        proxy_pass   http:&#x2F;&#x2F;backend.gogs&#x2F;;</span><br><span class=\"line\">        #Proxy Settings</span><br><span class=\"line\">        proxy_redirect     off;    #关闭重定向</span><br><span class=\"line\">        proxy_set_header   Host             $host;  #在头部中设置host</span><br><span class=\"line\">        proxy_set_header   X-Real-IP        $remote_addr;  #在头部中设置请求的真是IP</span><br><span class=\"line\">        proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;</span><br><span class=\"line\">        proxy_request_buffering on; #接受完整的数据包之后再向上游转发</span><br><span class=\"line\">        proxy_connect_timeout      75;  #连接超时限制,默认为60s, 超时会返回502</span><br><span class=\"line\">        proxy_send_timeout         75; #发送超时时间</span><br><span class=\"line\">        proxy_read_timeout         75; #读取超时时间,默认为60s</span><br><span class=\"line\">        proxy_buffering on; #接受完整的上游响应,再发送给浏览器</span><br><span class=\"line\">        proxy_buffer_size          32k; #缓冲区大小</span><br><span class=\"line\">        proxy_buffers              16 64k; #响应的缓冲区大小</span><br><span class=\"line\">        proxy_busy_buffers_size    64K; #繁忙的缓冲区大小</span><br><span class=\"line\">        proxy_temp_file_write_size 64k; #中间文件的写大小</span><br><span class=\"line\">        proxy_max_temp_file_size 1024m;   #响应的最大中间文件,默认就是1G</span><br><span class=\"line\">        proxy_limit_rate 0; #不限制读取上游的响应速度</span><br><span class=\"line\">        proxy_http_version 1.1; #http的版本</span><br><span class=\"line\">        proxy_set_header Connection &quot;&quot;; #设置connect</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">nginx -t</span><br><span class=\"line\">systemctl reload nginx</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"04-打开浏览器配置GOGS\"><a href=\"#04-打开浏览器配置GOGS\" class=\"headerlink\" title=\"04.打开浏览器配置GOGS\"></a>04.打开浏览器配置GOGS</h4><p><img src=\"/2021/network-deploy-git/index/acc.png\" alt=\"图片\"></p>\n<p>配置好之后,基本可以使用</p>\n<h4 id=\"05-docker与宿主机共享22端口\"><a href=\"#05-docker与宿主机共享22端口\" class=\"headerlink\" title=\"05.docker与宿主机共享22端口\"></a>05.docker与宿主机共享22端口</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su git</span><br><span class=\"line\">ssh-keygen -t rsa -b 4096 -C &quot;git@gogs.hfdy.com&quot;</span><br><span class=\"line\">cat ~&#x2F;.ssh&#x2F;id_rsa.pub &gt;&gt; ~&#x2F;.ssh&#x2F;authorized_keys</span><br><span class=\"line\"># 在 authorized_keys 最前面添加下面的</span><br><span class=\"line\"># no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty</span><br><span class=\"line\"># example:no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC0QmMG+Xz+qjIEp7Vrlt5SLGergYF4DJbY7+4l7R9nvhrbbSSVzNiKGngSCPvQWfkLv1XZhlzG9V7Pr&#x2F;Gj86yJcz4&#x2F;AvMYkZanVZ+zi9JFb3CfJLtxeMSUgNC6Ig2UDxAW53hGpADlFL+4Ic9yMoNw0AoqmU2FfKjfO3kFc8xXJ+vAboXgEukxWl&#x2F;3vniMzIwDiQAfTftbV9RUl2UmbHO70l65FrIvo5llagvSSzu9q3xqhVN5CHdOvRFOEnNJ&#x2F;xdvnoUE7hbYTjoooOK5o6paXtbPkNWlp3vpyjXnMAxJOYMr+0Gp+S1hGoTMnLyTE&#x2F;94KKvC7wgrpLpKkd9CnD2uT7B&#x2F;60tj+tn+hQnBTB5dVqQ1eWUhQ7tySqXXyDuWzAin5CI9q+FlCoK83OAKlFJMopIVgESf19xLkD&#x2F;x064oyIY0X3q9gZ7QeZk5QSI5vIDFdG9+SYyUUhwYxSnuPn6fmn1RbetOWguzBXy6betP4jQE7HxU4RC&#x2F;6r+TxapdXSmDfQ92Pjd9Qx9atJ6ntjV6bcxU3u7j5XijaDhkoIPbK5cqnTm7OXZjjfkhWeNAI+IkM2ubF6Ya53j3eOHqKE64h5aIOWgkxjojoxf4spkrGfIeE5aD6Ab4+9Lyu0KmBsCzuTT66oS2gQlQcQ&#x2F;vmcIgOrGjMDd07GfAjURUzsmgxw&#x3D;&#x3D; git@gogs.hfdy.com</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"06-配置GIT用户SSH登录\"><a href=\"#06-配置GIT用户SSH登录\" class=\"headerlink\" title=\"06.配置GIT用户SSH登录\"></a>06.配置GIT用户SSH登录</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]$ mkdir -p &#x2F;app&#x2F;gogs&#x2F;</span><br><span class=\"line\">[root@localhost ~]$ cat &gt;&#x2F;app&#x2F;gogs&#x2F;gogs &lt;&lt;&#39;END&#39;</span><br><span class=\"line\">#!&#x2F;bin&#x2F;sh</span><br><span class=\"line\">ssh -p 10022 -o StrictHostKeyChecking&#x3D;no git@127.0.0.1 \\</span><br><span class=\"line\">&quot;SSH_ORIGINAL_COMMAND&#x3D;\\&quot;$SSH_ORIGINAL_COMMAND\\&quot; $0 $@&quot;</span><br><span class=\"line\">END</span><br><span class=\"line\">[root@localhost ~]$ chmod 755 &#x2F;app&#x2F;gogs&#x2F;gogs</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"07-遇见的问题\"><a href=\"#07-遇见的问题\" class=\"headerlink\" title=\"07.遇见的问题\"></a>07.遇见的问题</h4><p>  Q: git clone 在windows上报SSL certificate problem: unable to get local issuer certificate.</p>\n<p>  A: 对于mkcert生成的证书以及安装,于ubuntu下是不会有这个问题的.在windows下需要使用如下命令解决.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global http.sslverify false</span><br></pre></td></tr></table></figure>","site":{"data":{"contact":[{"title":"github","icon":"icon-github","link":"https://github.com/yuansudong"},{"title":"email","icon":"icon-email","link":"mailto:1145919989@qq.com"},{"title":"qq","icon":"icon-qq","link":"/atom.xml"}],"favicons":["<link rel=\"shortcut icon\" href=\"/img//favicon.ico\">","<link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/img//favicon-16x16.png\">","<link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/img//favicon-32x32.png\">","<link rel=\"icon\" type=\"image/png\" sizes=\"48x48\" href=\"/img//favicon-48x48.png\">","<link rel=\"manifest\" href=\"/img//manifest.json\">","<meta name=\"mobile-web-app-capable\" content=\"yes\">","<meta name=\"theme-color\" content=\"#fff\">","<meta name=\"application-name\">","<link rel=\"apple-touch-icon\" sizes=\"57x57\" href=\"/img//apple-touch-icon-57x57.png\">","<link rel=\"apple-touch-icon\" sizes=\"60x60\" href=\"/img//apple-touch-icon-60x60.png\">","<link rel=\"apple-touch-icon\" sizes=\"72x72\" href=\"/img//apple-touch-icon-72x72.png\">","<link rel=\"apple-touch-icon\" sizes=\"76x76\" href=\"/img//apple-touch-icon-76x76.png\">","<link rel=\"apple-touch-icon\" sizes=\"114x114\" href=\"/img//apple-touch-icon-114x114.png\">","<link rel=\"apple-touch-icon\" sizes=\"120x120\" href=\"/img//apple-touch-icon-120x120.png\">","<link rel=\"apple-touch-icon\" sizes=\"144x144\" href=\"/img//apple-touch-icon-144x144.png\">","<link rel=\"apple-touch-icon\" sizes=\"152x152\" href=\"/img//apple-touch-icon-152x152.png\">","<link rel=\"apple-touch-icon\" sizes=\"167x167\" href=\"/img//apple-touch-icon-167x167.png\">","<link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/img//apple-touch-icon-180x180.png\">","<link rel=\"apple-touch-icon\" sizes=\"1024x1024\" href=\"/img//apple-touch-icon-1024x1024.png\">","<meta name=\"apple-mobile-web-app-capable\" content=\"yes\">","<meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black-translucent\">","<meta name=\"apple-mobile-web-app-title\">","<meta name=\"msapplication-TileColor\" content=\"#fff\">","<meta name=\"msapplication-TileImage\" content=\"/img//mstile-144x144.png\">","<meta name=\"msapplication-config\" content=\"/img//browserconfig.xml\">"]}},"excerpt":"","more":"<p>在进行部署之前,已经部署好了下面的这些环境</p>\n<p><a href=\"https://www.yuansudong.top/2021/network-deploy-https/index.html\">企业网络之局域网安全HTTPS</a></p>\n<p><a href=\"https://www.yuansudong.top/2021/network-deploy-docker/index.html\">企业网络之部署DOCKER</a></p>\n<p><a href=\"https://www.yuansudong.top/2021/network-deploy-dns/index.html\">企业网络之部署DNS服务</a></p>\n<p><a href=\"https://www.yuansudong.top/2021/network-deploy-nginx/index.html\">企业网络之部署NGINX</a></p>\n<h4 id=\"01-创建GIT用户-并将其加入docker组\"><a href=\"#01-创建GIT用户-并将其加入docker组\" class=\"headerlink\" title=\"01.创建GIT用户,并将其加入docker组\"></a>01.创建GIT用户,并将其加入docker组</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"># 创建git用户</span><br><span class=\"line\">sudo useradd -s &#x2F;bin&#x2F;bash -d &#x2F;home&#x2F;git -m git</span><br><span class=\"line\"># 增加git用户入docker组</span><br><span class=\"line\">sudo gpasswd -a git docker</span><br><span class=\"line\"># 查看用户d</span><br><span class=\"line\">id git</span><br><span class=\"line\">uid&#x3D;1000(git) gid&#x3D;1000(git) groups&#x3D;1000(git),984(docker)</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"02-登录GIT-部署服务\"><a href=\"#02-登录GIT-部署服务\" class=\"headerlink\" title=\"02.登录GIT,部署服务\"></a>02.登录GIT,部署服务</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su git</span><br><span class=\"line\">mkdir docker</span><br><span class=\"line\">cat &gt; docker&#x2F;docker-compose.yml &lt;&lt;EOF</span><br><span class=\"line\">version: &quot;3.8&quot;</span><br><span class=\"line\">services:</span><br><span class=\"line\">  gogs.hfdy.net:</span><br><span class=\"line\">    image: gogs&#x2F;gogs:latest</span><br><span class=\"line\">    restart: always</span><br><span class=\"line\">    container_name: gogs.hfdy.net</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">         - &quot;10022:22&quot;</span><br><span class=\"line\">         - &quot;3000:3000&quot;</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">         - PUID&#x3D;1000  # 此处的PUID 要和id git 命令的相同</span><br><span class=\"line\">         - PGID&#x3D;1000  # 此处的PGID 要和id git 命令的相同</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">         - &#x2F;home&#x2F;git:&#x2F;data</span><br><span class=\"line\">         </span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">cd docker &amp;&amp; docker-compose up -d --build</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"03-配置NGINX反向代理\"><a href=\"#03-配置NGINX反向代理\" class=\"headerlink\" title=\"03.配置NGINX反向代理\"></a>03.配置NGINX反向代理</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; &#x2F;etc&#x2F;nginx&#x2F;hosts&#x2F;gogs.hfdy.com.conf &lt;&lt;EOF</span><br><span class=\"line\">upstream backend.gogs  &#123;</span><br><span class=\"line\">    server 127.0.0.1:3000 max_fails&#x3D;0 fail_timeout&#x3D;0s; #api 服务器 失败10次断60秒</span><br><span class=\"line\">    # server 127.0.0.1:8001 max_fails&#x3D;10 fail_timeout&#x3D;60s; #api 服务器 失败10次断60秒</span><br><span class=\"line\">    # server 127.0.0.1:8002 backup; # api 服务器 表示服务器为备用</span><br><span class=\"line\">    keepalive 64;   # 连接池的数量,不易太多</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80; #监听端口</span><br><span class=\"line\">    server_name gogs.hfdy.com; #域名</span><br><span class=\"line\">    rewrite ^(.*)$  https:&#x2F;&#x2F;$host$1 permanent; # 将http强制转换为https</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       443 ssl ;</span><br><span class=\"line\">    server_name  gogs.hfdy.com;</span><br><span class=\"line\">    ssl_certificate &#x2F;etc&#x2F;nginx&#x2F;cert&#x2F;hfdy.pem;</span><br><span class=\"line\">    ssl_certificate_key &#x2F;etc&#x2F;nginx&#x2F;cert&#x2F;hfdy-key.pem; </span><br><span class=\"line\">    add_header Strict-Transport-Security &quot;max-age&#x3D;63072000; includeSubdomains; preload&quot;;</span><br><span class=\"line\">    ssl_session_cache shared:SSL:10m;</span><br><span class=\"line\">    ssl_session_timeout 1440m;</span><br><span class=\"line\">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;</span><br><span class=\"line\">    ssl_prefer_server_ciphers on;</span><br><span class=\"line\">    ssl_ciphers &quot;ECDHE-ECDSA-CHACHA20-POLY1305 ECDHE-RSA-CHACHA20-POLY1305 ECDHE-ECDSA-AES128-GCM-SHA256 ECDHE-RSA-AES128-GCM-SHA256 ECDHE-ECDSA-AES256-GCM-SHA384 ECDHE-RSA-AES256-GCM-SHA384 DHE-RSA-AES128-GCM-SHA256 DHE-RSA-AES256-GCM-SHA384 ECDHE-ECDSA-AES128-SHA256 ECDHE-RSA-AES128-SHA256 ECDHE-ECDSA-AES128-SHA ECDHE-RSA-AES256-SHA384 ECDHE-RSA-AES128-SHA ECDHE-ECDSA-AES256-SHA384 ECDHE-ECDSA-AES256-SHA ECDHE-RSA-AES256-SHA DHE-RSA-AES128-SHA256 DHE-RSA-AES128-SHA DHE-RSA-AES256-SHA256 DHE-RSA-AES256-SHA ECDHE-ECDSA-DES-CBC3-SHA ECDHE-RSA-DES-CBC3-SHA EDH-RSA-DES-CBC3-SHA AES128-GCM-SHA256 AES256-GCM-SHA384 AES128-SHA256 AES256-SHA256 AES128-SHA AES256-SHA DES-CBC3-SHA !DSS&quot;;</span><br><span class=\"line\">    access_log  &#x2F;nginx&#x2F;logs&#x2F;gogs.hfdy.com.access.log  main;      #访问日志路径 日志级别</span><br><span class=\"line\">    error_log   &#x2F;nginx&#x2F;logs&#x2F;gogs.hfdy.com.error.log;   # 错误日志  # 可以在下方直接使用 [ debug | info | notice | warn | error | crit ]  参数</span><br><span class=\"line\">    location &#x2F; &#123;</span><br><span class=\"line\">        add_header Access-Control-Allow-Origin $http_origin;</span><br><span class=\"line\">        add_header Access-Control-Allow-Methods &#39;GET,POST,PUT,DELETE,FETCH&#39;;</span><br><span class=\"line\">        add_header Access-Control-Allow-Credentials true;</span><br><span class=\"line\">        add_header Access-Control-Allow-Headers &#39;x-mac,x-crfs-token,x-crfs-token,content-type&#39;;</span><br><span class=\"line\">        #限速处理,现在先不配置限速</span><br><span class=\"line\">        if ($request_method &#x3D; &#39;OPTIONS&#39; ) &#123;</span><br><span class=\"line\">                return 204;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        proxy_pass   http:&#x2F;&#x2F;backend.gogs&#x2F;;</span><br><span class=\"line\">        #Proxy Settings</span><br><span class=\"line\">        proxy_redirect     off;    #关闭重定向</span><br><span class=\"line\">        proxy_set_header   Host             $host;  #在头部中设置host</span><br><span class=\"line\">        proxy_set_header   X-Real-IP        $remote_addr;  #在头部中设置请求的真是IP</span><br><span class=\"line\">        proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;</span><br><span class=\"line\">        proxy_request_buffering on; #接受完整的数据包之后再向上游转发</span><br><span class=\"line\">        proxy_connect_timeout      75;  #连接超时限制,默认为60s, 超时会返回502</span><br><span class=\"line\">        proxy_send_timeout         75; #发送超时时间</span><br><span class=\"line\">        proxy_read_timeout         75; #读取超时时间,默认为60s</span><br><span class=\"line\">        proxy_buffering on; #接受完整的上游响应,再发送给浏览器</span><br><span class=\"line\">        proxy_buffer_size          32k; #缓冲区大小</span><br><span class=\"line\">        proxy_buffers              16 64k; #响应的缓冲区大小</span><br><span class=\"line\">        proxy_busy_buffers_size    64K; #繁忙的缓冲区大小</span><br><span class=\"line\">        proxy_temp_file_write_size 64k; #中间文件的写大小</span><br><span class=\"line\">        proxy_max_temp_file_size 1024m;   #响应的最大中间文件,默认就是1G</span><br><span class=\"line\">        proxy_limit_rate 0; #不限制读取上游的响应速度</span><br><span class=\"line\">        proxy_http_version 1.1; #http的版本</span><br><span class=\"line\">        proxy_set_header Connection &quot;&quot;; #设置connect</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">nginx -t</span><br><span class=\"line\">systemctl reload nginx</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"04-打开浏览器配置GOGS\"><a href=\"#04-打开浏览器配置GOGS\" class=\"headerlink\" title=\"04.打开浏览器配置GOGS\"></a>04.打开浏览器配置GOGS</h4><p><img src=\"/2021/network-deploy-git/index/acc.png\" alt=\"图片\"></p>\n<p>配置好之后,基本可以使用</p>\n<h4 id=\"05-docker与宿主机共享22端口\"><a href=\"#05-docker与宿主机共享22端口\" class=\"headerlink\" title=\"05.docker与宿主机共享22端口\"></a>05.docker与宿主机共享22端口</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su git</span><br><span class=\"line\">ssh-keygen -t rsa -b 4096 -C &quot;git@gogs.hfdy.com&quot;</span><br><span class=\"line\">cat ~&#x2F;.ssh&#x2F;id_rsa.pub &gt;&gt; ~&#x2F;.ssh&#x2F;authorized_keys</span><br><span class=\"line\"># 在 authorized_keys 最前面添加下面的</span><br><span class=\"line\"># no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty</span><br><span class=\"line\"># example:no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC0QmMG+Xz+qjIEp7Vrlt5SLGergYF4DJbY7+4l7R9nvhrbbSSVzNiKGngSCPvQWfkLv1XZhlzG9V7Pr&#x2F;Gj86yJcz4&#x2F;AvMYkZanVZ+zi9JFb3CfJLtxeMSUgNC6Ig2UDxAW53hGpADlFL+4Ic9yMoNw0AoqmU2FfKjfO3kFc8xXJ+vAboXgEukxWl&#x2F;3vniMzIwDiQAfTftbV9RUl2UmbHO70l65FrIvo5llagvSSzu9q3xqhVN5CHdOvRFOEnNJ&#x2F;xdvnoUE7hbYTjoooOK5o6paXtbPkNWlp3vpyjXnMAxJOYMr+0Gp+S1hGoTMnLyTE&#x2F;94KKvC7wgrpLpKkd9CnD2uT7B&#x2F;60tj+tn+hQnBTB5dVqQ1eWUhQ7tySqXXyDuWzAin5CI9q+FlCoK83OAKlFJMopIVgESf19xLkD&#x2F;x064oyIY0X3q9gZ7QeZk5QSI5vIDFdG9+SYyUUhwYxSnuPn6fmn1RbetOWguzBXy6betP4jQE7HxU4RC&#x2F;6r+TxapdXSmDfQ92Pjd9Qx9atJ6ntjV6bcxU3u7j5XijaDhkoIPbK5cqnTm7OXZjjfkhWeNAI+IkM2ubF6Ya53j3eOHqKE64h5aIOWgkxjojoxf4spkrGfIeE5aD6Ab4+9Lyu0KmBsCzuTT66oS2gQlQcQ&#x2F;vmcIgOrGjMDd07GfAjURUzsmgxw&#x3D;&#x3D; git@gogs.hfdy.com</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"06-配置GIT用户SSH登录\"><a href=\"#06-配置GIT用户SSH登录\" class=\"headerlink\" title=\"06.配置GIT用户SSH登录\"></a>06.配置GIT用户SSH登录</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]$ mkdir -p &#x2F;app&#x2F;gogs&#x2F;</span><br><span class=\"line\">[root@localhost ~]$ cat &gt;&#x2F;app&#x2F;gogs&#x2F;gogs &lt;&lt;&#39;END&#39;</span><br><span class=\"line\">#!&#x2F;bin&#x2F;sh</span><br><span class=\"line\">ssh -p 10022 -o StrictHostKeyChecking&#x3D;no git@127.0.0.1 \\</span><br><span class=\"line\">&quot;SSH_ORIGINAL_COMMAND&#x3D;\\&quot;$SSH_ORIGINAL_COMMAND\\&quot; $0 $@&quot;</span><br><span class=\"line\">END</span><br><span class=\"line\">[root@localhost ~]$ chmod 755 &#x2F;app&#x2F;gogs&#x2F;gogs</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"07-遇见的问题\"><a href=\"#07-遇见的问题\" class=\"headerlink\" title=\"07.遇见的问题\"></a>07.遇见的问题</h4><p>  Q: git clone 在windows上报SSL certificate problem: unable to get local issuer certificate.</p>\n<p>  A: 对于mkcert生成的证书以及安装,于ubuntu下是不会有这个问题的.在windows下需要使用如下命令解决.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global http.sslverify false</span><br></pre></td></tr></table></figure>"},{"title":"企业网络之内网安全HTTPS","cover":"/img/network-deploy/https_title.png","subtitle":"企业网络之内网安全HTTPS","author":{"nick":"袁苏东","link":"https://github.com/yuansudong"},"typora-root-url":"network-deploy-https","_content":"HTTPS （全称：Hyper Text Transfer Protocol over SecureSocket Layer），是以安全为目标的 HTTP 通道，在HTTP的基础上通过传输加密和身份认证保证了传输过程的安全性\n\n\n\n### 1.为什么需要在内网部署安全的HTTPS\n\n\n\n(1) 保持正式环境与开发环境一致\n\n\n\n(2) HTTPS普及,倘若不使用可信任的HTTPS,需要做一些额外的配置,比如DOCKER,GRPC,K8S等一些列应用.\n\n\n\n(3) 方便一些语言做良好的开发环境,比如,GO中的gomod.\n\n\n\n### 2.如何在内网部署被客户端信任的HTTPS\n\n\n\n#### 01.Github项目\n\n\n\n```\nhttps://github.com/FiloSottile/mkcert\n```\n\n\n\nmkcert 是一个使用GO语言编写的生成本地自签证书的小程序，具有跨平台，使用简单，支持多域名，自动信任CA等一系列方便的特性可供本地开发时快速创建HTTPS环境使用.\n\n\n\n#### 02.下载mkcert的可执行文件\n\n\n\n```\nhttps://github.com/FiloSottile/mkcert/releases/tag/v1.4.3\n```\n\n\n\n根据对应的系统,下载对应的二进制文件.\n\n\n\n下载完毕之后,请将这二进制文件重命名为mkcert,并给mkcert可执行权限.\n\n\n\n#### 03.生成CA根证书\n\n\n\n在生成CA根证书之前,需要准备一台电脑.这台电脑的作用之一就是以后负责生成HTTPS证书的电脑.\n\n\n\n因为个人喜好的原因.自从出道以来,用的服务器都是centos.所以这个HTTPS的生成的计算机系统采用centos8\n\n\n\n```\nyum install nss-tools -y./mkcert -install\n```\n\n\n\n#### 04.保存CA根证书\n\n\n\n```\n# 查看根证书的目录\n[root@localhost https]# ./mkcert -CAROOT/root/.local/share/mkcert\n[root@localhost https]# ll \n/root/.local/share/mkcerttotal 8-r--------. 1 root root 2484 Dec 24 21:33 \nrootCA-key.pem-rw-r--r--. 1 root root 1688 Dec 24 21:33 rootCA.pem\n```\n\n\n\n将rootCA-key.pem rootCA.pem 保存妥善. 因为,每一台计算机都需要安装这个根证书.\n\n\n\n个人一般是将其放在网络共享盘和基于NGINX搭建的文件服务器里.\n\n\n\n因为,这样方便别人下载安装.\n\n\n\n#### 05.生成HTTPS证书\n\n\n\n```\n[root@localhost https]# ./mkcert www.hfdy.com *.hfdy.com\nCreated a new certificate valid for the following names 📜 - \"www.hfdy.com\" - \"*.hfdy.com\"Reminder: X.509 wildcards only go one level deep, so this won't match a.b.hfdy.com ℹ️ The certificate is at \"./www.hfdy.com+1.pem\" and the key at \"./www.hfdy.com+1-key.pem\" ✅It will expire on 24 March 2023 🗓\n[root@localhost https]# ls mkcert  \nwww.hfdy.com+1-key.pem  www.hfdy.com+1.pem\n[root@localhost https]# \n```\n\n\n\n## 3.WINDOWS安装CA根证书\n\n\n\n#### 01.下载mkcert\n\n\n\n```\nhttps://github.com/FiloSottile/mkcert/releases/tag/v1.4.3\n```\n\n\n\n在上列地址中下载windows版本的可执行文件.并将mkcert-v1.4.3-windows-amd64.exe重命名为mkcert.exe\n\n\n\n#### 02.创建CA证书目录\n\n\n\n```\n# 执行下列命令,不能用powershell打开.# 执行下列命令需要有管理员权限的cmdmkcert -install\n```\n\n\n\n#### 03.安装CA证书\n\n\n\n```\nE:\\code\\golang\\bin>mkcert -CAROOTC:\\Users\\Administrator\\AppData\\Local\\mkcertE:\\code\\golang\\bin>\n```\n\n\n\n将证书服务器的rootCA-key.pem和rootCA.pem复制到本地. 并且用这两个证书替换掉mkert -CAROOT下的rootCA-key.pem和rootCA.pem\n\n\n\n替换完毕后,再度执行下列命令\n\n\n\n```\nmkcert -install\n```\n\n\n\n至此,WINDOWS上的就配置完毕.\n\n\n\n### 4.LINUX安装CA根证书\n\n\n\n#### 01.下载mkcert\n\n\n\n```\nhttps://github.com/FiloSottile/mkcert/releases/tag/v1.4.3\n```\n\n\n\n在上列地址中下载linux版本的文件.并将mkcert-v1.4.3-linux-amd64.exe重命名为mkcert. 并给与可执行权限.\n\n\n\n#### 02.创建CA证书目录\n\n```\nyum install nss-tools -y# 执行下列命令,不能用powershell打开.# 执行下列命令需要有管理员权限的cmd\nmkcert -install\n```\n\n\n\n#### 03.安装CA证书\n\n\n\n```\n[root@localhost https]# ./mkcert -install\nThe local CA is already installed in the system trust store! 👍\nThe local CA is already installed in the Firefox and/or Chrome/Chromium trust store! 👍\n[root@localhost https]# ./mkcert -CAROOT/root/.local/share/mkcert\n```\n\n\n\n将证书服务器的rootCA-key.pem和rootCA.pem复制或者下载到本地. 并且用这两个证书替换掉mkert -CAROOT下的rootCA-key.pem和rootCA.pem\n\n\n\n替换完毕后,再度执行下列命令\n\n\n\n```\nmkcert -install\n```\n\n\n\n至此,LINUX上的就配置完毕.\n\n\n\n\n\n### 5.MAC安装CA根证书\n\n\n\n#### 01.下载mkcert\n\n\n\n```\nbrew install mkcertbrew install nss\n```\n\n\n\n#### 02.创建CA证书目录\n\n```\nmkcert -install\n```\n\n\n\n#### 03.安装CA证书\n\n\n\n```\nmkcert -installmkcert -CAROOT\n```\n\n\n\n将证书服务器的rootCA-key.pem和rootCA.pem复制或者下载到本地. 并且用这两个证书替换掉mkert -CAROOT下的rootCA-key.pem和rootCA.pem\n\n\n\n替换完毕后,再度执行下列命令\n\n\n\n```\nmkcert -install\n```\n\n\n\n至此,MAC上的就配置完毕.","source":"_posts/network-deploy-https.md","raw":"---\ntitle: 企业网络之内网安全HTTPS\ncover:  /img/network-deploy/https_title.png\nsubtitle: 企业网络之内网安全HTTPS\ncategories: \"企业网络\"\ntags: \"企业网络\"\nauthor:\n  nick: 袁苏东\n  link: https://github.com/yuansudong\ntypora-root-url: network-deploy-https\n---\nHTTPS （全称：Hyper Text Transfer Protocol over SecureSocket Layer），是以安全为目标的 HTTP 通道，在HTTP的基础上通过传输加密和身份认证保证了传输过程的安全性\n\n\n\n### 1.为什么需要在内网部署安全的HTTPS\n\n\n\n(1) 保持正式环境与开发环境一致\n\n\n\n(2) HTTPS普及,倘若不使用可信任的HTTPS,需要做一些额外的配置,比如DOCKER,GRPC,K8S等一些列应用.\n\n\n\n(3) 方便一些语言做良好的开发环境,比如,GO中的gomod.\n\n\n\n### 2.如何在内网部署被客户端信任的HTTPS\n\n\n\n#### 01.Github项目\n\n\n\n```\nhttps://github.com/FiloSottile/mkcert\n```\n\n\n\nmkcert 是一个使用GO语言编写的生成本地自签证书的小程序，具有跨平台，使用简单，支持多域名，自动信任CA等一系列方便的特性可供本地开发时快速创建HTTPS环境使用.\n\n\n\n#### 02.下载mkcert的可执行文件\n\n\n\n```\nhttps://github.com/FiloSottile/mkcert/releases/tag/v1.4.3\n```\n\n\n\n根据对应的系统,下载对应的二进制文件.\n\n\n\n下载完毕之后,请将这二进制文件重命名为mkcert,并给mkcert可执行权限.\n\n\n\n#### 03.生成CA根证书\n\n\n\n在生成CA根证书之前,需要准备一台电脑.这台电脑的作用之一就是以后负责生成HTTPS证书的电脑.\n\n\n\n因为个人喜好的原因.自从出道以来,用的服务器都是centos.所以这个HTTPS的生成的计算机系统采用centos8\n\n\n\n```\nyum install nss-tools -y./mkcert -install\n```\n\n\n\n#### 04.保存CA根证书\n\n\n\n```\n# 查看根证书的目录\n[root@localhost https]# ./mkcert -CAROOT/root/.local/share/mkcert\n[root@localhost https]# ll \n/root/.local/share/mkcerttotal 8-r--------. 1 root root 2484 Dec 24 21:33 \nrootCA-key.pem-rw-r--r--. 1 root root 1688 Dec 24 21:33 rootCA.pem\n```\n\n\n\n将rootCA-key.pem rootCA.pem 保存妥善. 因为,每一台计算机都需要安装这个根证书.\n\n\n\n个人一般是将其放在网络共享盘和基于NGINX搭建的文件服务器里.\n\n\n\n因为,这样方便别人下载安装.\n\n\n\n#### 05.生成HTTPS证书\n\n\n\n```\n[root@localhost https]# ./mkcert www.hfdy.com *.hfdy.com\nCreated a new certificate valid for the following names 📜 - \"www.hfdy.com\" - \"*.hfdy.com\"Reminder: X.509 wildcards only go one level deep, so this won't match a.b.hfdy.com ℹ️ The certificate is at \"./www.hfdy.com+1.pem\" and the key at \"./www.hfdy.com+1-key.pem\" ✅It will expire on 24 March 2023 🗓\n[root@localhost https]# ls mkcert  \nwww.hfdy.com+1-key.pem  www.hfdy.com+1.pem\n[root@localhost https]# \n```\n\n\n\n## 3.WINDOWS安装CA根证书\n\n\n\n#### 01.下载mkcert\n\n\n\n```\nhttps://github.com/FiloSottile/mkcert/releases/tag/v1.4.3\n```\n\n\n\n在上列地址中下载windows版本的可执行文件.并将mkcert-v1.4.3-windows-amd64.exe重命名为mkcert.exe\n\n\n\n#### 02.创建CA证书目录\n\n\n\n```\n# 执行下列命令,不能用powershell打开.# 执行下列命令需要有管理员权限的cmdmkcert -install\n```\n\n\n\n#### 03.安装CA证书\n\n\n\n```\nE:\\code\\golang\\bin>mkcert -CAROOTC:\\Users\\Administrator\\AppData\\Local\\mkcertE:\\code\\golang\\bin>\n```\n\n\n\n将证书服务器的rootCA-key.pem和rootCA.pem复制到本地. 并且用这两个证书替换掉mkert -CAROOT下的rootCA-key.pem和rootCA.pem\n\n\n\n替换完毕后,再度执行下列命令\n\n\n\n```\nmkcert -install\n```\n\n\n\n至此,WINDOWS上的就配置完毕.\n\n\n\n### 4.LINUX安装CA根证书\n\n\n\n#### 01.下载mkcert\n\n\n\n```\nhttps://github.com/FiloSottile/mkcert/releases/tag/v1.4.3\n```\n\n\n\n在上列地址中下载linux版本的文件.并将mkcert-v1.4.3-linux-amd64.exe重命名为mkcert. 并给与可执行权限.\n\n\n\n#### 02.创建CA证书目录\n\n```\nyum install nss-tools -y# 执行下列命令,不能用powershell打开.# 执行下列命令需要有管理员权限的cmd\nmkcert -install\n```\n\n\n\n#### 03.安装CA证书\n\n\n\n```\n[root@localhost https]# ./mkcert -install\nThe local CA is already installed in the system trust store! 👍\nThe local CA is already installed in the Firefox and/or Chrome/Chromium trust store! 👍\n[root@localhost https]# ./mkcert -CAROOT/root/.local/share/mkcert\n```\n\n\n\n将证书服务器的rootCA-key.pem和rootCA.pem复制或者下载到本地. 并且用这两个证书替换掉mkert -CAROOT下的rootCA-key.pem和rootCA.pem\n\n\n\n替换完毕后,再度执行下列命令\n\n\n\n```\nmkcert -install\n```\n\n\n\n至此,LINUX上的就配置完毕.\n\n\n\n\n\n### 5.MAC安装CA根证书\n\n\n\n#### 01.下载mkcert\n\n\n\n```\nbrew install mkcertbrew install nss\n```\n\n\n\n#### 02.创建CA证书目录\n\n```\nmkcert -install\n```\n\n\n\n#### 03.安装CA证书\n\n\n\n```\nmkcert -installmkcert -CAROOT\n```\n\n\n\n将证书服务器的rootCA-key.pem和rootCA.pem复制或者下载到本地. 并且用这两个证书替换掉mkert -CAROOT下的rootCA-key.pem和rootCA.pem\n\n\n\n替换完毕后,再度执行下列命令\n\n\n\n```\nmkcert -install\n```\n\n\n\n至此,MAC上的就配置完毕.","slug":"network-deploy-https","published":1,"date":"2021-03-15T15:42:33.953Z","updated":"2021-03-15T16:34:27.016Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmchg4iz000s7gvl30stcssh","content":"<p>HTTPS （全称：Hyper Text Transfer Protocol over SecureSocket Layer），是以安全为目标的 HTTP 通道，在HTTP的基础上通过传输加密和身份认证保证了传输过程的安全性</p>\n<h3 id=\"1-为什么需要在内网部署安全的HTTPS\"><a href=\"#1-为什么需要在内网部署安全的HTTPS\" class=\"headerlink\" title=\"1.为什么需要在内网部署安全的HTTPS\"></a>1.为什么需要在内网部署安全的HTTPS</h3><p>(1) 保持正式环境与开发环境一致</p>\n<p>(2) HTTPS普及,倘若不使用可信任的HTTPS,需要做一些额外的配置,比如DOCKER,GRPC,K8S等一些列应用.</p>\n<p>(3) 方便一些语言做良好的开发环境,比如,GO中的gomod.</p>\n<h3 id=\"2-如何在内网部署被客户端信任的HTTPS\"><a href=\"#2-如何在内网部署被客户端信任的HTTPS\" class=\"headerlink\" title=\"2.如何在内网部署被客户端信任的HTTPS\"></a>2.如何在内网部署被客户端信任的HTTPS</h3><h4 id=\"01-Github项目\"><a href=\"#01-Github项目\" class=\"headerlink\" title=\"01.Github项目\"></a>01.Github项目</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;github.com&#x2F;FiloSottile&#x2F;mkcert</span><br></pre></td></tr></table></figure>\n\n\n\n<p>mkcert 是一个使用GO语言编写的生成本地自签证书的小程序，具有跨平台，使用简单，支持多域名，自动信任CA等一系列方便的特性可供本地开发时快速创建HTTPS环境使用.</p>\n<h4 id=\"02-下载mkcert的可执行文件\"><a href=\"#02-下载mkcert的可执行文件\" class=\"headerlink\" title=\"02.下载mkcert的可执行文件\"></a>02.下载mkcert的可执行文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;github.com&#x2F;FiloSottile&#x2F;mkcert&#x2F;releases&#x2F;tag&#x2F;v1.4.3</span><br></pre></td></tr></table></figure>\n\n\n\n<p>根据对应的系统,下载对应的二进制文件.</p>\n<p>下载完毕之后,请将这二进制文件重命名为mkcert,并给mkcert可执行权限.</p>\n<h4 id=\"03-生成CA根证书\"><a href=\"#03-生成CA根证书\" class=\"headerlink\" title=\"03.生成CA根证书\"></a>03.生成CA根证书</h4><p>在生成CA根证书之前,需要准备一台电脑.这台电脑的作用之一就是以后负责生成HTTPS证书的电脑.</p>\n<p>因为个人喜好的原因.自从出道以来,用的服务器都是centos.所以这个HTTPS的生成的计算机系统采用centos8</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install nss-tools -y.&#x2F;mkcert -install</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"04-保存CA根证书\"><a href=\"#04-保存CA根证书\" class=\"headerlink\" title=\"04.保存CA根证书\"></a>04.保存CA根证书</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看根证书的目录</span><br><span class=\"line\">[root@localhost https]# .&#x2F;mkcert -CAROOT&#x2F;root&#x2F;.local&#x2F;share&#x2F;mkcert</span><br><span class=\"line\">[root@localhost https]# ll </span><br><span class=\"line\">&#x2F;root&#x2F;.local&#x2F;share&#x2F;mkcerttotal 8-r--------. 1 root root 2484 Dec 24 21:33 </span><br><span class=\"line\">rootCA-key.pem-rw-r--r--. 1 root root 1688 Dec 24 21:33 rootCA.pem</span><br></pre></td></tr></table></figure>\n\n\n\n<p>将rootCA-key.pem rootCA.pem 保存妥善. 因为,每一台计算机都需要安装这个根证书.</p>\n<p>个人一般是将其放在网络共享盘和基于NGINX搭建的文件服务器里.</p>\n<p>因为,这样方便别人下载安装.</p>\n<h4 id=\"05-生成HTTPS证书\"><a href=\"#05-生成HTTPS证书\" class=\"headerlink\" title=\"05.生成HTTPS证书\"></a>05.生成HTTPS证书</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost https]# .&#x2F;mkcert www.hfdy.com *.hfdy.com</span><br><span class=\"line\">Created a new certificate valid for the following names 📜 - &quot;www.hfdy.com&quot; - &quot;*.hfdy.com&quot;Reminder: X.509 wildcards only go one level deep, so this won&#39;t match a.b.hfdy.com ℹ️ The certificate is at &quot;.&#x2F;www.hfdy.com+1.pem&quot; and the key at &quot;.&#x2F;www.hfdy.com+1-key.pem&quot; ✅It will expire on 24 March 2023 🗓</span><br><span class=\"line\">[root@localhost https]# ls mkcert  </span><br><span class=\"line\">www.hfdy.com+1-key.pem  www.hfdy.com+1.pem</span><br><span class=\"line\">[root@localhost https]# </span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"3-WINDOWS安装CA根证书\"><a href=\"#3-WINDOWS安装CA根证书\" class=\"headerlink\" title=\"3.WINDOWS安装CA根证书\"></a>3.WINDOWS安装CA根证书</h2><h4 id=\"01-下载mkcert\"><a href=\"#01-下载mkcert\" class=\"headerlink\" title=\"01.下载mkcert\"></a>01.下载mkcert</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;github.com&#x2F;FiloSottile&#x2F;mkcert&#x2F;releases&#x2F;tag&#x2F;v1.4.3</span><br></pre></td></tr></table></figure>\n\n\n\n<p>在上列地址中下载windows版本的可执行文件.并将mkcert-v1.4.3-windows-amd64.exe重命名为mkcert.exe</p>\n<h4 id=\"02-创建CA证书目录\"><a href=\"#02-创建CA证书目录\" class=\"headerlink\" title=\"02.创建CA证书目录\"></a>02.创建CA证书目录</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 执行下列命令,不能用powershell打开.# 执行下列命令需要有管理员权限的cmdmkcert -install</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"03-安装CA证书\"><a href=\"#03-安装CA证书\" class=\"headerlink\" title=\"03.安装CA证书\"></a>03.安装CA证书</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">E:\\code\\golang\\bin&gt;mkcert -CAROOTC:\\Users\\Administrator\\AppData\\Local\\mkcertE:\\code\\golang\\bin&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>将证书服务器的rootCA-key.pem和rootCA.pem复制到本地. 并且用这两个证书替换掉mkert -CAROOT下的rootCA-key.pem和rootCA.pem</p>\n<p>替换完毕后,再度执行下列命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkcert -install</span><br></pre></td></tr></table></figure>\n\n\n\n<p>至此,WINDOWS上的就配置完毕.</p>\n<h3 id=\"4-LINUX安装CA根证书\"><a href=\"#4-LINUX安装CA根证书\" class=\"headerlink\" title=\"4.LINUX安装CA根证书\"></a>4.LINUX安装CA根证书</h3><h4 id=\"01-下载mkcert-1\"><a href=\"#01-下载mkcert-1\" class=\"headerlink\" title=\"01.下载mkcert\"></a>01.下载mkcert</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;github.com&#x2F;FiloSottile&#x2F;mkcert&#x2F;releases&#x2F;tag&#x2F;v1.4.3</span><br></pre></td></tr></table></figure>\n\n\n\n<p>在上列地址中下载linux版本的文件.并将mkcert-v1.4.3-linux-amd64.exe重命名为mkcert. 并给与可执行权限.</p>\n<h4 id=\"02-创建CA证书目录-1\"><a href=\"#02-创建CA证书目录-1\" class=\"headerlink\" title=\"02.创建CA证书目录\"></a>02.创建CA证书目录</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install nss-tools -y# 执行下列命令,不能用powershell打开.# 执行下列命令需要有管理员权限的cmd</span><br><span class=\"line\">mkcert -install</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"03-安装CA证书-1\"><a href=\"#03-安装CA证书-1\" class=\"headerlink\" title=\"03.安装CA证书\"></a>03.安装CA证书</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost https]# .&#x2F;mkcert -install</span><br><span class=\"line\">The local CA is already installed in the system trust store! 👍</span><br><span class=\"line\">The local CA is already installed in the Firefox and&#x2F;or Chrome&#x2F;Chromium trust store! 👍</span><br><span class=\"line\">[root@localhost https]# .&#x2F;mkcert -CAROOT&#x2F;root&#x2F;.local&#x2F;share&#x2F;mkcert</span><br></pre></td></tr></table></figure>\n\n\n\n<p>将证书服务器的rootCA-key.pem和rootCA.pem复制或者下载到本地. 并且用这两个证书替换掉mkert -CAROOT下的rootCA-key.pem和rootCA.pem</p>\n<p>替换完毕后,再度执行下列命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkcert -install</span><br></pre></td></tr></table></figure>\n\n\n\n<p>至此,LINUX上的就配置完毕.</p>\n<h3 id=\"5-MAC安装CA根证书\"><a href=\"#5-MAC安装CA根证书\" class=\"headerlink\" title=\"5.MAC安装CA根证书\"></a>5.MAC安装CA根证书</h3><h4 id=\"01-下载mkcert-2\"><a href=\"#01-下载mkcert-2\" class=\"headerlink\" title=\"01.下载mkcert\"></a>01.下载mkcert</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install mkcertbrew install nss</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"02-创建CA证书目录-2\"><a href=\"#02-创建CA证书目录-2\" class=\"headerlink\" title=\"02.创建CA证书目录\"></a>02.创建CA证书目录</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkcert -install</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"03-安装CA证书-2\"><a href=\"#03-安装CA证书-2\" class=\"headerlink\" title=\"03.安装CA证书\"></a>03.安装CA证书</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkcert -installmkcert -CAROOT</span><br></pre></td></tr></table></figure>\n\n\n\n<p>将证书服务器的rootCA-key.pem和rootCA.pem复制或者下载到本地. 并且用这两个证书替换掉mkert -CAROOT下的rootCA-key.pem和rootCA.pem</p>\n<p>替换完毕后,再度执行下列命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkcert -install</span><br></pre></td></tr></table></figure>\n\n\n\n<p>至此,MAC上的就配置完毕.</p>\n","site":{"data":{"contact":[{"title":"github","icon":"icon-github","link":"https://github.com/yuansudong"},{"title":"email","icon":"icon-email","link":"mailto:1145919989@qq.com"},{"title":"qq","icon":"icon-qq","link":"/atom.xml"}],"favicons":["<link rel=\"shortcut icon\" href=\"/img//favicon.ico\">","<link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/img//favicon-16x16.png\">","<link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/img//favicon-32x32.png\">","<link rel=\"icon\" type=\"image/png\" sizes=\"48x48\" href=\"/img//favicon-48x48.png\">","<link rel=\"manifest\" href=\"/img//manifest.json\">","<meta name=\"mobile-web-app-capable\" content=\"yes\">","<meta name=\"theme-color\" content=\"#fff\">","<meta name=\"application-name\">","<link rel=\"apple-touch-icon\" sizes=\"57x57\" href=\"/img//apple-touch-icon-57x57.png\">","<link rel=\"apple-touch-icon\" sizes=\"60x60\" href=\"/img//apple-touch-icon-60x60.png\">","<link rel=\"apple-touch-icon\" sizes=\"72x72\" href=\"/img//apple-touch-icon-72x72.png\">","<link rel=\"apple-touch-icon\" sizes=\"76x76\" href=\"/img//apple-touch-icon-76x76.png\">","<link rel=\"apple-touch-icon\" sizes=\"114x114\" href=\"/img//apple-touch-icon-114x114.png\">","<link rel=\"apple-touch-icon\" sizes=\"120x120\" href=\"/img//apple-touch-icon-120x120.png\">","<link rel=\"apple-touch-icon\" sizes=\"144x144\" href=\"/img//apple-touch-icon-144x144.png\">","<link rel=\"apple-touch-icon\" sizes=\"152x152\" href=\"/img//apple-touch-icon-152x152.png\">","<link rel=\"apple-touch-icon\" sizes=\"167x167\" href=\"/img//apple-touch-icon-167x167.png\">","<link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/img//apple-touch-icon-180x180.png\">","<link rel=\"apple-touch-icon\" sizes=\"1024x1024\" href=\"/img//apple-touch-icon-1024x1024.png\">","<meta name=\"apple-mobile-web-app-capable\" content=\"yes\">","<meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black-translucent\">","<meta name=\"apple-mobile-web-app-title\">","<meta name=\"msapplication-TileColor\" content=\"#fff\">","<meta name=\"msapplication-TileImage\" content=\"/img//mstile-144x144.png\">","<meta name=\"msapplication-config\" content=\"/img//browserconfig.xml\">"]}},"excerpt":"","more":"<p>HTTPS （全称：Hyper Text Transfer Protocol over SecureSocket Layer），是以安全为目标的 HTTP 通道，在HTTP的基础上通过传输加密和身份认证保证了传输过程的安全性</p>\n<h3 id=\"1-为什么需要在内网部署安全的HTTPS\"><a href=\"#1-为什么需要在内网部署安全的HTTPS\" class=\"headerlink\" title=\"1.为什么需要在内网部署安全的HTTPS\"></a>1.为什么需要在内网部署安全的HTTPS</h3><p>(1) 保持正式环境与开发环境一致</p>\n<p>(2) HTTPS普及,倘若不使用可信任的HTTPS,需要做一些额外的配置,比如DOCKER,GRPC,K8S等一些列应用.</p>\n<p>(3) 方便一些语言做良好的开发环境,比如,GO中的gomod.</p>\n<h3 id=\"2-如何在内网部署被客户端信任的HTTPS\"><a href=\"#2-如何在内网部署被客户端信任的HTTPS\" class=\"headerlink\" title=\"2.如何在内网部署被客户端信任的HTTPS\"></a>2.如何在内网部署被客户端信任的HTTPS</h3><h4 id=\"01-Github项目\"><a href=\"#01-Github项目\" class=\"headerlink\" title=\"01.Github项目\"></a>01.Github项目</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;github.com&#x2F;FiloSottile&#x2F;mkcert</span><br></pre></td></tr></table></figure>\n\n\n\n<p>mkcert 是一个使用GO语言编写的生成本地自签证书的小程序，具有跨平台，使用简单，支持多域名，自动信任CA等一系列方便的特性可供本地开发时快速创建HTTPS环境使用.</p>\n<h4 id=\"02-下载mkcert的可执行文件\"><a href=\"#02-下载mkcert的可执行文件\" class=\"headerlink\" title=\"02.下载mkcert的可执行文件\"></a>02.下载mkcert的可执行文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;github.com&#x2F;FiloSottile&#x2F;mkcert&#x2F;releases&#x2F;tag&#x2F;v1.4.3</span><br></pre></td></tr></table></figure>\n\n\n\n<p>根据对应的系统,下载对应的二进制文件.</p>\n<p>下载完毕之后,请将这二进制文件重命名为mkcert,并给mkcert可执行权限.</p>\n<h4 id=\"03-生成CA根证书\"><a href=\"#03-生成CA根证书\" class=\"headerlink\" title=\"03.生成CA根证书\"></a>03.生成CA根证书</h4><p>在生成CA根证书之前,需要准备一台电脑.这台电脑的作用之一就是以后负责生成HTTPS证书的电脑.</p>\n<p>因为个人喜好的原因.自从出道以来,用的服务器都是centos.所以这个HTTPS的生成的计算机系统采用centos8</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install nss-tools -y.&#x2F;mkcert -install</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"04-保存CA根证书\"><a href=\"#04-保存CA根证书\" class=\"headerlink\" title=\"04.保存CA根证书\"></a>04.保存CA根证书</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看根证书的目录</span><br><span class=\"line\">[root@localhost https]# .&#x2F;mkcert -CAROOT&#x2F;root&#x2F;.local&#x2F;share&#x2F;mkcert</span><br><span class=\"line\">[root@localhost https]# ll </span><br><span class=\"line\">&#x2F;root&#x2F;.local&#x2F;share&#x2F;mkcerttotal 8-r--------. 1 root root 2484 Dec 24 21:33 </span><br><span class=\"line\">rootCA-key.pem-rw-r--r--. 1 root root 1688 Dec 24 21:33 rootCA.pem</span><br></pre></td></tr></table></figure>\n\n\n\n<p>将rootCA-key.pem rootCA.pem 保存妥善. 因为,每一台计算机都需要安装这个根证书.</p>\n<p>个人一般是将其放在网络共享盘和基于NGINX搭建的文件服务器里.</p>\n<p>因为,这样方便别人下载安装.</p>\n<h4 id=\"05-生成HTTPS证书\"><a href=\"#05-生成HTTPS证书\" class=\"headerlink\" title=\"05.生成HTTPS证书\"></a>05.生成HTTPS证书</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost https]# .&#x2F;mkcert www.hfdy.com *.hfdy.com</span><br><span class=\"line\">Created a new certificate valid for the following names 📜 - &quot;www.hfdy.com&quot; - &quot;*.hfdy.com&quot;Reminder: X.509 wildcards only go one level deep, so this won&#39;t match a.b.hfdy.com ℹ️ The certificate is at &quot;.&#x2F;www.hfdy.com+1.pem&quot; and the key at &quot;.&#x2F;www.hfdy.com+1-key.pem&quot; ✅It will expire on 24 March 2023 🗓</span><br><span class=\"line\">[root@localhost https]# ls mkcert  </span><br><span class=\"line\">www.hfdy.com+1-key.pem  www.hfdy.com+1.pem</span><br><span class=\"line\">[root@localhost https]# </span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"3-WINDOWS安装CA根证书\"><a href=\"#3-WINDOWS安装CA根证书\" class=\"headerlink\" title=\"3.WINDOWS安装CA根证书\"></a>3.WINDOWS安装CA根证书</h2><h4 id=\"01-下载mkcert\"><a href=\"#01-下载mkcert\" class=\"headerlink\" title=\"01.下载mkcert\"></a>01.下载mkcert</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;github.com&#x2F;FiloSottile&#x2F;mkcert&#x2F;releases&#x2F;tag&#x2F;v1.4.3</span><br></pre></td></tr></table></figure>\n\n\n\n<p>在上列地址中下载windows版本的可执行文件.并将mkcert-v1.4.3-windows-amd64.exe重命名为mkcert.exe</p>\n<h4 id=\"02-创建CA证书目录\"><a href=\"#02-创建CA证书目录\" class=\"headerlink\" title=\"02.创建CA证书目录\"></a>02.创建CA证书目录</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 执行下列命令,不能用powershell打开.# 执行下列命令需要有管理员权限的cmdmkcert -install</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"03-安装CA证书\"><a href=\"#03-安装CA证书\" class=\"headerlink\" title=\"03.安装CA证书\"></a>03.安装CA证书</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">E:\\code\\golang\\bin&gt;mkcert -CAROOTC:\\Users\\Administrator\\AppData\\Local\\mkcertE:\\code\\golang\\bin&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>将证书服务器的rootCA-key.pem和rootCA.pem复制到本地. 并且用这两个证书替换掉mkert -CAROOT下的rootCA-key.pem和rootCA.pem</p>\n<p>替换完毕后,再度执行下列命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkcert -install</span><br></pre></td></tr></table></figure>\n\n\n\n<p>至此,WINDOWS上的就配置完毕.</p>\n<h3 id=\"4-LINUX安装CA根证书\"><a href=\"#4-LINUX安装CA根证书\" class=\"headerlink\" title=\"4.LINUX安装CA根证书\"></a>4.LINUX安装CA根证书</h3><h4 id=\"01-下载mkcert-1\"><a href=\"#01-下载mkcert-1\" class=\"headerlink\" title=\"01.下载mkcert\"></a>01.下载mkcert</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;github.com&#x2F;FiloSottile&#x2F;mkcert&#x2F;releases&#x2F;tag&#x2F;v1.4.3</span><br></pre></td></tr></table></figure>\n\n\n\n<p>在上列地址中下载linux版本的文件.并将mkcert-v1.4.3-linux-amd64.exe重命名为mkcert. 并给与可执行权限.</p>\n<h4 id=\"02-创建CA证书目录-1\"><a href=\"#02-创建CA证书目录-1\" class=\"headerlink\" title=\"02.创建CA证书目录\"></a>02.创建CA证书目录</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install nss-tools -y# 执行下列命令,不能用powershell打开.# 执行下列命令需要有管理员权限的cmd</span><br><span class=\"line\">mkcert -install</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"03-安装CA证书-1\"><a href=\"#03-安装CA证书-1\" class=\"headerlink\" title=\"03.安装CA证书\"></a>03.安装CA证书</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost https]# .&#x2F;mkcert -install</span><br><span class=\"line\">The local CA is already installed in the system trust store! 👍</span><br><span class=\"line\">The local CA is already installed in the Firefox and&#x2F;or Chrome&#x2F;Chromium trust store! 👍</span><br><span class=\"line\">[root@localhost https]# .&#x2F;mkcert -CAROOT&#x2F;root&#x2F;.local&#x2F;share&#x2F;mkcert</span><br></pre></td></tr></table></figure>\n\n\n\n<p>将证书服务器的rootCA-key.pem和rootCA.pem复制或者下载到本地. 并且用这两个证书替换掉mkert -CAROOT下的rootCA-key.pem和rootCA.pem</p>\n<p>替换完毕后,再度执行下列命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkcert -install</span><br></pre></td></tr></table></figure>\n\n\n\n<p>至此,LINUX上的就配置完毕.</p>\n<h3 id=\"5-MAC安装CA根证书\"><a href=\"#5-MAC安装CA根证书\" class=\"headerlink\" title=\"5.MAC安装CA根证书\"></a>5.MAC安装CA根证书</h3><h4 id=\"01-下载mkcert-2\"><a href=\"#01-下载mkcert-2\" class=\"headerlink\" title=\"01.下载mkcert\"></a>01.下载mkcert</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install mkcertbrew install nss</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"02-创建CA证书目录-2\"><a href=\"#02-创建CA证书目录-2\" class=\"headerlink\" title=\"02.创建CA证书目录\"></a>02.创建CA证书目录</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkcert -install</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"03-安装CA证书-2\"><a href=\"#03-安装CA证书-2\" class=\"headerlink\" title=\"03.安装CA证书\"></a>03.安装CA证书</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkcert -installmkcert -CAROOT</span><br></pre></td></tr></table></figure>\n\n\n\n<p>将证书服务器的rootCA-key.pem和rootCA.pem复制或者下载到本地. 并且用这两个证书替换掉mkert -CAROOT下的rootCA-key.pem和rootCA.pem</p>\n<p>替换完毕后,再度执行下列命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkcert -install</span><br></pre></td></tr></table></figure>\n\n\n\n<p>至此,MAC上的就配置完毕.</p>\n"},{"title":"企业网络之部署NGINX","cover":"/img/network-deploy/nginx_title.png","subtitle":"企业网络之部署NGINX","author":{"nick":"袁苏东","link":"https://github.com/yuansudong"},"typora-root-url":"network-deploy-nginx","_content":"NGINX是一款轻量级的WEB服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器，在BSD-LIKE 协议下发行.\n\n\n\n其特点是占有内存少，并发能力强，事实上nginx的并发能力在同类型的网页服务器中表现较好.\n\n\n\nNGINX的安装方式有两种.第一种是通过YUM源安装,第二种是编译安装.\n\n\n\n此处采用编译安装的方式.之所以采用编译安装的方式,是因为个人所从事的工作中会频繁的用到一些NGINX的三方模块.\n\n\n\n通过维护一个NGINX工程,在需要用到三方模块的时候,在将三方模块通过GIT CLONE 进NGINX工程之后,配合CI/CD,可以很方便的对线上或者内网的NGINX做更新.\n\n\n\n#### 01.通过YUM安装相关依赖\n\n\n\n```\ndnf  install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm\ndnf  config-manager --set-enabled powertools\ndnf  install -y wget curl gcc-c++ pcre pcre-devel zlib zlib-devel \ndnf  install -y libxslt-devel\ndnf  install -y libuuid-devel libblkid-devel libudev-devel \ndnf  install -y fuse-devel libedit-devel libatomic_ops-devel\ndnf  install -y openssl openssl-devel perl gd-devel\n```\n\n\n\n#### 02.下载NGINX的源码并解压\n\n\n\n```\nwget http://nginx.org/download/nginx-1.19.6.tar.gztar -zxvf nginx-1.19.6.tar.gzmv nginx-1.19.6 nginx\n```\n\n\n\n#### 03.配置工程\n\n\n\n在配置工程之前,需要使用下列命令查看下NGINX有哪些模块.根据自身目前需求可以删减相关的模块\n\n\n\n```\n[root@localhost nginx]# ./configure --help\n  --help                             print this message\n  --prefix=PATH                      set installation prefix\n  --sbin-path=PATH                   set nginx binary pathname\n  --modules-path=PATH                set modules path\n  --conf-path=PATH                   set nginx.conf pathname\n  --error-log-path=PATH              set error log pathname\n  --pid-path=PATH                    set nginx.pid pathname\n  --lock-path=PATH                   set nginx.lock pathname\n\n  --user=USER                        set non-privileged user for\n                                     worker processes\n  --group=GROUP                      set non-privileged group for\n                                     worker processes\n\n  --build=NAME                       set build name\n  --builddir=DIR                     set build directory\n\n  --with-select_module               enable select module\n  --without-select_module            disable select module\n  --with-poll_module                 enable poll module\n  --without-poll_module              disable poll module\n\n  --with-threads                     enable thread pool support\n\n  --with-file-aio                    enable file AIO support\n\n  --with-http_ssl_module             enable ngx_http_ssl_module\n  --with-http_v2_module              enable ngx_http_v2_module\n  --with-http_realip_module          enable ngx_http_realip_module\n  --with-http_addition_module        enable ngx_http_addition_module\n  --with-http_xslt_module            enable ngx_http_xslt_module\n  --with-http_xslt_module=dynamic    enable dynamic ngx_http_xslt_module\n  --with-http_image_filter_module    enable ngx_http_image_filter_module\n  --with-http_image_filter_module=dynamic\n                                     enable dynamic ngx_http_image_filter_module\n  --with-http_geoip_module           enable ngx_http_geoip_module\n  --with-http_geoip_module=dynamic   enable dynamic ngx_http_geoip_module\n  --with-http_sub_module             enable ngx_http_sub_module\n  --with-http_dav_module             enable ngx_http_dav_module\n  --with-http_flv_module             enable ngx_http_flv_module\n  --with-http_mp4_module             enable ngx_http_mp4_module\n  --with-http_gunzip_module          enable ngx_http_gunzip_module\n  --with-http_gzip_static_module     enable ngx_http_gzip_static_module\n  --with-http_auth_request_module    enable ngx_http_auth_request_module\n  --with-http_random_index_module    enable ngx_http_random_index_module\n  --with-http_secure_link_module     enable ngx_http_secure_link_module\n  --with-http_degradation_module     enable ngx_http_degradation_module\n  --with-http_slice_module           enable ngx_http_slice_module\n  --with-http_stub_status_module     enable ngx_http_stub_status_module\n\n  --without-http_charset_module      disable ngx_http_charset_module\n  --without-http_gzip_module         disable ngx_http_gzip_module\n  --without-http_ssi_module          disable ngx_http_ssi_module\n  --without-http_userid_module       disable ngx_http_userid_module\n  --without-http_access_module       disable ngx_http_access_module\n  --without-http_auth_basic_module   disable ngx_http_auth_basic_module\n  --without-http_mirror_module       disable ngx_http_mirror_module\n  --without-http_autoindex_module    disable ngx_http_autoindex_module\n  --without-http_geo_module          disable ngx_http_geo_module\n  --without-http_map_module          disable ngx_http_map_module\n  --without-http_split_clients_module disable ngx_http_split_clients_module\n  --without-http_referer_module      disable ngx_http_referer_module\n  --without-http_rewrite_module      disable ngx_http_rewrite_module\n  --without-http_proxy_module        disable ngx_http_proxy_module\n  --without-http_fastcgi_module      disable ngx_http_fastcgi_module\n  --without-http_uwsgi_module        disable ngx_http_uwsgi_module\n  --without-http_scgi_module         disable ngx_http_scgi_module\n  --without-http_grpc_module         disable ngx_http_grpc_module\n  --without-http_memcached_module    disable ngx_http_memcached_module\n  --without-http_limit_conn_module   disable ngx_http_limit_conn_module\n  --without-http_limit_req_module    disable ngx_http_limit_req_module\n  --without-http_empty_gif_module    disable ngx_http_empty_gif_module\n  --without-http_browser_module      disable ngx_http_browser_module\n  --without-http_upstream_hash_module\n                                     disable ngx_http_upstream_hash_module\n  --without-http_upstream_ip_hash_module\n                                     disable ngx_http_upstream_ip_hash_module\n  --without-http_upstream_least_conn_module\n                                     disable ngx_http_upstream_least_conn_module\n  --without-http_upstream_random_module\n                                     disable ngx_http_upstream_random_module\n  --without-http_upstream_keepalive_module\n                                     disable ngx_http_upstream_keepalive_module\n  --without-http_upstream_zone_module\n                                     disable ngx_http_upstream_zone_module\n\n  --with-http_perl_module            enable ngx_http_perl_module\n  --with-http_perl_module=dynamic    enable dynamic ngx_http_perl_module\n  --with-perl_modules_path=PATH      set Perl modules path\n  --with-perl=PATH                   set perl binary pathname\n\n  --http-log-path=PATH               set http access log pathname\n  --http-client-body-temp-path=PATH  set path to store\n                                     http client request body temporary files\n  --http-proxy-temp-path=PATH        set path to store\n                                     http proxy temporary files\n  --http-fastcgi-temp-path=PATH      set path to store\n                                     http fastcgi temporary files\n  --http-uwsgi-temp-path=PATH        set path to store\n                                     http uwsgi temporary files\n  --http-scgi-temp-path=PATH         set path to store\n                                     http scgi temporary files\n\n  --without-http                     disable HTTP server\n  --without-http-cache               disable HTTP cache\n\n  --with-mail                        enable POP3/IMAP4/SMTP proxy module\n  --with-mail=dynamic                enable dynamic POP3/IMAP4/SMTP proxy module\n  --with-mail_ssl_module             enable ngx_mail_ssl_module\n  --without-mail_pop3_module         disable ngx_mail_pop3_module\n  --without-mail_imap_module         disable ngx_mail_imap_module\n  --without-mail_smtp_module         disable ngx_mail_smtp_module\n\n  --with-stream                      enable TCP/UDP proxy module\n  --with-stream=dynamic              enable dynamic TCP/UDP proxy module\n  --with-stream_ssl_module           enable ngx_stream_ssl_module\n  --with-stream_realip_module        enable ngx_stream_realip_module\n  --with-stream_geoip_module         enable ngx_stream_geoip_module\n  --with-stream_geoip_module=dynamic enable dynamic ngx_stream_geoip_module\n  --with-stream_ssl_preread_module   enable ngx_stream_ssl_preread_module\n  --without-stream_limit_conn_module disable ngx_stream_limit_conn_module\n  --without-stream_access_module     disable ngx_stream_access_module\n  --without-stream_geo_module        disable ngx_stream_geo_module\n  --without-stream_map_module        disable ngx_stream_map_module\n  --without-stream_split_clients_module\n                                     disable ngx_stream_split_clients_module\n  --without-stream_return_module     disable ngx_stream_return_module\n  --without-stream_set_module        disable ngx_stream_set_module\n  --without-stream_upstream_hash_module\n                                     disable ngx_stream_upstream_hash_module\n  --without-stream_upstream_least_conn_module\n                                     disable ngx_stream_upstream_least_conn_module\n  --without-stream_upstream_random_module\n                                     disable ngx_stream_upstream_random_module\n  --without-stream_upstream_zone_module\n                                     disable ngx_stream_upstream_zone_module\n\n  --with-google_perftools_module     enable ngx_google_perftools_module\n  --with-cpp_test_module             enable ngx_cpp_test_module\n\n  --add-module=PATH                  enable external module\n  --add-dynamic-module=PATH          enable dynamic external module\n\n  --with-compat                      dynamic modules compatibility\n\n  --with-cc=PATH                     set C compiler pathname\n  --with-cpp=PATH                    set C preprocessor pathname\n  --with-cc-opt=OPTIONS              set additional C compiler options\n  --with-ld-opt=OPTIONS              set additional linker options\n  --with-cpu-opt=CPU                 build for the specified CPU, valid values:\n                                     pentium, pentiumpro, pentium3, pentium4,\n                                     athlon, opteron, sparc32, sparc64, ppc64\n\n  --without-pcre                     disable PCRE library usage\n  --with-pcre                        force PCRE library usage\n  --with-pcre=DIR                    set path to PCRE library sources\n  --with-pcre-opt=OPTIONS            set additional build options for PCRE\n  --with-pcre-jit                    build PCRE with JIT compilation support\n\n  --with-zlib=DIR                    set path to zlib library sources\n  --with-zlib-opt=OPTIONS            set additional build options for zlib\n  --with-zlib-asm=CPU                use zlib assembler sources optimized\n                                     for the specified CPU, valid values:\n                                     pentium, pentiumpro\n\n  --with-libatomic                   force libatomic_ops library usage\n  --with-libatomic=DIR               set path to libatomic_ops library sources\n\n  --with-openssl=DIR                 set path to OpenSSL library sources\n  --with-openssl-opt=OPTIONS         set additional build options for OpenSSL\n\n  --with-debug                       enable debug logging\n```\n\n\n\n下面是个人需要的配置\n\n\n\n```\n./configure --with-libatomic --with-pcre --with-compat \\\n  --with-stream --with-stream=dynamic --with-http_sub_module --with-http_dav_module --with-http_flv_module   \\\n  --with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module \\\n  --with-http_mp4_module --with-http_gunzip_module --with-http_gzip_static_module \\\n  --with-http_auth_request_module    --with-http_random_index_module   --with-http_secure_link_module \\\n  --with-http_degradation_module     --with-http_slice_module --with-http_stub_status_module \\\n  --with-threads --with-file-aio --with-http_ssl_module --with-http_v2_module --with-http_realip_module \\\n  --with-http_addition_module --with-http_xslt_module --with-http_xslt_module=dynamic --with-http_image_filter_module --with-http_image_filter_module=dynamic\\\n  --prefix=/etc/nginx \\\n  --sbin-path=/etc/nginx/nginx \\\n  --modules-path=/etc/nginx/modules \\\n  --conf-path=/etc/nginx/nginx.conf \\\n  --error-log-path=/etc/nginx/log \\\n  --pid-path=/etc/nginx/run/nginx.pid \\\n  --lock-path=/etc/nginx/nginx.lock\n```\n\n\n\n#### 04.编译&安装\n\n\n\n```\nmake make install\n```\n\n\n\n#### 05.加入systemctl\n\n\n\n进入 /usr/lib/systemd/system 目录下，编辑文件 nginx.service\n\n\n\n```\ncat > /usr/lib/systemd/system/nginx.service <<EOF\n[Unit]\nDescription=nginx\nAfter=network.target\n\n[Service]\nType=forking\nExecStart=/etc/nginx/nginx\nExecReload=/etc/nginx/nginx -s reload\nExecStop=/etc/nginx/nginx -s quit\nPrivateTmp=true\n\n[Install]\nWantedBy=multi-user.target\n\nEOF\nsystemctl daemon-reload \nsystemctl start nginx\nsystemctl enable nginx\n```\n\n\n\n#### 06.使用方式\n\n\n\n```\nsystemctl start nginx # 启动nginx\nsystemctl status nginx # 查看nginx的命令\nsystemctl restart nginx # 重启nginx服务\nsystemctl stop nginx # 停止nginx服务\nsystemctl enable nginx # 将nginx设为开机启动\nsystemctl reload nginx # 重新加载配置\n```","source":"_posts/network-deploy-nginx.md","raw":"---\ntitle: 企业网络之部署NGINX\ncover:  /img/network-deploy/nginx_title.png\nsubtitle: 企业网络之部署NGINX\ncategories: \"企业网络\"\ntags: \"企业网络\"\nauthor:\n  nick: 袁苏东\n  link: https://github.com/yuansudong\ntypora-root-url: network-deploy-nginx\n\n---\nNGINX是一款轻量级的WEB服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器，在BSD-LIKE 协议下发行.\n\n\n\n其特点是占有内存少，并发能力强，事实上nginx的并发能力在同类型的网页服务器中表现较好.\n\n\n\nNGINX的安装方式有两种.第一种是通过YUM源安装,第二种是编译安装.\n\n\n\n此处采用编译安装的方式.之所以采用编译安装的方式,是因为个人所从事的工作中会频繁的用到一些NGINX的三方模块.\n\n\n\n通过维护一个NGINX工程,在需要用到三方模块的时候,在将三方模块通过GIT CLONE 进NGINX工程之后,配合CI/CD,可以很方便的对线上或者内网的NGINX做更新.\n\n\n\n#### 01.通过YUM安装相关依赖\n\n\n\n```\ndnf  install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm\ndnf  config-manager --set-enabled powertools\ndnf  install -y wget curl gcc-c++ pcre pcre-devel zlib zlib-devel \ndnf  install -y libxslt-devel\ndnf  install -y libuuid-devel libblkid-devel libudev-devel \ndnf  install -y fuse-devel libedit-devel libatomic_ops-devel\ndnf  install -y openssl openssl-devel perl gd-devel\n```\n\n\n\n#### 02.下载NGINX的源码并解压\n\n\n\n```\nwget http://nginx.org/download/nginx-1.19.6.tar.gztar -zxvf nginx-1.19.6.tar.gzmv nginx-1.19.6 nginx\n```\n\n\n\n#### 03.配置工程\n\n\n\n在配置工程之前,需要使用下列命令查看下NGINX有哪些模块.根据自身目前需求可以删减相关的模块\n\n\n\n```\n[root@localhost nginx]# ./configure --help\n  --help                             print this message\n  --prefix=PATH                      set installation prefix\n  --sbin-path=PATH                   set nginx binary pathname\n  --modules-path=PATH                set modules path\n  --conf-path=PATH                   set nginx.conf pathname\n  --error-log-path=PATH              set error log pathname\n  --pid-path=PATH                    set nginx.pid pathname\n  --lock-path=PATH                   set nginx.lock pathname\n\n  --user=USER                        set non-privileged user for\n                                     worker processes\n  --group=GROUP                      set non-privileged group for\n                                     worker processes\n\n  --build=NAME                       set build name\n  --builddir=DIR                     set build directory\n\n  --with-select_module               enable select module\n  --without-select_module            disable select module\n  --with-poll_module                 enable poll module\n  --without-poll_module              disable poll module\n\n  --with-threads                     enable thread pool support\n\n  --with-file-aio                    enable file AIO support\n\n  --with-http_ssl_module             enable ngx_http_ssl_module\n  --with-http_v2_module              enable ngx_http_v2_module\n  --with-http_realip_module          enable ngx_http_realip_module\n  --with-http_addition_module        enable ngx_http_addition_module\n  --with-http_xslt_module            enable ngx_http_xslt_module\n  --with-http_xslt_module=dynamic    enable dynamic ngx_http_xslt_module\n  --with-http_image_filter_module    enable ngx_http_image_filter_module\n  --with-http_image_filter_module=dynamic\n                                     enable dynamic ngx_http_image_filter_module\n  --with-http_geoip_module           enable ngx_http_geoip_module\n  --with-http_geoip_module=dynamic   enable dynamic ngx_http_geoip_module\n  --with-http_sub_module             enable ngx_http_sub_module\n  --with-http_dav_module             enable ngx_http_dav_module\n  --with-http_flv_module             enable ngx_http_flv_module\n  --with-http_mp4_module             enable ngx_http_mp4_module\n  --with-http_gunzip_module          enable ngx_http_gunzip_module\n  --with-http_gzip_static_module     enable ngx_http_gzip_static_module\n  --with-http_auth_request_module    enable ngx_http_auth_request_module\n  --with-http_random_index_module    enable ngx_http_random_index_module\n  --with-http_secure_link_module     enable ngx_http_secure_link_module\n  --with-http_degradation_module     enable ngx_http_degradation_module\n  --with-http_slice_module           enable ngx_http_slice_module\n  --with-http_stub_status_module     enable ngx_http_stub_status_module\n\n  --without-http_charset_module      disable ngx_http_charset_module\n  --without-http_gzip_module         disable ngx_http_gzip_module\n  --without-http_ssi_module          disable ngx_http_ssi_module\n  --without-http_userid_module       disable ngx_http_userid_module\n  --without-http_access_module       disable ngx_http_access_module\n  --without-http_auth_basic_module   disable ngx_http_auth_basic_module\n  --without-http_mirror_module       disable ngx_http_mirror_module\n  --without-http_autoindex_module    disable ngx_http_autoindex_module\n  --without-http_geo_module          disable ngx_http_geo_module\n  --without-http_map_module          disable ngx_http_map_module\n  --without-http_split_clients_module disable ngx_http_split_clients_module\n  --without-http_referer_module      disable ngx_http_referer_module\n  --without-http_rewrite_module      disable ngx_http_rewrite_module\n  --without-http_proxy_module        disable ngx_http_proxy_module\n  --without-http_fastcgi_module      disable ngx_http_fastcgi_module\n  --without-http_uwsgi_module        disable ngx_http_uwsgi_module\n  --without-http_scgi_module         disable ngx_http_scgi_module\n  --without-http_grpc_module         disable ngx_http_grpc_module\n  --without-http_memcached_module    disable ngx_http_memcached_module\n  --without-http_limit_conn_module   disable ngx_http_limit_conn_module\n  --without-http_limit_req_module    disable ngx_http_limit_req_module\n  --without-http_empty_gif_module    disable ngx_http_empty_gif_module\n  --without-http_browser_module      disable ngx_http_browser_module\n  --without-http_upstream_hash_module\n                                     disable ngx_http_upstream_hash_module\n  --without-http_upstream_ip_hash_module\n                                     disable ngx_http_upstream_ip_hash_module\n  --without-http_upstream_least_conn_module\n                                     disable ngx_http_upstream_least_conn_module\n  --without-http_upstream_random_module\n                                     disable ngx_http_upstream_random_module\n  --without-http_upstream_keepalive_module\n                                     disable ngx_http_upstream_keepalive_module\n  --without-http_upstream_zone_module\n                                     disable ngx_http_upstream_zone_module\n\n  --with-http_perl_module            enable ngx_http_perl_module\n  --with-http_perl_module=dynamic    enable dynamic ngx_http_perl_module\n  --with-perl_modules_path=PATH      set Perl modules path\n  --with-perl=PATH                   set perl binary pathname\n\n  --http-log-path=PATH               set http access log pathname\n  --http-client-body-temp-path=PATH  set path to store\n                                     http client request body temporary files\n  --http-proxy-temp-path=PATH        set path to store\n                                     http proxy temporary files\n  --http-fastcgi-temp-path=PATH      set path to store\n                                     http fastcgi temporary files\n  --http-uwsgi-temp-path=PATH        set path to store\n                                     http uwsgi temporary files\n  --http-scgi-temp-path=PATH         set path to store\n                                     http scgi temporary files\n\n  --without-http                     disable HTTP server\n  --without-http-cache               disable HTTP cache\n\n  --with-mail                        enable POP3/IMAP4/SMTP proxy module\n  --with-mail=dynamic                enable dynamic POP3/IMAP4/SMTP proxy module\n  --with-mail_ssl_module             enable ngx_mail_ssl_module\n  --without-mail_pop3_module         disable ngx_mail_pop3_module\n  --without-mail_imap_module         disable ngx_mail_imap_module\n  --without-mail_smtp_module         disable ngx_mail_smtp_module\n\n  --with-stream                      enable TCP/UDP proxy module\n  --with-stream=dynamic              enable dynamic TCP/UDP proxy module\n  --with-stream_ssl_module           enable ngx_stream_ssl_module\n  --with-stream_realip_module        enable ngx_stream_realip_module\n  --with-stream_geoip_module         enable ngx_stream_geoip_module\n  --with-stream_geoip_module=dynamic enable dynamic ngx_stream_geoip_module\n  --with-stream_ssl_preread_module   enable ngx_stream_ssl_preread_module\n  --without-stream_limit_conn_module disable ngx_stream_limit_conn_module\n  --without-stream_access_module     disable ngx_stream_access_module\n  --without-stream_geo_module        disable ngx_stream_geo_module\n  --without-stream_map_module        disable ngx_stream_map_module\n  --without-stream_split_clients_module\n                                     disable ngx_stream_split_clients_module\n  --without-stream_return_module     disable ngx_stream_return_module\n  --without-stream_set_module        disable ngx_stream_set_module\n  --without-stream_upstream_hash_module\n                                     disable ngx_stream_upstream_hash_module\n  --without-stream_upstream_least_conn_module\n                                     disable ngx_stream_upstream_least_conn_module\n  --without-stream_upstream_random_module\n                                     disable ngx_stream_upstream_random_module\n  --without-stream_upstream_zone_module\n                                     disable ngx_stream_upstream_zone_module\n\n  --with-google_perftools_module     enable ngx_google_perftools_module\n  --with-cpp_test_module             enable ngx_cpp_test_module\n\n  --add-module=PATH                  enable external module\n  --add-dynamic-module=PATH          enable dynamic external module\n\n  --with-compat                      dynamic modules compatibility\n\n  --with-cc=PATH                     set C compiler pathname\n  --with-cpp=PATH                    set C preprocessor pathname\n  --with-cc-opt=OPTIONS              set additional C compiler options\n  --with-ld-opt=OPTIONS              set additional linker options\n  --with-cpu-opt=CPU                 build for the specified CPU, valid values:\n                                     pentium, pentiumpro, pentium3, pentium4,\n                                     athlon, opteron, sparc32, sparc64, ppc64\n\n  --without-pcre                     disable PCRE library usage\n  --with-pcre                        force PCRE library usage\n  --with-pcre=DIR                    set path to PCRE library sources\n  --with-pcre-opt=OPTIONS            set additional build options for PCRE\n  --with-pcre-jit                    build PCRE with JIT compilation support\n\n  --with-zlib=DIR                    set path to zlib library sources\n  --with-zlib-opt=OPTIONS            set additional build options for zlib\n  --with-zlib-asm=CPU                use zlib assembler sources optimized\n                                     for the specified CPU, valid values:\n                                     pentium, pentiumpro\n\n  --with-libatomic                   force libatomic_ops library usage\n  --with-libatomic=DIR               set path to libatomic_ops library sources\n\n  --with-openssl=DIR                 set path to OpenSSL library sources\n  --with-openssl-opt=OPTIONS         set additional build options for OpenSSL\n\n  --with-debug                       enable debug logging\n```\n\n\n\n下面是个人需要的配置\n\n\n\n```\n./configure --with-libatomic --with-pcre --with-compat \\\n  --with-stream --with-stream=dynamic --with-http_sub_module --with-http_dav_module --with-http_flv_module   \\\n  --with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module \\\n  --with-http_mp4_module --with-http_gunzip_module --with-http_gzip_static_module \\\n  --with-http_auth_request_module    --with-http_random_index_module   --with-http_secure_link_module \\\n  --with-http_degradation_module     --with-http_slice_module --with-http_stub_status_module \\\n  --with-threads --with-file-aio --with-http_ssl_module --with-http_v2_module --with-http_realip_module \\\n  --with-http_addition_module --with-http_xslt_module --with-http_xslt_module=dynamic --with-http_image_filter_module --with-http_image_filter_module=dynamic\\\n  --prefix=/etc/nginx \\\n  --sbin-path=/etc/nginx/nginx \\\n  --modules-path=/etc/nginx/modules \\\n  --conf-path=/etc/nginx/nginx.conf \\\n  --error-log-path=/etc/nginx/log \\\n  --pid-path=/etc/nginx/run/nginx.pid \\\n  --lock-path=/etc/nginx/nginx.lock\n```\n\n\n\n#### 04.编译&安装\n\n\n\n```\nmake make install\n```\n\n\n\n#### 05.加入systemctl\n\n\n\n进入 /usr/lib/systemd/system 目录下，编辑文件 nginx.service\n\n\n\n```\ncat > /usr/lib/systemd/system/nginx.service <<EOF\n[Unit]\nDescription=nginx\nAfter=network.target\n\n[Service]\nType=forking\nExecStart=/etc/nginx/nginx\nExecReload=/etc/nginx/nginx -s reload\nExecStop=/etc/nginx/nginx -s quit\nPrivateTmp=true\n\n[Install]\nWantedBy=multi-user.target\n\nEOF\nsystemctl daemon-reload \nsystemctl start nginx\nsystemctl enable nginx\n```\n\n\n\n#### 06.使用方式\n\n\n\n```\nsystemctl start nginx # 启动nginx\nsystemctl status nginx # 查看nginx的命令\nsystemctl restart nginx # 重启nginx服务\nsystemctl stop nginx # 停止nginx服务\nsystemctl enable nginx # 将nginx设为开机启动\nsystemctl reload nginx # 重新加载配置\n```","slug":"network-deploy-nginx","published":1,"date":"2021-03-15T16:29:38.516Z","updated":"2021-03-15T16:40:22.700Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmchg4j1000u7gvldq34gyz7","content":"<p>NGINX是一款轻量级的WEB服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器，在BSD-LIKE 协议下发行.</p>\n<p>其特点是占有内存少，并发能力强，事实上nginx的并发能力在同类型的网页服务器中表现较好.</p>\n<p>NGINX的安装方式有两种.第一种是通过YUM源安装,第二种是编译安装.</p>\n<p>此处采用编译安装的方式.之所以采用编译安装的方式,是因为个人所从事的工作中会频繁的用到一些NGINX的三方模块.</p>\n<p>通过维护一个NGINX工程,在需要用到三方模块的时候,在将三方模块通过GIT CLONE 进NGINX工程之后,配合CI/CD,可以很方便的对线上或者内网的NGINX做更新.</p>\n<h4 id=\"01-通过YUM安装相关依赖\"><a href=\"#01-通过YUM安装相关依赖\" class=\"headerlink\" title=\"01.通过YUM安装相关依赖\"></a>01.通过YUM安装相关依赖</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf  install -y https:&#x2F;&#x2F;dl.fedoraproject.org&#x2F;pub&#x2F;epel&#x2F;epel-release-latest-8.noarch.rpm</span><br><span class=\"line\">dnf  config-manager --set-enabled powertools</span><br><span class=\"line\">dnf  install -y wget curl gcc-c++ pcre pcre-devel zlib zlib-devel </span><br><span class=\"line\">dnf  install -y libxslt-devel</span><br><span class=\"line\">dnf  install -y libuuid-devel libblkid-devel libudev-devel </span><br><span class=\"line\">dnf  install -y fuse-devel libedit-devel libatomic_ops-devel</span><br><span class=\"line\">dnf  install -y openssl openssl-devel perl gd-devel</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"02-下载NGINX的源码并解压\"><a href=\"#02-下载NGINX的源码并解压\" class=\"headerlink\" title=\"02.下载NGINX的源码并解压\"></a>02.下载NGINX的源码并解压</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http:&#x2F;&#x2F;nginx.org&#x2F;download&#x2F;nginx-1.19.6.tar.gztar -zxvf nginx-1.19.6.tar.gzmv nginx-1.19.6 nginx</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"03-配置工程\"><a href=\"#03-配置工程\" class=\"headerlink\" title=\"03.配置工程\"></a>03.配置工程</h4><p>在配置工程之前,需要使用下列命令查看下NGINX有哪些模块.根据自身目前需求可以删减相关的模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost nginx]# .&#x2F;configure --help</span><br><span class=\"line\">  --help                             print this message</span><br><span class=\"line\">  --prefix&#x3D;PATH                      set installation prefix</span><br><span class=\"line\">  --sbin-path&#x3D;PATH                   set nginx binary pathname</span><br><span class=\"line\">  --modules-path&#x3D;PATH                set modules path</span><br><span class=\"line\">  --conf-path&#x3D;PATH                   set nginx.conf pathname</span><br><span class=\"line\">  --error-log-path&#x3D;PATH              set error log pathname</span><br><span class=\"line\">  --pid-path&#x3D;PATH                    set nginx.pid pathname</span><br><span class=\"line\">  --lock-path&#x3D;PATH                   set nginx.lock pathname</span><br><span class=\"line\"></span><br><span class=\"line\">  --user&#x3D;USER                        set non-privileged user for</span><br><span class=\"line\">                                     worker processes</span><br><span class=\"line\">  --group&#x3D;GROUP                      set non-privileged group for</span><br><span class=\"line\">                                     worker processes</span><br><span class=\"line\"></span><br><span class=\"line\">  --build&#x3D;NAME                       set build name</span><br><span class=\"line\">  --builddir&#x3D;DIR                     set build directory</span><br><span class=\"line\"></span><br><span class=\"line\">  --with-select_module               enable select module</span><br><span class=\"line\">  --without-select_module            disable select module</span><br><span class=\"line\">  --with-poll_module                 enable poll module</span><br><span class=\"line\">  --without-poll_module              disable poll module</span><br><span class=\"line\"></span><br><span class=\"line\">  --with-threads                     enable thread pool support</span><br><span class=\"line\"></span><br><span class=\"line\">  --with-file-aio                    enable file AIO support</span><br><span class=\"line\"></span><br><span class=\"line\">  --with-http_ssl_module             enable ngx_http_ssl_module</span><br><span class=\"line\">  --with-http_v2_module              enable ngx_http_v2_module</span><br><span class=\"line\">  --with-http_realip_module          enable ngx_http_realip_module</span><br><span class=\"line\">  --with-http_addition_module        enable ngx_http_addition_module</span><br><span class=\"line\">  --with-http_xslt_module            enable ngx_http_xslt_module</span><br><span class=\"line\">  --with-http_xslt_module&#x3D;dynamic    enable dynamic ngx_http_xslt_module</span><br><span class=\"line\">  --with-http_image_filter_module    enable ngx_http_image_filter_module</span><br><span class=\"line\">  --with-http_image_filter_module&#x3D;dynamic</span><br><span class=\"line\">                                     enable dynamic ngx_http_image_filter_module</span><br><span class=\"line\">  --with-http_geoip_module           enable ngx_http_geoip_module</span><br><span class=\"line\">  --with-http_geoip_module&#x3D;dynamic   enable dynamic ngx_http_geoip_module</span><br><span class=\"line\">  --with-http_sub_module             enable ngx_http_sub_module</span><br><span class=\"line\">  --with-http_dav_module             enable ngx_http_dav_module</span><br><span class=\"line\">  --with-http_flv_module             enable ngx_http_flv_module</span><br><span class=\"line\">  --with-http_mp4_module             enable ngx_http_mp4_module</span><br><span class=\"line\">  --with-http_gunzip_module          enable ngx_http_gunzip_module</span><br><span class=\"line\">  --with-http_gzip_static_module     enable ngx_http_gzip_static_module</span><br><span class=\"line\">  --with-http_auth_request_module    enable ngx_http_auth_request_module</span><br><span class=\"line\">  --with-http_random_index_module    enable ngx_http_random_index_module</span><br><span class=\"line\">  --with-http_secure_link_module     enable ngx_http_secure_link_module</span><br><span class=\"line\">  --with-http_degradation_module     enable ngx_http_degradation_module</span><br><span class=\"line\">  --with-http_slice_module           enable ngx_http_slice_module</span><br><span class=\"line\">  --with-http_stub_status_module     enable ngx_http_stub_status_module</span><br><span class=\"line\"></span><br><span class=\"line\">  --without-http_charset_module      disable ngx_http_charset_module</span><br><span class=\"line\">  --without-http_gzip_module         disable ngx_http_gzip_module</span><br><span class=\"line\">  --without-http_ssi_module          disable ngx_http_ssi_module</span><br><span class=\"line\">  --without-http_userid_module       disable ngx_http_userid_module</span><br><span class=\"line\">  --without-http_access_module       disable ngx_http_access_module</span><br><span class=\"line\">  --without-http_auth_basic_module   disable ngx_http_auth_basic_module</span><br><span class=\"line\">  --without-http_mirror_module       disable ngx_http_mirror_module</span><br><span class=\"line\">  --without-http_autoindex_module    disable ngx_http_autoindex_module</span><br><span class=\"line\">  --without-http_geo_module          disable ngx_http_geo_module</span><br><span class=\"line\">  --without-http_map_module          disable ngx_http_map_module</span><br><span class=\"line\">  --without-http_split_clients_module disable ngx_http_split_clients_module</span><br><span class=\"line\">  --without-http_referer_module      disable ngx_http_referer_module</span><br><span class=\"line\">  --without-http_rewrite_module      disable ngx_http_rewrite_module</span><br><span class=\"line\">  --without-http_proxy_module        disable ngx_http_proxy_module</span><br><span class=\"line\">  --without-http_fastcgi_module      disable ngx_http_fastcgi_module</span><br><span class=\"line\">  --without-http_uwsgi_module        disable ngx_http_uwsgi_module</span><br><span class=\"line\">  --without-http_scgi_module         disable ngx_http_scgi_module</span><br><span class=\"line\">  --without-http_grpc_module         disable ngx_http_grpc_module</span><br><span class=\"line\">  --without-http_memcached_module    disable ngx_http_memcached_module</span><br><span class=\"line\">  --without-http_limit_conn_module   disable ngx_http_limit_conn_module</span><br><span class=\"line\">  --without-http_limit_req_module    disable ngx_http_limit_req_module</span><br><span class=\"line\">  --without-http_empty_gif_module    disable ngx_http_empty_gif_module</span><br><span class=\"line\">  --without-http_browser_module      disable ngx_http_browser_module</span><br><span class=\"line\">  --without-http_upstream_hash_module</span><br><span class=\"line\">                                     disable ngx_http_upstream_hash_module</span><br><span class=\"line\">  --without-http_upstream_ip_hash_module</span><br><span class=\"line\">                                     disable ngx_http_upstream_ip_hash_module</span><br><span class=\"line\">  --without-http_upstream_least_conn_module</span><br><span class=\"line\">                                     disable ngx_http_upstream_least_conn_module</span><br><span class=\"line\">  --without-http_upstream_random_module</span><br><span class=\"line\">                                     disable ngx_http_upstream_random_module</span><br><span class=\"line\">  --without-http_upstream_keepalive_module</span><br><span class=\"line\">                                     disable ngx_http_upstream_keepalive_module</span><br><span class=\"line\">  --without-http_upstream_zone_module</span><br><span class=\"line\">                                     disable ngx_http_upstream_zone_module</span><br><span class=\"line\"></span><br><span class=\"line\">  --with-http_perl_module            enable ngx_http_perl_module</span><br><span class=\"line\">  --with-http_perl_module&#x3D;dynamic    enable dynamic ngx_http_perl_module</span><br><span class=\"line\">  --with-perl_modules_path&#x3D;PATH      set Perl modules path</span><br><span class=\"line\">  --with-perl&#x3D;PATH                   set perl binary pathname</span><br><span class=\"line\"></span><br><span class=\"line\">  --http-log-path&#x3D;PATH               set http access log pathname</span><br><span class=\"line\">  --http-client-body-temp-path&#x3D;PATH  set path to store</span><br><span class=\"line\">                                     http client request body temporary files</span><br><span class=\"line\">  --http-proxy-temp-path&#x3D;PATH        set path to store</span><br><span class=\"line\">                                     http proxy temporary files</span><br><span class=\"line\">  --http-fastcgi-temp-path&#x3D;PATH      set path to store</span><br><span class=\"line\">                                     http fastcgi temporary files</span><br><span class=\"line\">  --http-uwsgi-temp-path&#x3D;PATH        set path to store</span><br><span class=\"line\">                                     http uwsgi temporary files</span><br><span class=\"line\">  --http-scgi-temp-path&#x3D;PATH         set path to store</span><br><span class=\"line\">                                     http scgi temporary files</span><br><span class=\"line\"></span><br><span class=\"line\">  --without-http                     disable HTTP server</span><br><span class=\"line\">  --without-http-cache               disable HTTP cache</span><br><span class=\"line\"></span><br><span class=\"line\">  --with-mail                        enable POP3&#x2F;IMAP4&#x2F;SMTP proxy module</span><br><span class=\"line\">  --with-mail&#x3D;dynamic                enable dynamic POP3&#x2F;IMAP4&#x2F;SMTP proxy module</span><br><span class=\"line\">  --with-mail_ssl_module             enable ngx_mail_ssl_module</span><br><span class=\"line\">  --without-mail_pop3_module         disable ngx_mail_pop3_module</span><br><span class=\"line\">  --without-mail_imap_module         disable ngx_mail_imap_module</span><br><span class=\"line\">  --without-mail_smtp_module         disable ngx_mail_smtp_module</span><br><span class=\"line\"></span><br><span class=\"line\">  --with-stream                      enable TCP&#x2F;UDP proxy module</span><br><span class=\"line\">  --with-stream&#x3D;dynamic              enable dynamic TCP&#x2F;UDP proxy module</span><br><span class=\"line\">  --with-stream_ssl_module           enable ngx_stream_ssl_module</span><br><span class=\"line\">  --with-stream_realip_module        enable ngx_stream_realip_module</span><br><span class=\"line\">  --with-stream_geoip_module         enable ngx_stream_geoip_module</span><br><span class=\"line\">  --with-stream_geoip_module&#x3D;dynamic enable dynamic ngx_stream_geoip_module</span><br><span class=\"line\">  --with-stream_ssl_preread_module   enable ngx_stream_ssl_preread_module</span><br><span class=\"line\">  --without-stream_limit_conn_module disable ngx_stream_limit_conn_module</span><br><span class=\"line\">  --without-stream_access_module     disable ngx_stream_access_module</span><br><span class=\"line\">  --without-stream_geo_module        disable ngx_stream_geo_module</span><br><span class=\"line\">  --without-stream_map_module        disable ngx_stream_map_module</span><br><span class=\"line\">  --without-stream_split_clients_module</span><br><span class=\"line\">                                     disable ngx_stream_split_clients_module</span><br><span class=\"line\">  --without-stream_return_module     disable ngx_stream_return_module</span><br><span class=\"line\">  --without-stream_set_module        disable ngx_stream_set_module</span><br><span class=\"line\">  --without-stream_upstream_hash_module</span><br><span class=\"line\">                                     disable ngx_stream_upstream_hash_module</span><br><span class=\"line\">  --without-stream_upstream_least_conn_module</span><br><span class=\"line\">                                     disable ngx_stream_upstream_least_conn_module</span><br><span class=\"line\">  --without-stream_upstream_random_module</span><br><span class=\"line\">                                     disable ngx_stream_upstream_random_module</span><br><span class=\"line\">  --without-stream_upstream_zone_module</span><br><span class=\"line\">                                     disable ngx_stream_upstream_zone_module</span><br><span class=\"line\"></span><br><span class=\"line\">  --with-google_perftools_module     enable ngx_google_perftools_module</span><br><span class=\"line\">  --with-cpp_test_module             enable ngx_cpp_test_module</span><br><span class=\"line\"></span><br><span class=\"line\">  --add-module&#x3D;PATH                  enable external module</span><br><span class=\"line\">  --add-dynamic-module&#x3D;PATH          enable dynamic external module</span><br><span class=\"line\"></span><br><span class=\"line\">  --with-compat                      dynamic modules compatibility</span><br><span class=\"line\"></span><br><span class=\"line\">  --with-cc&#x3D;PATH                     set C compiler pathname</span><br><span class=\"line\">  --with-cpp&#x3D;PATH                    set C preprocessor pathname</span><br><span class=\"line\">  --with-cc-opt&#x3D;OPTIONS              set additional C compiler options</span><br><span class=\"line\">  --with-ld-opt&#x3D;OPTIONS              set additional linker options</span><br><span class=\"line\">  --with-cpu-opt&#x3D;CPU                 build for the specified CPU, valid values:</span><br><span class=\"line\">                                     pentium, pentiumpro, pentium3, pentium4,</span><br><span class=\"line\">                                     athlon, opteron, sparc32, sparc64, ppc64</span><br><span class=\"line\"></span><br><span class=\"line\">  --without-pcre                     disable PCRE library usage</span><br><span class=\"line\">  --with-pcre                        force PCRE library usage</span><br><span class=\"line\">  --with-pcre&#x3D;DIR                    set path to PCRE library sources</span><br><span class=\"line\">  --with-pcre-opt&#x3D;OPTIONS            set additional build options for PCRE</span><br><span class=\"line\">  --with-pcre-jit                    build PCRE with JIT compilation support</span><br><span class=\"line\"></span><br><span class=\"line\">  --with-zlib&#x3D;DIR                    set path to zlib library sources</span><br><span class=\"line\">  --with-zlib-opt&#x3D;OPTIONS            set additional build options for zlib</span><br><span class=\"line\">  --with-zlib-asm&#x3D;CPU                use zlib assembler sources optimized</span><br><span class=\"line\">                                     for the specified CPU, valid values:</span><br><span class=\"line\">                                     pentium, pentiumpro</span><br><span class=\"line\"></span><br><span class=\"line\">  --with-libatomic                   force libatomic_ops library usage</span><br><span class=\"line\">  --with-libatomic&#x3D;DIR               set path to libatomic_ops library sources</span><br><span class=\"line\"></span><br><span class=\"line\">  --with-openssl&#x3D;DIR                 set path to OpenSSL library sources</span><br><span class=\"line\">  --with-openssl-opt&#x3D;OPTIONS         set additional build options for OpenSSL</span><br><span class=\"line\"></span><br><span class=\"line\">  --with-debug                       enable debug logging</span><br></pre></td></tr></table></figure>\n\n\n\n<p>下面是个人需要的配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.&#x2F;configure --with-libatomic --with-pcre --with-compat \\</span><br><span class=\"line\">  --with-stream --with-stream&#x3D;dynamic --with-http_sub_module --with-http_dav_module --with-http_flv_module   \\</span><br><span class=\"line\">  --with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module \\</span><br><span class=\"line\">  --with-http_mp4_module --with-http_gunzip_module --with-http_gzip_static_module \\</span><br><span class=\"line\">  --with-http_auth_request_module    --with-http_random_index_module   --with-http_secure_link_module \\</span><br><span class=\"line\">  --with-http_degradation_module     --with-http_slice_module --with-http_stub_status_module \\</span><br><span class=\"line\">  --with-threads --with-file-aio --with-http_ssl_module --with-http_v2_module --with-http_realip_module \\</span><br><span class=\"line\">  --with-http_addition_module --with-http_xslt_module --with-http_xslt_module&#x3D;dynamic --with-http_image_filter_module --with-http_image_filter_module&#x3D;dynamic\\</span><br><span class=\"line\">  --prefix&#x3D;&#x2F;etc&#x2F;nginx \\</span><br><span class=\"line\">  --sbin-path&#x3D;&#x2F;etc&#x2F;nginx&#x2F;nginx \\</span><br><span class=\"line\">  --modules-path&#x3D;&#x2F;etc&#x2F;nginx&#x2F;modules \\</span><br><span class=\"line\">  --conf-path&#x3D;&#x2F;etc&#x2F;nginx&#x2F;nginx.conf \\</span><br><span class=\"line\">  --error-log-path&#x3D;&#x2F;etc&#x2F;nginx&#x2F;log \\</span><br><span class=\"line\">  --pid-path&#x3D;&#x2F;etc&#x2F;nginx&#x2F;run&#x2F;nginx.pid \\</span><br><span class=\"line\">  --lock-path&#x3D;&#x2F;etc&#x2F;nginx&#x2F;nginx.lock</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"04-编译-amp-安装\"><a href=\"#04-编译-amp-安装\" class=\"headerlink\" title=\"04.编译&amp;安装\"></a>04.编译&amp;安装</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make make install</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"05-加入systemctl\"><a href=\"#05-加入systemctl\" class=\"headerlink\" title=\"05.加入systemctl\"></a>05.加入systemctl</h4><p>进入 /usr/lib/systemd/system 目录下，编辑文件 nginx.service</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;nginx.service &lt;&lt;EOF</span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description&#x3D;nginx</span><br><span class=\"line\">After&#x3D;network.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type&#x3D;forking</span><br><span class=\"line\">ExecStart&#x3D;&#x2F;etc&#x2F;nginx&#x2F;nginx</span><br><span class=\"line\">ExecReload&#x3D;&#x2F;etc&#x2F;nginx&#x2F;nginx -s reload</span><br><span class=\"line\">ExecStop&#x3D;&#x2F;etc&#x2F;nginx&#x2F;nginx -s quit</span><br><span class=\"line\">PrivateTmp&#x3D;true</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy&#x3D;multi-user.target</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br><span class=\"line\">systemctl daemon-reload </span><br><span class=\"line\">systemctl start nginx</span><br><span class=\"line\">systemctl enable nginx</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"06-使用方式\"><a href=\"#06-使用方式\" class=\"headerlink\" title=\"06.使用方式\"></a>06.使用方式</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start nginx # 启动nginx</span><br><span class=\"line\">systemctl status nginx # 查看nginx的命令</span><br><span class=\"line\">systemctl restart nginx # 重启nginx服务</span><br><span class=\"line\">systemctl stop nginx # 停止nginx服务</span><br><span class=\"line\">systemctl enable nginx # 将nginx设为开机启动</span><br><span class=\"line\">systemctl reload nginx # 重新加载配置</span><br></pre></td></tr></table></figure>","site":{"data":{"contact":[{"title":"github","icon":"icon-github","link":"https://github.com/yuansudong"},{"title":"email","icon":"icon-email","link":"mailto:1145919989@qq.com"},{"title":"qq","icon":"icon-qq","link":"/atom.xml"}],"favicons":["<link rel=\"shortcut icon\" href=\"/img//favicon.ico\">","<link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/img//favicon-16x16.png\">","<link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/img//favicon-32x32.png\">","<link rel=\"icon\" type=\"image/png\" sizes=\"48x48\" href=\"/img//favicon-48x48.png\">","<link rel=\"manifest\" href=\"/img//manifest.json\">","<meta name=\"mobile-web-app-capable\" content=\"yes\">","<meta name=\"theme-color\" content=\"#fff\">","<meta name=\"application-name\">","<link rel=\"apple-touch-icon\" sizes=\"57x57\" href=\"/img//apple-touch-icon-57x57.png\">","<link rel=\"apple-touch-icon\" sizes=\"60x60\" href=\"/img//apple-touch-icon-60x60.png\">","<link rel=\"apple-touch-icon\" sizes=\"72x72\" href=\"/img//apple-touch-icon-72x72.png\">","<link rel=\"apple-touch-icon\" sizes=\"76x76\" href=\"/img//apple-touch-icon-76x76.png\">","<link rel=\"apple-touch-icon\" sizes=\"114x114\" href=\"/img//apple-touch-icon-114x114.png\">","<link rel=\"apple-touch-icon\" sizes=\"120x120\" href=\"/img//apple-touch-icon-120x120.png\">","<link rel=\"apple-touch-icon\" sizes=\"144x144\" href=\"/img//apple-touch-icon-144x144.png\">","<link rel=\"apple-touch-icon\" sizes=\"152x152\" href=\"/img//apple-touch-icon-152x152.png\">","<link rel=\"apple-touch-icon\" sizes=\"167x167\" href=\"/img//apple-touch-icon-167x167.png\">","<link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/img//apple-touch-icon-180x180.png\">","<link rel=\"apple-touch-icon\" sizes=\"1024x1024\" href=\"/img//apple-touch-icon-1024x1024.png\">","<meta name=\"apple-mobile-web-app-capable\" content=\"yes\">","<meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black-translucent\">","<meta name=\"apple-mobile-web-app-title\">","<meta name=\"msapplication-TileColor\" content=\"#fff\">","<meta name=\"msapplication-TileImage\" content=\"/img//mstile-144x144.png\">","<meta name=\"msapplication-config\" content=\"/img//browserconfig.xml\">"]}},"excerpt":"","more":"<p>NGINX是一款轻量级的WEB服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器，在BSD-LIKE 协议下发行.</p>\n<p>其特点是占有内存少，并发能力强，事实上nginx的并发能力在同类型的网页服务器中表现较好.</p>\n<p>NGINX的安装方式有两种.第一种是通过YUM源安装,第二种是编译安装.</p>\n<p>此处采用编译安装的方式.之所以采用编译安装的方式,是因为个人所从事的工作中会频繁的用到一些NGINX的三方模块.</p>\n<p>通过维护一个NGINX工程,在需要用到三方模块的时候,在将三方模块通过GIT CLONE 进NGINX工程之后,配合CI/CD,可以很方便的对线上或者内网的NGINX做更新.</p>\n<h4 id=\"01-通过YUM安装相关依赖\"><a href=\"#01-通过YUM安装相关依赖\" class=\"headerlink\" title=\"01.通过YUM安装相关依赖\"></a>01.通过YUM安装相关依赖</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf  install -y https:&#x2F;&#x2F;dl.fedoraproject.org&#x2F;pub&#x2F;epel&#x2F;epel-release-latest-8.noarch.rpm</span><br><span class=\"line\">dnf  config-manager --set-enabled powertools</span><br><span class=\"line\">dnf  install -y wget curl gcc-c++ pcre pcre-devel zlib zlib-devel </span><br><span class=\"line\">dnf  install -y libxslt-devel</span><br><span class=\"line\">dnf  install -y libuuid-devel libblkid-devel libudev-devel </span><br><span class=\"line\">dnf  install -y fuse-devel libedit-devel libatomic_ops-devel</span><br><span class=\"line\">dnf  install -y openssl openssl-devel perl gd-devel</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"02-下载NGINX的源码并解压\"><a href=\"#02-下载NGINX的源码并解压\" class=\"headerlink\" title=\"02.下载NGINX的源码并解压\"></a>02.下载NGINX的源码并解压</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http:&#x2F;&#x2F;nginx.org&#x2F;download&#x2F;nginx-1.19.6.tar.gztar -zxvf nginx-1.19.6.tar.gzmv nginx-1.19.6 nginx</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"03-配置工程\"><a href=\"#03-配置工程\" class=\"headerlink\" title=\"03.配置工程\"></a>03.配置工程</h4><p>在配置工程之前,需要使用下列命令查看下NGINX有哪些模块.根据自身目前需求可以删减相关的模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost nginx]# .&#x2F;configure --help</span><br><span class=\"line\">  --help                             print this message</span><br><span class=\"line\">  --prefix&#x3D;PATH                      set installation prefix</span><br><span class=\"line\">  --sbin-path&#x3D;PATH                   set nginx binary pathname</span><br><span class=\"line\">  --modules-path&#x3D;PATH                set modules path</span><br><span class=\"line\">  --conf-path&#x3D;PATH                   set nginx.conf pathname</span><br><span class=\"line\">  --error-log-path&#x3D;PATH              set error log pathname</span><br><span class=\"line\">  --pid-path&#x3D;PATH                    set nginx.pid pathname</span><br><span class=\"line\">  --lock-path&#x3D;PATH                   set nginx.lock pathname</span><br><span class=\"line\"></span><br><span class=\"line\">  --user&#x3D;USER                        set non-privileged user for</span><br><span class=\"line\">                                     worker processes</span><br><span class=\"line\">  --group&#x3D;GROUP                      set non-privileged group for</span><br><span class=\"line\">                                     worker processes</span><br><span class=\"line\"></span><br><span class=\"line\">  --build&#x3D;NAME                       set build name</span><br><span class=\"line\">  --builddir&#x3D;DIR                     set build directory</span><br><span class=\"line\"></span><br><span class=\"line\">  --with-select_module               enable select module</span><br><span class=\"line\">  --without-select_module            disable select module</span><br><span class=\"line\">  --with-poll_module                 enable poll module</span><br><span class=\"line\">  --without-poll_module              disable poll module</span><br><span class=\"line\"></span><br><span class=\"line\">  --with-threads                     enable thread pool support</span><br><span class=\"line\"></span><br><span class=\"line\">  --with-file-aio                    enable file AIO support</span><br><span class=\"line\"></span><br><span class=\"line\">  --with-http_ssl_module             enable ngx_http_ssl_module</span><br><span class=\"line\">  --with-http_v2_module              enable ngx_http_v2_module</span><br><span class=\"line\">  --with-http_realip_module          enable ngx_http_realip_module</span><br><span class=\"line\">  --with-http_addition_module        enable ngx_http_addition_module</span><br><span class=\"line\">  --with-http_xslt_module            enable ngx_http_xslt_module</span><br><span class=\"line\">  --with-http_xslt_module&#x3D;dynamic    enable dynamic ngx_http_xslt_module</span><br><span class=\"line\">  --with-http_image_filter_module    enable ngx_http_image_filter_module</span><br><span class=\"line\">  --with-http_image_filter_module&#x3D;dynamic</span><br><span class=\"line\">                                     enable dynamic ngx_http_image_filter_module</span><br><span class=\"line\">  --with-http_geoip_module           enable ngx_http_geoip_module</span><br><span class=\"line\">  --with-http_geoip_module&#x3D;dynamic   enable dynamic ngx_http_geoip_module</span><br><span class=\"line\">  --with-http_sub_module             enable ngx_http_sub_module</span><br><span class=\"line\">  --with-http_dav_module             enable ngx_http_dav_module</span><br><span class=\"line\">  --with-http_flv_module             enable ngx_http_flv_module</span><br><span class=\"line\">  --with-http_mp4_module             enable ngx_http_mp4_module</span><br><span class=\"line\">  --with-http_gunzip_module          enable ngx_http_gunzip_module</span><br><span class=\"line\">  --with-http_gzip_static_module     enable ngx_http_gzip_static_module</span><br><span class=\"line\">  --with-http_auth_request_module    enable ngx_http_auth_request_module</span><br><span class=\"line\">  --with-http_random_index_module    enable ngx_http_random_index_module</span><br><span class=\"line\">  --with-http_secure_link_module     enable ngx_http_secure_link_module</span><br><span class=\"line\">  --with-http_degradation_module     enable ngx_http_degradation_module</span><br><span class=\"line\">  --with-http_slice_module           enable ngx_http_slice_module</span><br><span class=\"line\">  --with-http_stub_status_module     enable ngx_http_stub_status_module</span><br><span class=\"line\"></span><br><span class=\"line\">  --without-http_charset_module      disable ngx_http_charset_module</span><br><span class=\"line\">  --without-http_gzip_module         disable ngx_http_gzip_module</span><br><span class=\"line\">  --without-http_ssi_module          disable ngx_http_ssi_module</span><br><span class=\"line\">  --without-http_userid_module       disable ngx_http_userid_module</span><br><span class=\"line\">  --without-http_access_module       disable ngx_http_access_module</span><br><span class=\"line\">  --without-http_auth_basic_module   disable ngx_http_auth_basic_module</span><br><span class=\"line\">  --without-http_mirror_module       disable ngx_http_mirror_module</span><br><span class=\"line\">  --without-http_autoindex_module    disable ngx_http_autoindex_module</span><br><span class=\"line\">  --without-http_geo_module          disable ngx_http_geo_module</span><br><span class=\"line\">  --without-http_map_module          disable ngx_http_map_module</span><br><span class=\"line\">  --without-http_split_clients_module disable ngx_http_split_clients_module</span><br><span class=\"line\">  --without-http_referer_module      disable ngx_http_referer_module</span><br><span class=\"line\">  --without-http_rewrite_module      disable ngx_http_rewrite_module</span><br><span class=\"line\">  --without-http_proxy_module        disable ngx_http_proxy_module</span><br><span class=\"line\">  --without-http_fastcgi_module      disable ngx_http_fastcgi_module</span><br><span class=\"line\">  --without-http_uwsgi_module        disable ngx_http_uwsgi_module</span><br><span class=\"line\">  --without-http_scgi_module         disable ngx_http_scgi_module</span><br><span class=\"line\">  --without-http_grpc_module         disable ngx_http_grpc_module</span><br><span class=\"line\">  --without-http_memcached_module    disable ngx_http_memcached_module</span><br><span class=\"line\">  --without-http_limit_conn_module   disable ngx_http_limit_conn_module</span><br><span class=\"line\">  --without-http_limit_req_module    disable ngx_http_limit_req_module</span><br><span class=\"line\">  --without-http_empty_gif_module    disable ngx_http_empty_gif_module</span><br><span class=\"line\">  --without-http_browser_module      disable ngx_http_browser_module</span><br><span class=\"line\">  --without-http_upstream_hash_module</span><br><span class=\"line\">                                     disable ngx_http_upstream_hash_module</span><br><span class=\"line\">  --without-http_upstream_ip_hash_module</span><br><span class=\"line\">                                     disable ngx_http_upstream_ip_hash_module</span><br><span class=\"line\">  --without-http_upstream_least_conn_module</span><br><span class=\"line\">                                     disable ngx_http_upstream_least_conn_module</span><br><span class=\"line\">  --without-http_upstream_random_module</span><br><span class=\"line\">                                     disable ngx_http_upstream_random_module</span><br><span class=\"line\">  --without-http_upstream_keepalive_module</span><br><span class=\"line\">                                     disable ngx_http_upstream_keepalive_module</span><br><span class=\"line\">  --without-http_upstream_zone_module</span><br><span class=\"line\">                                     disable ngx_http_upstream_zone_module</span><br><span class=\"line\"></span><br><span class=\"line\">  --with-http_perl_module            enable ngx_http_perl_module</span><br><span class=\"line\">  --with-http_perl_module&#x3D;dynamic    enable dynamic ngx_http_perl_module</span><br><span class=\"line\">  --with-perl_modules_path&#x3D;PATH      set Perl modules path</span><br><span class=\"line\">  --with-perl&#x3D;PATH                   set perl binary pathname</span><br><span class=\"line\"></span><br><span class=\"line\">  --http-log-path&#x3D;PATH               set http access log pathname</span><br><span class=\"line\">  --http-client-body-temp-path&#x3D;PATH  set path to store</span><br><span class=\"line\">                                     http client request body temporary files</span><br><span class=\"line\">  --http-proxy-temp-path&#x3D;PATH        set path to store</span><br><span class=\"line\">                                     http proxy temporary files</span><br><span class=\"line\">  --http-fastcgi-temp-path&#x3D;PATH      set path to store</span><br><span class=\"line\">                                     http fastcgi temporary files</span><br><span class=\"line\">  --http-uwsgi-temp-path&#x3D;PATH        set path to store</span><br><span class=\"line\">                                     http uwsgi temporary files</span><br><span class=\"line\">  --http-scgi-temp-path&#x3D;PATH         set path to store</span><br><span class=\"line\">                                     http scgi temporary files</span><br><span class=\"line\"></span><br><span class=\"line\">  --without-http                     disable HTTP server</span><br><span class=\"line\">  --without-http-cache               disable HTTP cache</span><br><span class=\"line\"></span><br><span class=\"line\">  --with-mail                        enable POP3&#x2F;IMAP4&#x2F;SMTP proxy module</span><br><span class=\"line\">  --with-mail&#x3D;dynamic                enable dynamic POP3&#x2F;IMAP4&#x2F;SMTP proxy module</span><br><span class=\"line\">  --with-mail_ssl_module             enable ngx_mail_ssl_module</span><br><span class=\"line\">  --without-mail_pop3_module         disable ngx_mail_pop3_module</span><br><span class=\"line\">  --without-mail_imap_module         disable ngx_mail_imap_module</span><br><span class=\"line\">  --without-mail_smtp_module         disable ngx_mail_smtp_module</span><br><span class=\"line\"></span><br><span class=\"line\">  --with-stream                      enable TCP&#x2F;UDP proxy module</span><br><span class=\"line\">  --with-stream&#x3D;dynamic              enable dynamic TCP&#x2F;UDP proxy module</span><br><span class=\"line\">  --with-stream_ssl_module           enable ngx_stream_ssl_module</span><br><span class=\"line\">  --with-stream_realip_module        enable ngx_stream_realip_module</span><br><span class=\"line\">  --with-stream_geoip_module         enable ngx_stream_geoip_module</span><br><span class=\"line\">  --with-stream_geoip_module&#x3D;dynamic enable dynamic ngx_stream_geoip_module</span><br><span class=\"line\">  --with-stream_ssl_preread_module   enable ngx_stream_ssl_preread_module</span><br><span class=\"line\">  --without-stream_limit_conn_module disable ngx_stream_limit_conn_module</span><br><span class=\"line\">  --without-stream_access_module     disable ngx_stream_access_module</span><br><span class=\"line\">  --without-stream_geo_module        disable ngx_stream_geo_module</span><br><span class=\"line\">  --without-stream_map_module        disable ngx_stream_map_module</span><br><span class=\"line\">  --without-stream_split_clients_module</span><br><span class=\"line\">                                     disable ngx_stream_split_clients_module</span><br><span class=\"line\">  --without-stream_return_module     disable ngx_stream_return_module</span><br><span class=\"line\">  --without-stream_set_module        disable ngx_stream_set_module</span><br><span class=\"line\">  --without-stream_upstream_hash_module</span><br><span class=\"line\">                                     disable ngx_stream_upstream_hash_module</span><br><span class=\"line\">  --without-stream_upstream_least_conn_module</span><br><span class=\"line\">                                     disable ngx_stream_upstream_least_conn_module</span><br><span class=\"line\">  --without-stream_upstream_random_module</span><br><span class=\"line\">                                     disable ngx_stream_upstream_random_module</span><br><span class=\"line\">  --without-stream_upstream_zone_module</span><br><span class=\"line\">                                     disable ngx_stream_upstream_zone_module</span><br><span class=\"line\"></span><br><span class=\"line\">  --with-google_perftools_module     enable ngx_google_perftools_module</span><br><span class=\"line\">  --with-cpp_test_module             enable ngx_cpp_test_module</span><br><span class=\"line\"></span><br><span class=\"line\">  --add-module&#x3D;PATH                  enable external module</span><br><span class=\"line\">  --add-dynamic-module&#x3D;PATH          enable dynamic external module</span><br><span class=\"line\"></span><br><span class=\"line\">  --with-compat                      dynamic modules compatibility</span><br><span class=\"line\"></span><br><span class=\"line\">  --with-cc&#x3D;PATH                     set C compiler pathname</span><br><span class=\"line\">  --with-cpp&#x3D;PATH                    set C preprocessor pathname</span><br><span class=\"line\">  --with-cc-opt&#x3D;OPTIONS              set additional C compiler options</span><br><span class=\"line\">  --with-ld-opt&#x3D;OPTIONS              set additional linker options</span><br><span class=\"line\">  --with-cpu-opt&#x3D;CPU                 build for the specified CPU, valid values:</span><br><span class=\"line\">                                     pentium, pentiumpro, pentium3, pentium4,</span><br><span class=\"line\">                                     athlon, opteron, sparc32, sparc64, ppc64</span><br><span class=\"line\"></span><br><span class=\"line\">  --without-pcre                     disable PCRE library usage</span><br><span class=\"line\">  --with-pcre                        force PCRE library usage</span><br><span class=\"line\">  --with-pcre&#x3D;DIR                    set path to PCRE library sources</span><br><span class=\"line\">  --with-pcre-opt&#x3D;OPTIONS            set additional build options for PCRE</span><br><span class=\"line\">  --with-pcre-jit                    build PCRE with JIT compilation support</span><br><span class=\"line\"></span><br><span class=\"line\">  --with-zlib&#x3D;DIR                    set path to zlib library sources</span><br><span class=\"line\">  --with-zlib-opt&#x3D;OPTIONS            set additional build options for zlib</span><br><span class=\"line\">  --with-zlib-asm&#x3D;CPU                use zlib assembler sources optimized</span><br><span class=\"line\">                                     for the specified CPU, valid values:</span><br><span class=\"line\">                                     pentium, pentiumpro</span><br><span class=\"line\"></span><br><span class=\"line\">  --with-libatomic                   force libatomic_ops library usage</span><br><span class=\"line\">  --with-libatomic&#x3D;DIR               set path to libatomic_ops library sources</span><br><span class=\"line\"></span><br><span class=\"line\">  --with-openssl&#x3D;DIR                 set path to OpenSSL library sources</span><br><span class=\"line\">  --with-openssl-opt&#x3D;OPTIONS         set additional build options for OpenSSL</span><br><span class=\"line\"></span><br><span class=\"line\">  --with-debug                       enable debug logging</span><br></pre></td></tr></table></figure>\n\n\n\n<p>下面是个人需要的配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.&#x2F;configure --with-libatomic --with-pcre --with-compat \\</span><br><span class=\"line\">  --with-stream --with-stream&#x3D;dynamic --with-http_sub_module --with-http_dav_module --with-http_flv_module   \\</span><br><span class=\"line\">  --with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module \\</span><br><span class=\"line\">  --with-http_mp4_module --with-http_gunzip_module --with-http_gzip_static_module \\</span><br><span class=\"line\">  --with-http_auth_request_module    --with-http_random_index_module   --with-http_secure_link_module \\</span><br><span class=\"line\">  --with-http_degradation_module     --with-http_slice_module --with-http_stub_status_module \\</span><br><span class=\"line\">  --with-threads --with-file-aio --with-http_ssl_module --with-http_v2_module --with-http_realip_module \\</span><br><span class=\"line\">  --with-http_addition_module --with-http_xslt_module --with-http_xslt_module&#x3D;dynamic --with-http_image_filter_module --with-http_image_filter_module&#x3D;dynamic\\</span><br><span class=\"line\">  --prefix&#x3D;&#x2F;etc&#x2F;nginx \\</span><br><span class=\"line\">  --sbin-path&#x3D;&#x2F;etc&#x2F;nginx&#x2F;nginx \\</span><br><span class=\"line\">  --modules-path&#x3D;&#x2F;etc&#x2F;nginx&#x2F;modules \\</span><br><span class=\"line\">  --conf-path&#x3D;&#x2F;etc&#x2F;nginx&#x2F;nginx.conf \\</span><br><span class=\"line\">  --error-log-path&#x3D;&#x2F;etc&#x2F;nginx&#x2F;log \\</span><br><span class=\"line\">  --pid-path&#x3D;&#x2F;etc&#x2F;nginx&#x2F;run&#x2F;nginx.pid \\</span><br><span class=\"line\">  --lock-path&#x3D;&#x2F;etc&#x2F;nginx&#x2F;nginx.lock</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"04-编译-amp-安装\"><a href=\"#04-编译-amp-安装\" class=\"headerlink\" title=\"04.编译&amp;安装\"></a>04.编译&amp;安装</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make make install</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"05-加入systemctl\"><a href=\"#05-加入systemctl\" class=\"headerlink\" title=\"05.加入systemctl\"></a>05.加入systemctl</h4><p>进入 /usr/lib/systemd/system 目录下，编辑文件 nginx.service</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;nginx.service &lt;&lt;EOF</span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description&#x3D;nginx</span><br><span class=\"line\">After&#x3D;network.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type&#x3D;forking</span><br><span class=\"line\">ExecStart&#x3D;&#x2F;etc&#x2F;nginx&#x2F;nginx</span><br><span class=\"line\">ExecReload&#x3D;&#x2F;etc&#x2F;nginx&#x2F;nginx -s reload</span><br><span class=\"line\">ExecStop&#x3D;&#x2F;etc&#x2F;nginx&#x2F;nginx -s quit</span><br><span class=\"line\">PrivateTmp&#x3D;true</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy&#x3D;multi-user.target</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br><span class=\"line\">systemctl daemon-reload </span><br><span class=\"line\">systemctl start nginx</span><br><span class=\"line\">systemctl enable nginx</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"06-使用方式\"><a href=\"#06-使用方式\" class=\"headerlink\" title=\"06.使用方式\"></a>06.使用方式</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start nginx # 启动nginx</span><br><span class=\"line\">systemctl status nginx # 查看nginx的命令</span><br><span class=\"line\">systemctl restart nginx # 重启nginx服务</span><br><span class=\"line\">systemctl stop nginx # 停止nginx服务</span><br><span class=\"line\">systemctl enable nginx # 将nginx设为开机启动</span><br><span class=\"line\">systemctl reload nginx # 重新加载配置</span><br></pre></td></tr></table></figure>"},{"title":"技术场景之解决不知线上代码版本的问题","cover":"/img/technology-sense/code_version_title.png","subtitle":"技术场景之解决不知线上代码版本的问题","author":{"nick":"袁苏东","link":"https://github.com/yuansudong"},"typora-root-url":"images","_content":"\nGIT是一个分布式版本控制软件，最初由林纳斯·托瓦兹创作，于2005年以GPL发布。最初目的是为更好地管理Linux内核开发而设计。最终走向了全世界\n\n\n\n在以前的工作中,GIT常被用作代码管理,以及版本控制,具有回滚到指定的提交点的功能.\n\n\n\n## 1.问题场景\n\n\n\n每当版本发布的前一周,是最忙的日子.各种各样的问题频繁地爆出,而让我最难以接受的是,GOLANG编译之后的二进制执行文件发布到线上之后,不知道这个二进制可执行文件到底包含了哪些功能.\n\n\n\n以致于会听到,诸如404等错误码的反馈.当听到这些反馈之后,我看着这个二进制执行文件,不知是错误码返回错误,还是在编译的时候没从开发分支上集成这块的功能.\n\n\n\n亦或者是编译时,编译错了分支,错把开发分支编译成了产品分支,最终发布到了线上.\n\n\n\n亦或者是客户端的接口接入的有问题\n\n\n\n亦或者是编译时,编译错了版本,等等情况.\n\n\n\n仅仅看着一个二进制的文件,按照我现在的水平,我看不出里面有什么东西.\n\n\n\n一般出现这个错误之后,就会把GIT打开,再去拉取指定版本的代码将其重新编译,发布至线上.\n\n\n\n倘若能够第二次成功也好,但最害怕的是还有第三次,第四次,第N次.\n\n\n\n而线上,是能够让你试一试的地方么? 答案肯定是不能.\n\n\n\n## 2.解决办法\n\n\n\n在编译时,将提交的ID编译进golang的二进制程序中,通过一番调研,发现GO在编译时,可通过下面的命令办到.\n\n\n\n```shell\ngo build -ldflags \"-X main._GitBranch=${branch} ...\" -o appname\n```\n\n\n\nmain为包名,_GitBranch为main包下的一个变量.\n\n\n\n那么,到底需要将哪些元素,在编译时指定呢?根据个人实践会有所不同,而我却打入了下列的元素\n\n\n\nApp Name: AppName用于指定该应用的名称,为了防止运维将二进制文件改名,导致问题定位错误\n\n\n\nApp Version: 当前应用的版本,也就是git tag上的版本,为了防止在发布到线上时编译错了版本,导致需要发布的新功能未能发布到线上.\n\n\n\nGit Branch: 编译时所编译的分支,用于查看是否将开发分支发布到了线上.\n\n\n\nGit Commit:最后一次的提交ID,通过该ID,我们可以通过git log排查功能在从开发分支合并到产品分支时,到底有没有漏掉\n\n\n\nGo Version:编译时golang的版本,尽管关于golang版本带来的问题不多,但是需要打上,防止以为golang版本所产生的错误,这种错误,非常难查.所以,需要标记\n\n\n\nBuild System: 在编译时,编译所在的操作系统类型.众所周知,GO有交叉编译,可在windows上编译linux,mac的可执行文件.而我被这种交叉编译坑的一次是在压测的时候,该压测的环境在centos上,但是我却在windows上编译了linux的可执行文件.最终在发生OOM时,通过交叉编译的可执行程序没有打印问题,而通过centos上编译的二进制文件输出了信息.\n\n\n\nBuild Time: 编译时的时间,该时间主要是为了印证\"人无完人\"这句话,一般情况下不会有问题,但是倘若在上线时,同个版本下,频繁更新,谁知道进程有没有更新呢.此时,可以通过编译时间\n\n\n\n### 01.一般流程\n\n\n\n我在发布版本时,会从开发分支上通过提交日志,辅助以下列命令,将一个个的功能提交合并到产品分支上.\n\n\n\n```sh\ngit cherry pick [commitId]\n```\n\n\n\ncommitId 可以通过 git log 命令查看,查看时会显示提交的信息.根据信息去合并功能.\n\n\n\n当所有功能全部合成到产品分支上之后,会进行提交,提交会产生一个commitId,\n\n\n\n基于该commitId,通过打tag的方式,可以向该时git上产品分支的状态进行备份\n\n\n\n```shell\ngit tag v0.1 -m \"comments..\" [commitId]\n```\n\n\n\n通过该备份,可以随时随地的进行还原.\n\n\n\n最后可通过,jenkins自动打包,k8s自动部署.\n\n\n\n### 02.linux编译脚本\n\n\n\n```shell\n#!/bin/bash\nos=$(go env GOOS)\narch=$(go env GOARCH)\ngoversion=$(go version | awk '{print $3}')\ncommitid=$(git rev-parse --short HEAD)\naccount=$(git log --pretty=format:\"%%an\" -1)\nbranch=$(git branch --show-current)\nnowtime=$(date +%Y-%m-%d.%H:%M:%S)\nappversion=1.6\nappname=example\ngo build -ldflags \"-X main._GitBranch=${branch} -X main._AppName=${appname} -X main._AppVersion=${appversion} -X main._OS=${os} -X main._Arch=${arch} -X main._GoVersion=${goversion} -X main._GitCommit=${commitid} -X main._GitAccount=${account} -X main._DateTime=${nowtime}\" -o ${appname}\n```\n\n\n\n输出结果\n\n\n\n```shell\n[root@localhost cmdline]# ./example version\nApp Name     :    example\nApp Version  :    1.6\nGit Branch   :    master\nGit Commit   :    ff72c3a\nGit Account  :    yuansudong\nGo Version   :    go1.14.12\nBuild System :    linux\nBuild Time   :    2021-03-11.03:02:36\nBuild Arch   :    amd64\n```\n\n\n\n### 03.windows编译脚本\n\n\n\n```bash\n@echo off\nfor /F %%i in ('go env GOOS') do ( set os=%%i)\nfor /F %%i in ('go env GOARCH') do ( set arch=%%i)\nfor /F %%i in ('go env GOVERSION') do ( set goversion=%%i)\nfor /F %%i in ('git rev-parse --short HEAD') do ( set commitid=%%i)\nfor /F %%i in ('git log --pretty^=format:\"%%an\" -1') do ( set account=%%i)\nfor /F \"tokens=* delims=\" %%i in ('git branch --show-current') do ( set branch=%%i)\nfor /f \"tokens=* delims=\" %%i in ('echo %date:~0,4%-%date:~5,2%-%date:~8,2%.%time:~1,1%:%time:~3,2%:%time:~6,2%') do ( set nowtime=\"%%i\")\nset appversion=1.6\nset appname=example\ngo build -ldflags \"-X main._GitBranch=%branch% -X main._AppName=%appname% -X main._AppVersion=%appversion% -X main._OS=%os% -X main._Arch=%arch% -X main._GoVersion=%goversion% -X main._GitCommit=%commitid% -X main._GitAccount=%account% -X main._DateTime=%nowtime%\" -o %appname%.exe\n```\n\n\n\n输出结果\n\n\n\n```cmd\nPS E:\\code\\golang\\src\\github.com\\yuansudong\\cobra\\generator\\cmdline> .\\example.exe version\nApp Name     :    example\nApp Version  :    1.6\nGit Branch   :    master\nGit Commit   :    d3b1940\nGit Account  :    yuansudong\nGo Version   :    go1.16\nBuild System :    windows\nBuild Time   :    2021-03-10.6:52:52\nBuild Arch   :    amd64\nPS E:\\code\\golang\\src\\github.com\\yuansudong\\cobra\\generator\\cmdline>\n```","source":"_posts/technology-sense-code-version.md","raw":"---\ntitle: 技术场景之解决不知线上代码版本的问题\ncover:  /img/technology-sense/code_version_title.png\nsubtitle: 技术场景之解决不知线上代码版本的问题\ncategories: \"技术场景\"\ntags: \"技术场景\"\nauthor:\n    nick: 袁苏东\n    link: https://github.com/yuansudong\ntypora-root-url: images\n---\n\nGIT是一个分布式版本控制软件，最初由林纳斯·托瓦兹创作，于2005年以GPL发布。最初目的是为更好地管理Linux内核开发而设计。最终走向了全世界\n\n\n\n在以前的工作中,GIT常被用作代码管理,以及版本控制,具有回滚到指定的提交点的功能.\n\n\n\n## 1.问题场景\n\n\n\n每当版本发布的前一周,是最忙的日子.各种各样的问题频繁地爆出,而让我最难以接受的是,GOLANG编译之后的二进制执行文件发布到线上之后,不知道这个二进制可执行文件到底包含了哪些功能.\n\n\n\n以致于会听到,诸如404等错误码的反馈.当听到这些反馈之后,我看着这个二进制执行文件,不知是错误码返回错误,还是在编译的时候没从开发分支上集成这块的功能.\n\n\n\n亦或者是编译时,编译错了分支,错把开发分支编译成了产品分支,最终发布到了线上.\n\n\n\n亦或者是客户端的接口接入的有问题\n\n\n\n亦或者是编译时,编译错了版本,等等情况.\n\n\n\n仅仅看着一个二进制的文件,按照我现在的水平,我看不出里面有什么东西.\n\n\n\n一般出现这个错误之后,就会把GIT打开,再去拉取指定版本的代码将其重新编译,发布至线上.\n\n\n\n倘若能够第二次成功也好,但最害怕的是还有第三次,第四次,第N次.\n\n\n\n而线上,是能够让你试一试的地方么? 答案肯定是不能.\n\n\n\n## 2.解决办法\n\n\n\n在编译时,将提交的ID编译进golang的二进制程序中,通过一番调研,发现GO在编译时,可通过下面的命令办到.\n\n\n\n```shell\ngo build -ldflags \"-X main._GitBranch=${branch} ...\" -o appname\n```\n\n\n\nmain为包名,_GitBranch为main包下的一个变量.\n\n\n\n那么,到底需要将哪些元素,在编译时指定呢?根据个人实践会有所不同,而我却打入了下列的元素\n\n\n\nApp Name: AppName用于指定该应用的名称,为了防止运维将二进制文件改名,导致问题定位错误\n\n\n\nApp Version: 当前应用的版本,也就是git tag上的版本,为了防止在发布到线上时编译错了版本,导致需要发布的新功能未能发布到线上.\n\n\n\nGit Branch: 编译时所编译的分支,用于查看是否将开发分支发布到了线上.\n\n\n\nGit Commit:最后一次的提交ID,通过该ID,我们可以通过git log排查功能在从开发分支合并到产品分支时,到底有没有漏掉\n\n\n\nGo Version:编译时golang的版本,尽管关于golang版本带来的问题不多,但是需要打上,防止以为golang版本所产生的错误,这种错误,非常难查.所以,需要标记\n\n\n\nBuild System: 在编译时,编译所在的操作系统类型.众所周知,GO有交叉编译,可在windows上编译linux,mac的可执行文件.而我被这种交叉编译坑的一次是在压测的时候,该压测的环境在centos上,但是我却在windows上编译了linux的可执行文件.最终在发生OOM时,通过交叉编译的可执行程序没有打印问题,而通过centos上编译的二进制文件输出了信息.\n\n\n\nBuild Time: 编译时的时间,该时间主要是为了印证\"人无完人\"这句话,一般情况下不会有问题,但是倘若在上线时,同个版本下,频繁更新,谁知道进程有没有更新呢.此时,可以通过编译时间\n\n\n\n### 01.一般流程\n\n\n\n我在发布版本时,会从开发分支上通过提交日志,辅助以下列命令,将一个个的功能提交合并到产品分支上.\n\n\n\n```sh\ngit cherry pick [commitId]\n```\n\n\n\ncommitId 可以通过 git log 命令查看,查看时会显示提交的信息.根据信息去合并功能.\n\n\n\n当所有功能全部合成到产品分支上之后,会进行提交,提交会产生一个commitId,\n\n\n\n基于该commitId,通过打tag的方式,可以向该时git上产品分支的状态进行备份\n\n\n\n```shell\ngit tag v0.1 -m \"comments..\" [commitId]\n```\n\n\n\n通过该备份,可以随时随地的进行还原.\n\n\n\n最后可通过,jenkins自动打包,k8s自动部署.\n\n\n\n### 02.linux编译脚本\n\n\n\n```shell\n#!/bin/bash\nos=$(go env GOOS)\narch=$(go env GOARCH)\ngoversion=$(go version | awk '{print $3}')\ncommitid=$(git rev-parse --short HEAD)\naccount=$(git log --pretty=format:\"%%an\" -1)\nbranch=$(git branch --show-current)\nnowtime=$(date +%Y-%m-%d.%H:%M:%S)\nappversion=1.6\nappname=example\ngo build -ldflags \"-X main._GitBranch=${branch} -X main._AppName=${appname} -X main._AppVersion=${appversion} -X main._OS=${os} -X main._Arch=${arch} -X main._GoVersion=${goversion} -X main._GitCommit=${commitid} -X main._GitAccount=${account} -X main._DateTime=${nowtime}\" -o ${appname}\n```\n\n\n\n输出结果\n\n\n\n```shell\n[root@localhost cmdline]# ./example version\nApp Name     :    example\nApp Version  :    1.6\nGit Branch   :    master\nGit Commit   :    ff72c3a\nGit Account  :    yuansudong\nGo Version   :    go1.14.12\nBuild System :    linux\nBuild Time   :    2021-03-11.03:02:36\nBuild Arch   :    amd64\n```\n\n\n\n### 03.windows编译脚本\n\n\n\n```bash\n@echo off\nfor /F %%i in ('go env GOOS') do ( set os=%%i)\nfor /F %%i in ('go env GOARCH') do ( set arch=%%i)\nfor /F %%i in ('go env GOVERSION') do ( set goversion=%%i)\nfor /F %%i in ('git rev-parse --short HEAD') do ( set commitid=%%i)\nfor /F %%i in ('git log --pretty^=format:\"%%an\" -1') do ( set account=%%i)\nfor /F \"tokens=* delims=\" %%i in ('git branch --show-current') do ( set branch=%%i)\nfor /f \"tokens=* delims=\" %%i in ('echo %date:~0,4%-%date:~5,2%-%date:~8,2%.%time:~1,1%:%time:~3,2%:%time:~6,2%') do ( set nowtime=\"%%i\")\nset appversion=1.6\nset appname=example\ngo build -ldflags \"-X main._GitBranch=%branch% -X main._AppName=%appname% -X main._AppVersion=%appversion% -X main._OS=%os% -X main._Arch=%arch% -X main._GoVersion=%goversion% -X main._GitCommit=%commitid% -X main._GitAccount=%account% -X main._DateTime=%nowtime%\" -o %appname%.exe\n```\n\n\n\n输出结果\n\n\n\n```cmd\nPS E:\\code\\golang\\src\\github.com\\yuansudong\\cobra\\generator\\cmdline> .\\example.exe version\nApp Name     :    example\nApp Version  :    1.6\nGit Branch   :    master\nGit Commit   :    d3b1940\nGit Account  :    yuansudong\nGo Version   :    go1.16\nBuild System :    windows\nBuild Time   :    2021-03-10.6:52:52\nBuild Arch   :    amd64\nPS E:\\code\\golang\\src\\github.com\\yuansudong\\cobra\\generator\\cmdline>\n```","slug":"technology-sense-code-version","published":1,"date":"2021-03-16T19:26:44.168Z","updated":"2021-03-16T20:03:56.395Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmchg4j5000y7gvle5teajt1","content":"<p>GIT是一个分布式版本控制软件，最初由林纳斯·托瓦兹创作，于2005年以GPL发布。最初目的是为更好地管理Linux内核开发而设计。最终走向了全世界</p>\n<p>在以前的工作中,GIT常被用作代码管理,以及版本控制,具有回滚到指定的提交点的功能.</p>\n<h2 id=\"1-问题场景\"><a href=\"#1-问题场景\" class=\"headerlink\" title=\"1.问题场景\"></a>1.问题场景</h2><p>每当版本发布的前一周,是最忙的日子.各种各样的问题频繁地爆出,而让我最难以接受的是,GOLANG编译之后的二进制执行文件发布到线上之后,不知道这个二进制可执行文件到底包含了哪些功能.</p>\n<p>以致于会听到,诸如404等错误码的反馈.当听到这些反馈之后,我看着这个二进制执行文件,不知是错误码返回错误,还是在编译的时候没从开发分支上集成这块的功能.</p>\n<p>亦或者是编译时,编译错了分支,错把开发分支编译成了产品分支,最终发布到了线上.</p>\n<p>亦或者是客户端的接口接入的有问题</p>\n<p>亦或者是编译时,编译错了版本,等等情况.</p>\n<p>仅仅看着一个二进制的文件,按照我现在的水平,我看不出里面有什么东西.</p>\n<p>一般出现这个错误之后,就会把GIT打开,再去拉取指定版本的代码将其重新编译,发布至线上.</p>\n<p>倘若能够第二次成功也好,但最害怕的是还有第三次,第四次,第N次.</p>\n<p>而线上,是能够让你试一试的地方么? 答案肯定是不能.</p>\n<h2 id=\"2-解决办法\"><a href=\"#2-解决办法\" class=\"headerlink\" title=\"2.解决办法\"></a>2.解决办法</h2><p>在编译时,将提交的ID编译进golang的二进制程序中,通过一番调研,发现GO在编译时,可通过下面的命令办到.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go build -ldflags &quot;-X main._GitBranch=$&#123;branch&#125; ...&quot; -o appname</span><br></pre></td></tr></table></figure>\n\n\n\n<p>main为包名,_GitBranch为main包下的一个变量.</p>\n<p>那么,到底需要将哪些元素,在编译时指定呢?根据个人实践会有所不同,而我却打入了下列的元素</p>\n<p>App Name: AppName用于指定该应用的名称,为了防止运维将二进制文件改名,导致问题定位错误</p>\n<p>App Version: 当前应用的版本,也就是git tag上的版本,为了防止在发布到线上时编译错了版本,导致需要发布的新功能未能发布到线上.</p>\n<p>Git Branch: 编译时所编译的分支,用于查看是否将开发分支发布到了线上.</p>\n<p>Git Commit:最后一次的提交ID,通过该ID,我们可以通过git log排查功能在从开发分支合并到产品分支时,到底有没有漏掉</p>\n<p>Go Version:编译时golang的版本,尽管关于golang版本带来的问题不多,但是需要打上,防止以为golang版本所产生的错误,这种错误,非常难查.所以,需要标记</p>\n<p>Build System: 在编译时,编译所在的操作系统类型.众所周知,GO有交叉编译,可在windows上编译linux,mac的可执行文件.而我被这种交叉编译坑的一次是在压测的时候,该压测的环境在centos上,但是我却在windows上编译了linux的可执行文件.最终在发生OOM时,通过交叉编译的可执行程序没有打印问题,而通过centos上编译的二进制文件输出了信息.</p>\n<p>Build Time: 编译时的时间,该时间主要是为了印证”人无完人”这句话,一般情况下不会有问题,但是倘若在上线时,同个版本下,频繁更新,谁知道进程有没有更新呢.此时,可以通过编译时间</p>\n<h3 id=\"01-一般流程\"><a href=\"#01-一般流程\" class=\"headerlink\" title=\"01.一般流程\"></a>01.一般流程</h3><p>我在发布版本时,会从开发分支上通过提交日志,辅助以下列命令,将一个个的功能提交合并到产品分支上.</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git cherry pick [commitId]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>commitId 可以通过 git log 命令查看,查看时会显示提交的信息.根据信息去合并功能.</p>\n<p>当所有功能全部合成到产品分支上之后,会进行提交,提交会产生一个commitId,</p>\n<p>基于该commitId,通过打tag的方式,可以向该时git上产品分支的状态进行备份</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag v0.1 -m &quot;comments..&quot; [commitId]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>通过该备份,可以随时随地的进行还原.</p>\n<p>最后可通过,jenkins自动打包,k8s自动部署.</p>\n<h3 id=\"02-linux编译脚本\"><a href=\"#02-linux编译脚本\" class=\"headerlink\" title=\"02.linux编译脚本\"></a>02.linux编译脚本</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\">os=$(go env GOOS)</span><br><span class=\"line\">arch=$(go env GOARCH)</span><br><span class=\"line\">goversion=$(go version | awk &#x27;&#123;print $3&#125;&#x27;)</span><br><span class=\"line\">commitid=$(git rev-parse --short HEAD)</span><br><span class=\"line\">account=$(git log --pretty=format:&quot;%%an&quot; -1)</span><br><span class=\"line\">branch=$(git branch --show-current)</span><br><span class=\"line\">nowtime=$(date +%Y-%m-%d.%H:%M:%S)</span><br><span class=\"line\">appversion=1.6</span><br><span class=\"line\">appname=example</span><br><span class=\"line\">go build -ldflags &quot;-X main._GitBranch=$&#123;branch&#125; -X main._AppName=$&#123;appname&#125; -X main._AppVersion=$&#123;appversion&#125; -X main._OS=$&#123;os&#125; -X main._Arch=$&#123;arch&#125; -X main._GoVersion=$&#123;goversion&#125; -X main._GitCommit=$&#123;commitid&#125; -X main._GitAccount=$&#123;account&#125; -X main._DateTime=$&#123;nowtime&#125;&quot; -o $&#123;appname&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>输出结果</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost cmdline]# ./example version</span><br><span class=\"line\">App Name     :    example</span><br><span class=\"line\">App Version  :    1.6</span><br><span class=\"line\">Git Branch   :    master</span><br><span class=\"line\">Git Commit   :    ff72c3a</span><br><span class=\"line\">Git Account  :    yuansudong</span><br><span class=\"line\">Go Version   :    go1.14.12</span><br><span class=\"line\">Build System :    linux</span><br><span class=\"line\">Build Time   :    2021-03-11.03:02:36</span><br><span class=\"line\">Build Arch   :    amd64</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"03-windows编译脚本\"><a href=\"#03-windows编译脚本\" class=\"headerlink\" title=\"03.windows编译脚本\"></a>03.windows编译脚本</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"built_in\">echo</span> off</span><br><span class=\"line\"><span class=\"keyword\">for</span> /F %%i <span class=\"keyword\">in</span> (<span class=\"string\">&#x27;go env GOOS&#x27;</span>) <span class=\"keyword\">do</span> ( <span class=\"built_in\">set</span> os=%%i)</span><br><span class=\"line\"><span class=\"keyword\">for</span> /F %%i <span class=\"keyword\">in</span> (<span class=\"string\">&#x27;go env GOARCH&#x27;</span>) <span class=\"keyword\">do</span> ( <span class=\"built_in\">set</span> arch=%%i)</span><br><span class=\"line\"><span class=\"keyword\">for</span> /F %%i <span class=\"keyword\">in</span> (<span class=\"string\">&#x27;go env GOVERSION&#x27;</span>) <span class=\"keyword\">do</span> ( <span class=\"built_in\">set</span> goversion=%%i)</span><br><span class=\"line\"><span class=\"keyword\">for</span> /F %%i <span class=\"keyword\">in</span> (<span class=\"string\">&#x27;git rev-parse --short HEAD&#x27;</span>) <span class=\"keyword\">do</span> ( <span class=\"built_in\">set</span> commitid=%%i)</span><br><span class=\"line\"><span class=\"keyword\">for</span> /F %%i <span class=\"keyword\">in</span> (<span class=\"string\">&#x27;git log --pretty^=format:&quot;%%an&quot; -1&#x27;</span>) <span class=\"keyword\">do</span> ( <span class=\"built_in\">set</span> account=%%i)</span><br><span class=\"line\"><span class=\"keyword\">for</span> /F <span class=\"string\">&quot;tokens=* delims=&quot;</span> %%i <span class=\"keyword\">in</span> (<span class=\"string\">&#x27;git branch --show-current&#x27;</span>) <span class=\"keyword\">do</span> ( <span class=\"built_in\">set</span> branch=%%i)</span><br><span class=\"line\"><span class=\"keyword\">for</span> /f <span class=\"string\">&quot;tokens=* delims=&quot;</span> %%i <span class=\"keyword\">in</span> (<span class=\"string\">&#x27;echo %date:~0,4%-%date:~5,2%-%date:~8,2%.%time:~1,1%:%time:~3,2%:%time:~6,2%&#x27;</span>) <span class=\"keyword\">do</span> ( <span class=\"built_in\">set</span> nowtime=<span class=\"string\">&quot;%%i&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">set</span> appversion=1.6</span><br><span class=\"line\"><span class=\"built_in\">set</span> appname=example</span><br><span class=\"line\">go build -ldflags <span class=\"string\">&quot;-X main._GitBranch=%branch% -X main._AppName=%appname% -X main._AppVersion=%appversion% -X main._OS=%os% -X main._Arch=%arch% -X main._GoVersion=%goversion% -X main._GitCommit=%commitid% -X main._GitAccount=%account% -X main._DateTime=%nowtime%&quot;</span> -o %appname%.exe</span><br></pre></td></tr></table></figure>\n\n\n\n<p>输出结果</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PS E:\\code\\golang\\src\\github.com\\yuansudong\\cobra\\generator\\cmdline&gt; .\\example.exe version</span><br><span class=\"line\">App Name     :    example</span><br><span class=\"line\">App Version  :    <span class=\"number\">1</span>.<span class=\"number\">6</span></span><br><span class=\"line\">Git Branch   :    master</span><br><span class=\"line\">Git Commit   :    d3b1940</span><br><span class=\"line\">Git Account  :    yuansudong</span><br><span class=\"line\">Go Version   :    go1.<span class=\"number\">16</span></span><br><span class=\"line\">Build System :    windows</span><br><span class=\"line\">Build <span class=\"built_in\">Time</span>   :    <span class=\"number\">2021</span>-<span class=\"number\">03</span>-<span class=\"number\">10</span>.<span class=\"number\">6</span>:<span class=\"number\">52</span>:<span class=\"number\">52</span></span><br><span class=\"line\">Build Arch   :    amd64</span><br><span class=\"line\">PS E:\\code\\golang\\src\\github.com\\yuansudong\\cobra\\generator\\cmdline&gt;</span><br></pre></td></tr></table></figure>","site":{"data":{"contact":[{"title":"github","icon":"icon-github","link":"https://github.com/yuansudong"},{"title":"email","icon":"icon-email","link":"mailto:1145919989@qq.com"},{"title":"qq","icon":"icon-qq","link":"/atom.xml"}],"favicons":["<link rel=\"shortcut icon\" href=\"/img//favicon.ico\">","<link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/img//favicon-16x16.png\">","<link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/img//favicon-32x32.png\">","<link rel=\"icon\" type=\"image/png\" sizes=\"48x48\" href=\"/img//favicon-48x48.png\">","<link rel=\"manifest\" href=\"/img//manifest.json\">","<meta name=\"mobile-web-app-capable\" content=\"yes\">","<meta name=\"theme-color\" content=\"#fff\">","<meta name=\"application-name\">","<link rel=\"apple-touch-icon\" sizes=\"57x57\" href=\"/img//apple-touch-icon-57x57.png\">","<link rel=\"apple-touch-icon\" sizes=\"60x60\" href=\"/img//apple-touch-icon-60x60.png\">","<link rel=\"apple-touch-icon\" sizes=\"72x72\" href=\"/img//apple-touch-icon-72x72.png\">","<link rel=\"apple-touch-icon\" sizes=\"76x76\" href=\"/img//apple-touch-icon-76x76.png\">","<link rel=\"apple-touch-icon\" sizes=\"114x114\" href=\"/img//apple-touch-icon-114x114.png\">","<link rel=\"apple-touch-icon\" sizes=\"120x120\" href=\"/img//apple-touch-icon-120x120.png\">","<link rel=\"apple-touch-icon\" sizes=\"144x144\" href=\"/img//apple-touch-icon-144x144.png\">","<link rel=\"apple-touch-icon\" sizes=\"152x152\" href=\"/img//apple-touch-icon-152x152.png\">","<link rel=\"apple-touch-icon\" sizes=\"167x167\" href=\"/img//apple-touch-icon-167x167.png\">","<link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/img//apple-touch-icon-180x180.png\">","<link rel=\"apple-touch-icon\" sizes=\"1024x1024\" href=\"/img//apple-touch-icon-1024x1024.png\">","<meta name=\"apple-mobile-web-app-capable\" content=\"yes\">","<meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black-translucent\">","<meta name=\"apple-mobile-web-app-title\">","<meta name=\"msapplication-TileColor\" content=\"#fff\">","<meta name=\"msapplication-TileImage\" content=\"/img//mstile-144x144.png\">","<meta name=\"msapplication-config\" content=\"/img//browserconfig.xml\">"]}},"excerpt":"","more":"<p>GIT是一个分布式版本控制软件，最初由林纳斯·托瓦兹创作，于2005年以GPL发布。最初目的是为更好地管理Linux内核开发而设计。最终走向了全世界</p>\n<p>在以前的工作中,GIT常被用作代码管理,以及版本控制,具有回滚到指定的提交点的功能.</p>\n<h2 id=\"1-问题场景\"><a href=\"#1-问题场景\" class=\"headerlink\" title=\"1.问题场景\"></a>1.问题场景</h2><p>每当版本发布的前一周,是最忙的日子.各种各样的问题频繁地爆出,而让我最难以接受的是,GOLANG编译之后的二进制执行文件发布到线上之后,不知道这个二进制可执行文件到底包含了哪些功能.</p>\n<p>以致于会听到,诸如404等错误码的反馈.当听到这些反馈之后,我看着这个二进制执行文件,不知是错误码返回错误,还是在编译的时候没从开发分支上集成这块的功能.</p>\n<p>亦或者是编译时,编译错了分支,错把开发分支编译成了产品分支,最终发布到了线上.</p>\n<p>亦或者是客户端的接口接入的有问题</p>\n<p>亦或者是编译时,编译错了版本,等等情况.</p>\n<p>仅仅看着一个二进制的文件,按照我现在的水平,我看不出里面有什么东西.</p>\n<p>一般出现这个错误之后,就会把GIT打开,再去拉取指定版本的代码将其重新编译,发布至线上.</p>\n<p>倘若能够第二次成功也好,但最害怕的是还有第三次,第四次,第N次.</p>\n<p>而线上,是能够让你试一试的地方么? 答案肯定是不能.</p>\n<h2 id=\"2-解决办法\"><a href=\"#2-解决办法\" class=\"headerlink\" title=\"2.解决办法\"></a>2.解决办法</h2><p>在编译时,将提交的ID编译进golang的二进制程序中,通过一番调研,发现GO在编译时,可通过下面的命令办到.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go build -ldflags &quot;-X main._GitBranch=$&#123;branch&#125; ...&quot; -o appname</span><br></pre></td></tr></table></figure>\n\n\n\n<p>main为包名,_GitBranch为main包下的一个变量.</p>\n<p>那么,到底需要将哪些元素,在编译时指定呢?根据个人实践会有所不同,而我却打入了下列的元素</p>\n<p>App Name: AppName用于指定该应用的名称,为了防止运维将二进制文件改名,导致问题定位错误</p>\n<p>App Version: 当前应用的版本,也就是git tag上的版本,为了防止在发布到线上时编译错了版本,导致需要发布的新功能未能发布到线上.</p>\n<p>Git Branch: 编译时所编译的分支,用于查看是否将开发分支发布到了线上.</p>\n<p>Git Commit:最后一次的提交ID,通过该ID,我们可以通过git log排查功能在从开发分支合并到产品分支时,到底有没有漏掉</p>\n<p>Go Version:编译时golang的版本,尽管关于golang版本带来的问题不多,但是需要打上,防止以为golang版本所产生的错误,这种错误,非常难查.所以,需要标记</p>\n<p>Build System: 在编译时,编译所在的操作系统类型.众所周知,GO有交叉编译,可在windows上编译linux,mac的可执行文件.而我被这种交叉编译坑的一次是在压测的时候,该压测的环境在centos上,但是我却在windows上编译了linux的可执行文件.最终在发生OOM时,通过交叉编译的可执行程序没有打印问题,而通过centos上编译的二进制文件输出了信息.</p>\n<p>Build Time: 编译时的时间,该时间主要是为了印证”人无完人”这句话,一般情况下不会有问题,但是倘若在上线时,同个版本下,频繁更新,谁知道进程有没有更新呢.此时,可以通过编译时间</p>\n<h3 id=\"01-一般流程\"><a href=\"#01-一般流程\" class=\"headerlink\" title=\"01.一般流程\"></a>01.一般流程</h3><p>我在发布版本时,会从开发分支上通过提交日志,辅助以下列命令,将一个个的功能提交合并到产品分支上.</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git cherry pick [commitId]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>commitId 可以通过 git log 命令查看,查看时会显示提交的信息.根据信息去合并功能.</p>\n<p>当所有功能全部合成到产品分支上之后,会进行提交,提交会产生一个commitId,</p>\n<p>基于该commitId,通过打tag的方式,可以向该时git上产品分支的状态进行备份</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag v0.1 -m &quot;comments..&quot; [commitId]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>通过该备份,可以随时随地的进行还原.</p>\n<p>最后可通过,jenkins自动打包,k8s自动部署.</p>\n<h3 id=\"02-linux编译脚本\"><a href=\"#02-linux编译脚本\" class=\"headerlink\" title=\"02.linux编译脚本\"></a>02.linux编译脚本</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\">os=$(go env GOOS)</span><br><span class=\"line\">arch=$(go env GOARCH)</span><br><span class=\"line\">goversion=$(go version | awk &#x27;&#123;print $3&#125;&#x27;)</span><br><span class=\"line\">commitid=$(git rev-parse --short HEAD)</span><br><span class=\"line\">account=$(git log --pretty=format:&quot;%%an&quot; -1)</span><br><span class=\"line\">branch=$(git branch --show-current)</span><br><span class=\"line\">nowtime=$(date +%Y-%m-%d.%H:%M:%S)</span><br><span class=\"line\">appversion=1.6</span><br><span class=\"line\">appname=example</span><br><span class=\"line\">go build -ldflags &quot;-X main._GitBranch=$&#123;branch&#125; -X main._AppName=$&#123;appname&#125; -X main._AppVersion=$&#123;appversion&#125; -X main._OS=$&#123;os&#125; -X main._Arch=$&#123;arch&#125; -X main._GoVersion=$&#123;goversion&#125; -X main._GitCommit=$&#123;commitid&#125; -X main._GitAccount=$&#123;account&#125; -X main._DateTime=$&#123;nowtime&#125;&quot; -o $&#123;appname&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>输出结果</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost cmdline]# ./example version</span><br><span class=\"line\">App Name     :    example</span><br><span class=\"line\">App Version  :    1.6</span><br><span class=\"line\">Git Branch   :    master</span><br><span class=\"line\">Git Commit   :    ff72c3a</span><br><span class=\"line\">Git Account  :    yuansudong</span><br><span class=\"line\">Go Version   :    go1.14.12</span><br><span class=\"line\">Build System :    linux</span><br><span class=\"line\">Build Time   :    2021-03-11.03:02:36</span><br><span class=\"line\">Build Arch   :    amd64</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"03-windows编译脚本\"><a href=\"#03-windows编译脚本\" class=\"headerlink\" title=\"03.windows编译脚本\"></a>03.windows编译脚本</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"built_in\">echo</span> off</span><br><span class=\"line\"><span class=\"keyword\">for</span> /F %%i <span class=\"keyword\">in</span> (<span class=\"string\">&#x27;go env GOOS&#x27;</span>) <span class=\"keyword\">do</span> ( <span class=\"built_in\">set</span> os=%%i)</span><br><span class=\"line\"><span class=\"keyword\">for</span> /F %%i <span class=\"keyword\">in</span> (<span class=\"string\">&#x27;go env GOARCH&#x27;</span>) <span class=\"keyword\">do</span> ( <span class=\"built_in\">set</span> arch=%%i)</span><br><span class=\"line\"><span class=\"keyword\">for</span> /F %%i <span class=\"keyword\">in</span> (<span class=\"string\">&#x27;go env GOVERSION&#x27;</span>) <span class=\"keyword\">do</span> ( <span class=\"built_in\">set</span> goversion=%%i)</span><br><span class=\"line\"><span class=\"keyword\">for</span> /F %%i <span class=\"keyword\">in</span> (<span class=\"string\">&#x27;git rev-parse --short HEAD&#x27;</span>) <span class=\"keyword\">do</span> ( <span class=\"built_in\">set</span> commitid=%%i)</span><br><span class=\"line\"><span class=\"keyword\">for</span> /F %%i <span class=\"keyword\">in</span> (<span class=\"string\">&#x27;git log --pretty^=format:&quot;%%an&quot; -1&#x27;</span>) <span class=\"keyword\">do</span> ( <span class=\"built_in\">set</span> account=%%i)</span><br><span class=\"line\"><span class=\"keyword\">for</span> /F <span class=\"string\">&quot;tokens=* delims=&quot;</span> %%i <span class=\"keyword\">in</span> (<span class=\"string\">&#x27;git branch --show-current&#x27;</span>) <span class=\"keyword\">do</span> ( <span class=\"built_in\">set</span> branch=%%i)</span><br><span class=\"line\"><span class=\"keyword\">for</span> /f <span class=\"string\">&quot;tokens=* delims=&quot;</span> %%i <span class=\"keyword\">in</span> (<span class=\"string\">&#x27;echo %date:~0,4%-%date:~5,2%-%date:~8,2%.%time:~1,1%:%time:~3,2%:%time:~6,2%&#x27;</span>) <span class=\"keyword\">do</span> ( <span class=\"built_in\">set</span> nowtime=<span class=\"string\">&quot;%%i&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">set</span> appversion=1.6</span><br><span class=\"line\"><span class=\"built_in\">set</span> appname=example</span><br><span class=\"line\">go build -ldflags <span class=\"string\">&quot;-X main._GitBranch=%branch% -X main._AppName=%appname% -X main._AppVersion=%appversion% -X main._OS=%os% -X main._Arch=%arch% -X main._GoVersion=%goversion% -X main._GitCommit=%commitid% -X main._GitAccount=%account% -X main._DateTime=%nowtime%&quot;</span> -o %appname%.exe</span><br></pre></td></tr></table></figure>\n\n\n\n<p>输出结果</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PS E:\\code\\golang\\src\\github.com\\yuansudong\\cobra\\generator\\cmdline&gt; .\\example.exe version</span><br><span class=\"line\">App Name     :    example</span><br><span class=\"line\">App Version  :    <span class=\"number\">1</span>.<span class=\"number\">6</span></span><br><span class=\"line\">Git Branch   :    master</span><br><span class=\"line\">Git Commit   :    d3b1940</span><br><span class=\"line\">Git Account  :    yuansudong</span><br><span class=\"line\">Go Version   :    go1.<span class=\"number\">16</span></span><br><span class=\"line\">Build System :    windows</span><br><span class=\"line\">Build <span class=\"built_in\">Time</span>   :    <span class=\"number\">2021</span>-<span class=\"number\">03</span>-<span class=\"number\">10</span>.<span class=\"number\">6</span>:<span class=\"number\">52</span>:<span class=\"number\">52</span></span><br><span class=\"line\">Build Arch   :    amd64</span><br><span class=\"line\">PS E:\\code\\golang\\src\\github.com\\yuansudong\\cobra\\generator\\cmdline&gt;</span><br></pre></td></tr></table></figure>"},{"title":"技术场景之解决推广裂变异常","cover":"/img/technology-sense/fission_exception_title.png","subtitle":"技术场景之解决hash碰撞","author":{"nick":"袁苏东","link":"https://github.com/yuansudong"},"typora-root-url":"technology-fission-exception","_content":"\n随着互联网裂变式自媒体的不断崛起,低成本引流成为企业的强烈需求.伴随着微信,FACEBOOK,微博,B站,头条等自媒体平台的崛起.\n\n\n\n裂变式营销逐渐成为推广的一种方式.而其中\"社交裂变\"成为了其中的重中之重.\n\n\n\n近年来,随着微信生态的发展与成熟,形成了具有中国特色的商业模式和形态.任何一家企业或者个人都可以通过微信的生态圈获得百万级,乃至千万级的用户.\n\n\n\n而裂变营销的核心之一是确保推广人的利益.倘若,推广人的利益受损,又有哪个推广人愿意继续推广呢?\n\n\n\n当然,不排除兴趣.但是,兴趣这个词太过于\"玄妙\".非正常人所能触及,更多的趋向于利益.\n\n\n\n那么,要如何确保推广人的利益,是裂变的核心话题.\n\n\n\n## 1.问题场景\n\n\n\n用户在注册时,不愿意输入附加信息.而此类附加信息是缔造邀请人与被邀请人联系的核心,比如邀请码.\n\n\n\n用户不愿意输入附加信息,程序就不要让用户输入附加信息.将附加信息,在注册时,以静默的方式放在注册接口里,上传给服务器\n\n\n\n## 2.裂变流程\n\n\n\n### 01.已知用户复制推广链接发给未知用户\n\n\n\n推广链接举例:https://dl.ptm.com/invation.html?code=AAC98Z&channel=vivo\n\n\n\n其中code便是种子用户的邀请码.channel便是推广渠道.\n\n\n\n### 02.未知用户点击链接进入浏览器下载页面\n\n\n\n在用户进入下载页面之后,该页面首先要做的是将当前系统的环境和邀请码以及渠道信息,通过接口上传至服务器.\n\n\n\n目前,Javascript 可以拿到下面的信息\n\n\n\n```yaml\nAppVersion: 5.0 (windows nt 10.0; win64; x64) applewebkit/537.36 (khtml, like gecko) chrome/89.0.4356.6 safari/537.36\nLanguage: zh-cn\nAppCodeName: mozilla\nAppName: netscape\nMemory: 8G\nCPU: 4核\n屏幕分辨率: 1920 X 1080\nGPU: angle (intel(r) hd graphics 4600 direct3d11 vs_5_0 ps_5_0)\n```\n\n\n\n相关代码如下\n\n\n\n```javascript\n$(\"#user_agent\").text(window.navigator.appVersion.toLowerCase());\n$(\"#language\").text(window.navigator.language.toLowerCase());\n$(\"#app_code_name\").text(window.navigator.appCodeName.toLowerCase());\n$(\"#app_name\").text(window.navigator.appName.toLowerCase());\n$(\"#memory\").text(window.navigator.deviceMemory+\"G\");\n$(\"#cpu\").text(window.navigator.hardwareConcurrency+\"核\");\n$(\"#width_height\").text(window.screen.width*window.devicePixelRatio+\" X \"+window.screen.height*window.devicePixelRatio);\nvar canvas = document.createElement('canvas');\nvar gl = canvas.getContext('experimental-webgl');\nvar debugInfo = gl.getExtension('WEBGL_debug_renderer_info');\n$(\"#gpu\").text(gl.getParameter(debugInfo.UNMASKED_RENDERER_WEBGL).toLowerCase());\n```\n\n\n\n客户端需要上传的参数如下.\n\n\n\n```yaml\nchannel: 渠道 # string 渠道未定,正规的就是那几大运营尝试.  https://dl.ptm.com/invation.html?code=AAC98Z&channel=vivo,可从连接中获取chnnael,code和channel不一定都有.\ninvationCode: AAC98Z #  string   https://dl.ptm.com/invation.html?code=AAC98Z&channel=vivo ,可从连接参数中获取\nlanguage: zh_cn # string 采用全部小写,需要用toLowerCase()转换.\ncpu: 4 # number \nresolutionWidth: 1920 # number 屏幕分辨率中的宽\nresolutionHeight: 1080 # number 屏幕分辨率中的高\ngpu: angle (intel(r) hd graphics 4600 direct3d11 vs_5_0 ps_5_0) # string GPU的型号\n```\n\n\n\n调用该接口后,服务端会在后台数据库中生成一条记录,该记录将邀请码与IP以及系统环境信息绑定在一起.\n\n\n\n并且服务端会返回,当前的系统信息[IOS,ANDROID,UNKNOWN],以及相关系统的下载连接\n\n\n\nweb端可通过动态创建a标签,模拟人为点击,进行下载.\n\n\n\n```javascript\nfunction copy(text){\n        let textarea = document.createElement('textarea');\n        textarea.id = \"copyTextarea\";\n        textarea.style.width = 0;\n        textarea.style.height = 0;\n        document.body.appendChild(textarea);\n        textarea = document.getElementById('copyTextarea');\n        textarea.innerHTML = text;\n        \n        if( \"android\" == \"ios\"){ //  此处需要获取本机,判断是不是ios\n            const range = document.createRange();\n            range.selectNode(document.getElementById('copyTextarea'));\n            const selection = window.getSelection();\n            if (selection.rangeCount > 0) selection.removeAllRanges();\n            selection.addRange(range);\n        }else{\n            textarea.select(); // 选中文本(select()方法对IOS部分版本无效)\n        }\n        document.execCommand('copy');\n        document.body.removeChild(textarea);\n }\n $(\"#dl_btn\").click(function(){\n        copy(\"<huowu.ptm.com:invation>AAC98Z</huowu.ptm.com:invation>\")\n        var eleA = document.createElement('a');\n        eleA.setAttribute(\"href\",\"接口中返回的一个下载地址\");\n        elseA.click(); // 模拟人为点击,避免打开新的页面去下载 \n })\n```\n\n\n\n### 03.未知用户进入注册流程\n\n\n\n为了方便提取,此处使用正则表达式的方式提取邀请码.正则表达式如下.\n\n\n\n```\n<huowu.ptm.com:invation>([\\s\\S]*?)</huowu.ptm.com:invation>\n```\n\n\n\n下面是GO代码举例,达到一个抛砖引玉的过程.\n\n\n\n```go\n/**********************************************************************\n假设剪贴板中的内容是这样:\n  start \n  <huowu.ptm.com:invation>ACD78Z</huowu.ptm.com:invation> \n  end \n  人生若如初见,何事秋风悲画扇\n    等闲却道故人心,却道故人心易变\n    忽有故人心上过,回首山河已是秋\n    两处相思同沐雪,此生也算共白头\n  <huowu.ptm.com:invation>一个旧的邀请码</huowu.ptm.com:invation>\n***********************************************************************/\n\nfunc main() {\n    _GrapInvationCode()\n}\n\n// _GrapInvationCode 抓取\nfunc _GrapInvationCode() {\n    sCliboradContent = `\n    start \n  <huowu.ptm.com:invation>ACD78Z</huowu.ptm.com:invation> \n  end \n  人生若如初见,何事秋风悲画扇\n    等闲却道故人心,却道故人心易变\n    忽有故人心上过,回首山河已是秋\n    两处相思同沐雪,此生也算共白头\n  <huowu.ptm.com:invation>一个旧的邀请码</huowu.ptm.com:invation>\n    `\n    reg, err := regexp.Compile(\"<huowu.ptm.com:invation>(.*?)</huowu.ptm.com:invation>\")\n  if err != nil {\n    log.Println(err.Error())\n    return\n  }\n\n  sMatchArr := reg.FindAllString(sCliboradContent, 1) // 1指,匹配到一个就返回.\n  if len(matchArr) == 0 {\n    return // 代表剪贴板中,无该格式的内容\n  }\n  sDstStr := sMatchArr[0]\n  sInvationCode := reg.ReplaceAllString(sDstStr, \"$1\")\n  log.Println(sInvationCode)\n}\n```\n\n\n\n通过提取,会输出下面的内容\n\n\n\n```\n2021/01/25 10:08:44 ACD78Z # ACD78Z 就是该用户的最新邀请码\n```\n\n\n\n## 3.异常情况\n\n\n\n### 01.客户端没有在剪贴板中获得邀请码\n\n\n\n据搭档反馈,他每次只能拿到剪贴板的最新的一条数据.倘若未知用户的环境在注册app前,进行了复制操作.那么,剪贴板中的邀请码就会被清空.\n\n\n\n客户端拿不到邀请码,服务端就无法让新注册用户与邀请人建立联系,直接导致邀请人利益受损.\n\n\n\n关系好的,直接让你在后台修改. 关系不好的,直接终止推广.\n\n\n\n针对此类的情况,采取的补救措施是在注册接口中,同时附带如下信息.\n\n\n\n```yaml\nlanguage: zh_cn # 系统的默认语言环境 string 采用全部小写,需要用toLowerCase()转换.\ncpu: 4 # number \nresolutionWidth: 1920 # number 屏幕分辨率中的宽,此处分辨率,需要web端和移动端对一下,有的可能拿到的是屏幕的宽度或者高度.而不是分辨率.以前有同时跳过这个坑\nresolutionHeight: 1080 # number 屏幕分辨率中的高\ngpu: angle (intel(r) hd graphics 4600 direct3d11 vs_5_0 ps_5_0) # string GPU的型号\nsystem: \"ios\" # 此处有三个选项,[ios,android,unknown]\n```\n\n\n\n通过上面的参数,服务器这面会根据请求的IP,查出一个该IP下的所有下载记录.这些记录里包含着每次下载的邀请码.\n\n\n\n根据每条参数里的信息,做一个分值匹配.取分值最高的作为新注册用户的邀请码.\n\n\n\n### 02.客户端在剪贴板中没拿到邀请码.而多个下载用户处于同一局域网\n\n\n\n处于同一局域网,意味着这些下载IP对于服务器而言是一致的.倘若是不同的邀请码.服务器则以该IP下最新的邀请码,作为新注册的邀请码.\n\n\n\n### 03.客户端没有拿到邀请码.而该IP又没有下载记录.\n\n\n\n对于此种情况,发生的场景一般是.邀请人直接下了个安装包.发在了他的资源群.资源群的未知用户,通过该安装包进行安装.\n\n\n\n此种情况,导致了客户端拿不到邀请码.而服务端又没有未知用户的IP下载记录.\n\n\n\n服务端处理的方式是,对于此类情形,将新注册的用户归纳为自然流入用户.即该新注册用户没有邀请人.","source":"_posts/technology-sense-fission-exception.md","raw":"---\ntitle: 技术场景之解决推广裂变异常\ncover:  /img/technology-sense/fission_exception_title.png\nsubtitle: 技术场景之解决hash碰撞\ncategories: \"技术场景\"\ntags: \"技术场景\"\nauthor:\n  nick: 袁苏东\n  link: https://github.com/yuansudong\ntypora-root-url: technology-fission-exception\n---\n\n随着互联网裂变式自媒体的不断崛起,低成本引流成为企业的强烈需求.伴随着微信,FACEBOOK,微博,B站,头条等自媒体平台的崛起.\n\n\n\n裂变式营销逐渐成为推广的一种方式.而其中\"社交裂变\"成为了其中的重中之重.\n\n\n\n近年来,随着微信生态的发展与成熟,形成了具有中国特色的商业模式和形态.任何一家企业或者个人都可以通过微信的生态圈获得百万级,乃至千万级的用户.\n\n\n\n而裂变营销的核心之一是确保推广人的利益.倘若,推广人的利益受损,又有哪个推广人愿意继续推广呢?\n\n\n\n当然,不排除兴趣.但是,兴趣这个词太过于\"玄妙\".非正常人所能触及,更多的趋向于利益.\n\n\n\n那么,要如何确保推广人的利益,是裂变的核心话题.\n\n\n\n## 1.问题场景\n\n\n\n用户在注册时,不愿意输入附加信息.而此类附加信息是缔造邀请人与被邀请人联系的核心,比如邀请码.\n\n\n\n用户不愿意输入附加信息,程序就不要让用户输入附加信息.将附加信息,在注册时,以静默的方式放在注册接口里,上传给服务器\n\n\n\n## 2.裂变流程\n\n\n\n### 01.已知用户复制推广链接发给未知用户\n\n\n\n推广链接举例:https://dl.ptm.com/invation.html?code=AAC98Z&channel=vivo\n\n\n\n其中code便是种子用户的邀请码.channel便是推广渠道.\n\n\n\n### 02.未知用户点击链接进入浏览器下载页面\n\n\n\n在用户进入下载页面之后,该页面首先要做的是将当前系统的环境和邀请码以及渠道信息,通过接口上传至服务器.\n\n\n\n目前,Javascript 可以拿到下面的信息\n\n\n\n```yaml\nAppVersion: 5.0 (windows nt 10.0; win64; x64) applewebkit/537.36 (khtml, like gecko) chrome/89.0.4356.6 safari/537.36\nLanguage: zh-cn\nAppCodeName: mozilla\nAppName: netscape\nMemory: 8G\nCPU: 4核\n屏幕分辨率: 1920 X 1080\nGPU: angle (intel(r) hd graphics 4600 direct3d11 vs_5_0 ps_5_0)\n```\n\n\n\n相关代码如下\n\n\n\n```javascript\n$(\"#user_agent\").text(window.navigator.appVersion.toLowerCase());\n$(\"#language\").text(window.navigator.language.toLowerCase());\n$(\"#app_code_name\").text(window.navigator.appCodeName.toLowerCase());\n$(\"#app_name\").text(window.navigator.appName.toLowerCase());\n$(\"#memory\").text(window.navigator.deviceMemory+\"G\");\n$(\"#cpu\").text(window.navigator.hardwareConcurrency+\"核\");\n$(\"#width_height\").text(window.screen.width*window.devicePixelRatio+\" X \"+window.screen.height*window.devicePixelRatio);\nvar canvas = document.createElement('canvas');\nvar gl = canvas.getContext('experimental-webgl');\nvar debugInfo = gl.getExtension('WEBGL_debug_renderer_info');\n$(\"#gpu\").text(gl.getParameter(debugInfo.UNMASKED_RENDERER_WEBGL).toLowerCase());\n```\n\n\n\n客户端需要上传的参数如下.\n\n\n\n```yaml\nchannel: 渠道 # string 渠道未定,正规的就是那几大运营尝试.  https://dl.ptm.com/invation.html?code=AAC98Z&channel=vivo,可从连接中获取chnnael,code和channel不一定都有.\ninvationCode: AAC98Z #  string   https://dl.ptm.com/invation.html?code=AAC98Z&channel=vivo ,可从连接参数中获取\nlanguage: zh_cn # string 采用全部小写,需要用toLowerCase()转换.\ncpu: 4 # number \nresolutionWidth: 1920 # number 屏幕分辨率中的宽\nresolutionHeight: 1080 # number 屏幕分辨率中的高\ngpu: angle (intel(r) hd graphics 4600 direct3d11 vs_5_0 ps_5_0) # string GPU的型号\n```\n\n\n\n调用该接口后,服务端会在后台数据库中生成一条记录,该记录将邀请码与IP以及系统环境信息绑定在一起.\n\n\n\n并且服务端会返回,当前的系统信息[IOS,ANDROID,UNKNOWN],以及相关系统的下载连接\n\n\n\nweb端可通过动态创建a标签,模拟人为点击,进行下载.\n\n\n\n```javascript\nfunction copy(text){\n        let textarea = document.createElement('textarea');\n        textarea.id = \"copyTextarea\";\n        textarea.style.width = 0;\n        textarea.style.height = 0;\n        document.body.appendChild(textarea);\n        textarea = document.getElementById('copyTextarea');\n        textarea.innerHTML = text;\n        \n        if( \"android\" == \"ios\"){ //  此处需要获取本机,判断是不是ios\n            const range = document.createRange();\n            range.selectNode(document.getElementById('copyTextarea'));\n            const selection = window.getSelection();\n            if (selection.rangeCount > 0) selection.removeAllRanges();\n            selection.addRange(range);\n        }else{\n            textarea.select(); // 选中文本(select()方法对IOS部分版本无效)\n        }\n        document.execCommand('copy');\n        document.body.removeChild(textarea);\n }\n $(\"#dl_btn\").click(function(){\n        copy(\"<huowu.ptm.com:invation>AAC98Z</huowu.ptm.com:invation>\")\n        var eleA = document.createElement('a');\n        eleA.setAttribute(\"href\",\"接口中返回的一个下载地址\");\n        elseA.click(); // 模拟人为点击,避免打开新的页面去下载 \n })\n```\n\n\n\n### 03.未知用户进入注册流程\n\n\n\n为了方便提取,此处使用正则表达式的方式提取邀请码.正则表达式如下.\n\n\n\n```\n<huowu.ptm.com:invation>([\\s\\S]*?)</huowu.ptm.com:invation>\n```\n\n\n\n下面是GO代码举例,达到一个抛砖引玉的过程.\n\n\n\n```go\n/**********************************************************************\n假设剪贴板中的内容是这样:\n  start \n  <huowu.ptm.com:invation>ACD78Z</huowu.ptm.com:invation> \n  end \n  人生若如初见,何事秋风悲画扇\n    等闲却道故人心,却道故人心易变\n    忽有故人心上过,回首山河已是秋\n    两处相思同沐雪,此生也算共白头\n  <huowu.ptm.com:invation>一个旧的邀请码</huowu.ptm.com:invation>\n***********************************************************************/\n\nfunc main() {\n    _GrapInvationCode()\n}\n\n// _GrapInvationCode 抓取\nfunc _GrapInvationCode() {\n    sCliboradContent = `\n    start \n  <huowu.ptm.com:invation>ACD78Z</huowu.ptm.com:invation> \n  end \n  人生若如初见,何事秋风悲画扇\n    等闲却道故人心,却道故人心易变\n    忽有故人心上过,回首山河已是秋\n    两处相思同沐雪,此生也算共白头\n  <huowu.ptm.com:invation>一个旧的邀请码</huowu.ptm.com:invation>\n    `\n    reg, err := regexp.Compile(\"<huowu.ptm.com:invation>(.*?)</huowu.ptm.com:invation>\")\n  if err != nil {\n    log.Println(err.Error())\n    return\n  }\n\n  sMatchArr := reg.FindAllString(sCliboradContent, 1) // 1指,匹配到一个就返回.\n  if len(matchArr) == 0 {\n    return // 代表剪贴板中,无该格式的内容\n  }\n  sDstStr := sMatchArr[0]\n  sInvationCode := reg.ReplaceAllString(sDstStr, \"$1\")\n  log.Println(sInvationCode)\n}\n```\n\n\n\n通过提取,会输出下面的内容\n\n\n\n```\n2021/01/25 10:08:44 ACD78Z # ACD78Z 就是该用户的最新邀请码\n```\n\n\n\n## 3.异常情况\n\n\n\n### 01.客户端没有在剪贴板中获得邀请码\n\n\n\n据搭档反馈,他每次只能拿到剪贴板的最新的一条数据.倘若未知用户的环境在注册app前,进行了复制操作.那么,剪贴板中的邀请码就会被清空.\n\n\n\n客户端拿不到邀请码,服务端就无法让新注册用户与邀请人建立联系,直接导致邀请人利益受损.\n\n\n\n关系好的,直接让你在后台修改. 关系不好的,直接终止推广.\n\n\n\n针对此类的情况,采取的补救措施是在注册接口中,同时附带如下信息.\n\n\n\n```yaml\nlanguage: zh_cn # 系统的默认语言环境 string 采用全部小写,需要用toLowerCase()转换.\ncpu: 4 # number \nresolutionWidth: 1920 # number 屏幕分辨率中的宽,此处分辨率,需要web端和移动端对一下,有的可能拿到的是屏幕的宽度或者高度.而不是分辨率.以前有同时跳过这个坑\nresolutionHeight: 1080 # number 屏幕分辨率中的高\ngpu: angle (intel(r) hd graphics 4600 direct3d11 vs_5_0 ps_5_0) # string GPU的型号\nsystem: \"ios\" # 此处有三个选项,[ios,android,unknown]\n```\n\n\n\n通过上面的参数,服务器这面会根据请求的IP,查出一个该IP下的所有下载记录.这些记录里包含着每次下载的邀请码.\n\n\n\n根据每条参数里的信息,做一个分值匹配.取分值最高的作为新注册用户的邀请码.\n\n\n\n### 02.客户端在剪贴板中没拿到邀请码.而多个下载用户处于同一局域网\n\n\n\n处于同一局域网,意味着这些下载IP对于服务器而言是一致的.倘若是不同的邀请码.服务器则以该IP下最新的邀请码,作为新注册的邀请码.\n\n\n\n### 03.客户端没有拿到邀请码.而该IP又没有下载记录.\n\n\n\n对于此种情况,发生的场景一般是.邀请人直接下了个安装包.发在了他的资源群.资源群的未知用户,通过该安装包进行安装.\n\n\n\n此种情况,导致了客户端拿不到邀请码.而服务端又没有未知用户的IP下载记录.\n\n\n\n服务端处理的方式是,对于此类情形,将新注册的用户归纳为自然流入用户.即该新注册用户没有邀请人.","slug":"technology-sense-fission-exception","published":1,"date":"2021-03-16T17:31:06.482Z","updated":"2021-03-16T20:46:12.510Z","_id":"ckmchg4j800107gvl5876gasj","comments":1,"layout":"post","photos":[],"link":"","content":"<p>随着互联网裂变式自媒体的不断崛起,低成本引流成为企业的强烈需求.伴随着微信,FACEBOOK,微博,B站,头条等自媒体平台的崛起.</p>\n<p>裂变式营销逐渐成为推广的一种方式.而其中”社交裂变”成为了其中的重中之重.</p>\n<p>近年来,随着微信生态的发展与成熟,形成了具有中国特色的商业模式和形态.任何一家企业或者个人都可以通过微信的生态圈获得百万级,乃至千万级的用户.</p>\n<p>而裂变营销的核心之一是确保推广人的利益.倘若,推广人的利益受损,又有哪个推广人愿意继续推广呢?</p>\n<p>当然,不排除兴趣.但是,兴趣这个词太过于”玄妙”.非正常人所能触及,更多的趋向于利益.</p>\n<p>那么,要如何确保推广人的利益,是裂变的核心话题.</p>\n<h2 id=\"1-问题场景\"><a href=\"#1-问题场景\" class=\"headerlink\" title=\"1.问题场景\"></a>1.问题场景</h2><p>用户在注册时,不愿意输入附加信息.而此类附加信息是缔造邀请人与被邀请人联系的核心,比如邀请码.</p>\n<p>用户不愿意输入附加信息,程序就不要让用户输入附加信息.将附加信息,在注册时,以静默的方式放在注册接口里,上传给服务器</p>\n<h2 id=\"2-裂变流程\"><a href=\"#2-裂变流程\" class=\"headerlink\" title=\"2.裂变流程\"></a>2.裂变流程</h2><h3 id=\"01-已知用户复制推广链接发给未知用户\"><a href=\"#01-已知用户复制推广链接发给未知用户\" class=\"headerlink\" title=\"01.已知用户复制推广链接发给未知用户\"></a>01.已知用户复制推广链接发给未知用户</h3><p>推广链接举例:<a href=\"https://dl.ptm.com/invation.html?code=AAC98Z&amp;channel=vivo\">https://dl.ptm.com/invation.html?code=AAC98Z&amp;channel=vivo</a></p>\n<p>其中code便是种子用户的邀请码.channel便是推广渠道.</p>\n<h3 id=\"02-未知用户点击链接进入浏览器下载页面\"><a href=\"#02-未知用户点击链接进入浏览器下载页面\" class=\"headerlink\" title=\"02.未知用户点击链接进入浏览器下载页面\"></a>02.未知用户点击链接进入浏览器下载页面</h3><p>在用户进入下载页面之后,该页面首先要做的是将当前系统的环境和邀请码以及渠道信息,通过接口上传至服务器.</p>\n<p>目前,Javascript 可以拿到下面的信息</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">AppVersion:</span> <span class=\"number\">5.0</span> <span class=\"string\">(windows</span> <span class=\"string\">nt</span> <span class=\"number\">10.0</span><span class=\"string\">;</span> <span class=\"string\">win64;</span> <span class=\"string\">x64)</span> <span class=\"string\">applewebkit/537.36</span> <span class=\"string\">(khtml,</span> <span class=\"string\">like</span> <span class=\"string\">gecko)</span> <span class=\"string\">chrome/89.0.4356.6</span> <span class=\"string\">safari/537.36</span></span><br><span class=\"line\"><span class=\"attr\">Language:</span> <span class=\"string\">zh-cn</span></span><br><span class=\"line\"><span class=\"attr\">AppCodeName:</span> <span class=\"string\">mozilla</span></span><br><span class=\"line\"><span class=\"attr\">AppName:</span> <span class=\"string\">netscape</span></span><br><span class=\"line\"><span class=\"attr\">Memory:</span> <span class=\"string\">8G</span></span><br><span class=\"line\"><span class=\"attr\">CPU:</span> <span class=\"number\">4</span><span class=\"string\">核</span></span><br><span class=\"line\"><span class=\"string\">屏幕分辨率:</span> <span class=\"number\">1920 </span><span class=\"string\">X</span> <span class=\"number\">1080</span></span><br><span class=\"line\"><span class=\"attr\">GPU:</span> <span class=\"string\">angle</span> <span class=\"string\">(intel(r)</span> <span class=\"string\">hd</span> <span class=\"string\">graphics</span> <span class=\"number\">4600 </span><span class=\"string\">direct3d11</span> <span class=\"string\">vs_5_0</span> <span class=\"string\">ps_5_0)</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>相关代码如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;#user_agent&quot;</span>).text(<span class=\"built_in\">window</span>.navigator.appVersion.toLowerCase());</span><br><span class=\"line\">$(<span class=\"string\">&quot;#language&quot;</span>).text(<span class=\"built_in\">window</span>.navigator.language.toLowerCase());</span><br><span class=\"line\">$(<span class=\"string\">&quot;#app_code_name&quot;</span>).text(<span class=\"built_in\">window</span>.navigator.appCodeName.toLowerCase());</span><br><span class=\"line\">$(<span class=\"string\">&quot;#app_name&quot;</span>).text(<span class=\"built_in\">window</span>.navigator.appName.toLowerCase());</span><br><span class=\"line\">$(<span class=\"string\">&quot;#memory&quot;</span>).text(<span class=\"built_in\">window</span>.navigator.deviceMemory+<span class=\"string\">&quot;G&quot;</span>);</span><br><span class=\"line\">$(<span class=\"string\">&quot;#cpu&quot;</span>).text(<span class=\"built_in\">window</span>.navigator.hardwareConcurrency+<span class=\"string\">&quot;核&quot;</span>);</span><br><span class=\"line\">$(<span class=\"string\">&quot;#width_height&quot;</span>).text(<span class=\"built_in\">window</span>.screen.width*<span class=\"built_in\">window</span>.devicePixelRatio+<span class=\"string\">&quot; X &quot;</span>+<span class=\"built_in\">window</span>.screen.height*<span class=\"built_in\">window</span>.devicePixelRatio);</span><br><span class=\"line\"><span class=\"keyword\">var</span> canvas = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;canvas&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> gl = canvas.getContext(<span class=\"string\">&#x27;experimental-webgl&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> debugInfo = gl.getExtension(<span class=\"string\">&#x27;WEBGL_debug_renderer_info&#x27;</span>);</span><br><span class=\"line\">$(<span class=\"string\">&quot;#gpu&quot;</span>).text(gl.getParameter(debugInfo.UNMASKED_RENDERER_WEBGL).toLowerCase());</span><br></pre></td></tr></table></figure>\n\n\n\n<p>客户端需要上传的参数如下.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">channel:</span> <span class=\"string\">渠道</span> <span class=\"comment\"># string 渠道未定,正规的就是那几大运营尝试.  https://dl.ptm.com/invation.html?code=AAC98Z&amp;channel=vivo,可从连接中获取chnnael,code和channel不一定都有.</span></span><br><span class=\"line\"><span class=\"attr\">invationCode:</span> <span class=\"string\">AAC98Z</span> <span class=\"comment\">#  string   https://dl.ptm.com/invation.html?code=AAC98Z&amp;channel=vivo ,可从连接参数中获取</span></span><br><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">zh_cn</span> <span class=\"comment\"># string 采用全部小写,需要用toLowerCase()转换.</span></span><br><span class=\"line\"><span class=\"attr\">cpu:</span> <span class=\"number\">4</span> <span class=\"comment\"># number </span></span><br><span class=\"line\"><span class=\"attr\">resolutionWidth:</span> <span class=\"number\">1920</span> <span class=\"comment\"># number 屏幕分辨率中的宽</span></span><br><span class=\"line\"><span class=\"attr\">resolutionHeight:</span> <span class=\"number\">1080</span> <span class=\"comment\"># number 屏幕分辨率中的高</span></span><br><span class=\"line\"><span class=\"attr\">gpu:</span> <span class=\"string\">angle</span> <span class=\"string\">(intel(r)</span> <span class=\"string\">hd</span> <span class=\"string\">graphics</span> <span class=\"number\">4600 </span><span class=\"string\">direct3d11</span> <span class=\"string\">vs_5_0</span> <span class=\"string\">ps_5_0)</span> <span class=\"comment\"># string GPU的型号</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>调用该接口后,服务端会在后台数据库中生成一条记录,该记录将邀请码与IP以及系统环境信息绑定在一起.</p>\n<p>并且服务端会返回,当前的系统信息[IOS,ANDROID,UNKNOWN],以及相关系统的下载连接</p>\n<p>web端可通过动态创建a标签,模拟人为点击,进行下载.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">copy</span>(<span class=\"params\">text</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> textarea = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;textarea&#x27;</span>);</span><br><span class=\"line\">        textarea.id = <span class=\"string\">&quot;copyTextarea&quot;</span>;</span><br><span class=\"line\">        textarea.style.width = <span class=\"number\">0</span>;</span><br><span class=\"line\">        textarea.style.height = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.body.appendChild(textarea);</span><br><span class=\"line\">        textarea = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;copyTextarea&#x27;</span>);</span><br><span class=\"line\">        textarea.innerHTML = text;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>( <span class=\"string\">&quot;android&quot;</span> == <span class=\"string\">&quot;ios&quot;</span>)&#123; <span class=\"comment\">//  此处需要获取本机,判断是不是ios</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> range = <span class=\"built_in\">document</span>.createRange();</span><br><span class=\"line\">            range.selectNode(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;copyTextarea&#x27;</span>));</span><br><span class=\"line\">            <span class=\"keyword\">const</span> selection = <span class=\"built_in\">window</span>.getSelection();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (selection.rangeCount &gt; <span class=\"number\">0</span>) selection.removeAllRanges();</span><br><span class=\"line\">            selection.addRange(range);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            textarea.select(); <span class=\"comment\">// 选中文本(select()方法对IOS部分版本无效)</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.execCommand(<span class=\"string\">&#x27;copy&#x27;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.body.removeChild(textarea);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> $(<span class=\"string\">&quot;#dl_btn&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        copy(<span class=\"string\">&quot;&lt;huowu.ptm.com:invation&gt;AAC98Z&lt;/huowu.ptm.com:invation&gt;&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">var</span> eleA = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\">        eleA.setAttribute(<span class=\"string\">&quot;href&quot;</span>,<span class=\"string\">&quot;接口中返回的一个下载地址&quot;</span>);</span><br><span class=\"line\">        elseA.click(); <span class=\"comment\">// 模拟人为点击,避免打开新的页面去下载 </span></span><br><span class=\"line\"> &#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"03-未知用户进入注册流程\"><a href=\"#03-未知用户进入注册流程\" class=\"headerlink\" title=\"03.未知用户进入注册流程\"></a>03.未知用户进入注册流程</h3><p>为了方便提取,此处使用正则表达式的方式提取邀请码.正则表达式如下.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;huowu.ptm.com:invation&gt;([\\s\\S]*?)&lt;&#x2F;huowu.ptm.com:invation&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>下面是GO代码举例,达到一个抛砖引玉的过程.</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**********************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">假设剪贴板中的内容是这样:</span></span><br><span class=\"line\"><span class=\"comment\">  start </span></span><br><span class=\"line\"><span class=\"comment\">  &lt;huowu.ptm.com:invation&gt;ACD78Z&lt;/huowu.ptm.com:invation&gt; </span></span><br><span class=\"line\"><span class=\"comment\">  end </span></span><br><span class=\"line\"><span class=\"comment\">  人生若如初见,何事秋风悲画扇</span></span><br><span class=\"line\"><span class=\"comment\">    等闲却道故人心,却道故人心易变</span></span><br><span class=\"line\"><span class=\"comment\">    忽有故人心上过,回首山河已是秋</span></span><br><span class=\"line\"><span class=\"comment\">    两处相思同沐雪,此生也算共白头</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;huowu.ptm.com:invation&gt;一个旧的邀请码&lt;/huowu.ptm.com:invation&gt;</span></span><br><span class=\"line\"><span class=\"comment\">***********************************************************************/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    _GrapInvationCode()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// _GrapInvationCode 抓取</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> _<span class=\"title\">GrapInvationCode</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    sCliboradContent = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    start </span></span><br><span class=\"line\"><span class=\"string\">  &lt;huowu.ptm.com:invation&gt;ACD78Z&lt;/huowu.ptm.com:invation&gt; </span></span><br><span class=\"line\"><span class=\"string\">  end </span></span><br><span class=\"line\"><span class=\"string\">  人生若如初见,何事秋风悲画扇</span></span><br><span class=\"line\"><span class=\"string\">    等闲却道故人心,却道故人心易变</span></span><br><span class=\"line\"><span class=\"string\">    忽有故人心上过,回首山河已是秋</span></span><br><span class=\"line\"><span class=\"string\">    两处相思同沐雪,此生也算共白头</span></span><br><span class=\"line\"><span class=\"string\">  &lt;huowu.ptm.com:invation&gt;一个旧的邀请码&lt;/huowu.ptm.com:invation&gt;</span></span><br><span class=\"line\"><span class=\"string\">    `</span></span><br><span class=\"line\">    reg, err := regexp.Compile(<span class=\"string\">&quot;&lt;huowu.ptm.com:invation&gt;(.*?)&lt;/huowu.ptm.com:invation&gt;&quot;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    log.Println(err.Error())</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  sMatchArr := reg.FindAllString(sCliboradContent, <span class=\"number\">1</span>) <span class=\"comment\">// 1指,匹配到一个就返回.</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(matchArr) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"comment\">// 代表剪贴板中,无该格式的内容</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  sDstStr := sMatchArr[<span class=\"number\">0</span>]</span><br><span class=\"line\">  sInvationCode := reg.ReplaceAllString(sDstStr, <span class=\"string\">&quot;$1&quot;</span>)</span><br><span class=\"line\">  log.Println(sInvationCode)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>通过提取,会输出下面的内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2021&#x2F;01&#x2F;25 10:08:44 ACD78Z # ACD78Z 就是该用户的最新邀请码</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"3-异常情况\"><a href=\"#3-异常情况\" class=\"headerlink\" title=\"3.异常情况\"></a>3.异常情况</h2><h3 id=\"01-客户端没有在剪贴板中获得邀请码\"><a href=\"#01-客户端没有在剪贴板中获得邀请码\" class=\"headerlink\" title=\"01.客户端没有在剪贴板中获得邀请码\"></a>01.客户端没有在剪贴板中获得邀请码</h3><p>据搭档反馈,他每次只能拿到剪贴板的最新的一条数据.倘若未知用户的环境在注册app前,进行了复制操作.那么,剪贴板中的邀请码就会被清空.</p>\n<p>客户端拿不到邀请码,服务端就无法让新注册用户与邀请人建立联系,直接导致邀请人利益受损.</p>\n<p>关系好的,直接让你在后台修改. 关系不好的,直接终止推广.</p>\n<p>针对此类的情况,采取的补救措施是在注册接口中,同时附带如下信息.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">zh_cn</span> <span class=\"comment\"># 系统的默认语言环境 string 采用全部小写,需要用toLowerCase()转换.</span></span><br><span class=\"line\"><span class=\"attr\">cpu:</span> <span class=\"number\">4</span> <span class=\"comment\"># number </span></span><br><span class=\"line\"><span class=\"attr\">resolutionWidth:</span> <span class=\"number\">1920</span> <span class=\"comment\"># number 屏幕分辨率中的宽,此处分辨率,需要web端和移动端对一下,有的可能拿到的是屏幕的宽度或者高度.而不是分辨率.以前有同时跳过这个坑</span></span><br><span class=\"line\"><span class=\"attr\">resolutionHeight:</span> <span class=\"number\">1080</span> <span class=\"comment\"># number 屏幕分辨率中的高</span></span><br><span class=\"line\"><span class=\"attr\">gpu:</span> <span class=\"string\">angle</span> <span class=\"string\">(intel(r)</span> <span class=\"string\">hd</span> <span class=\"string\">graphics</span> <span class=\"number\">4600 </span><span class=\"string\">direct3d11</span> <span class=\"string\">vs_5_0</span> <span class=\"string\">ps_5_0)</span> <span class=\"comment\"># string GPU的型号</span></span><br><span class=\"line\"><span class=\"attr\">system:</span> <span class=\"string\">&quot;ios&quot;</span> <span class=\"comment\"># 此处有三个选项,[ios,android,unknown]</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>通过上面的参数,服务器这面会根据请求的IP,查出一个该IP下的所有下载记录.这些记录里包含着每次下载的邀请码.</p>\n<p>根据每条参数里的信息,做一个分值匹配.取分值最高的作为新注册用户的邀请码.</p>\n<h3 id=\"02-客户端在剪贴板中没拿到邀请码-而多个下载用户处于同一局域网\"><a href=\"#02-客户端在剪贴板中没拿到邀请码-而多个下载用户处于同一局域网\" class=\"headerlink\" title=\"02.客户端在剪贴板中没拿到邀请码.而多个下载用户处于同一局域网\"></a>02.客户端在剪贴板中没拿到邀请码.而多个下载用户处于同一局域网</h3><p>处于同一局域网,意味着这些下载IP对于服务器而言是一致的.倘若是不同的邀请码.服务器则以该IP下最新的邀请码,作为新注册的邀请码.</p>\n<h3 id=\"03-客户端没有拿到邀请码-而该IP又没有下载记录\"><a href=\"#03-客户端没有拿到邀请码-而该IP又没有下载记录\" class=\"headerlink\" title=\"03.客户端没有拿到邀请码.而该IP又没有下载记录.\"></a>03.客户端没有拿到邀请码.而该IP又没有下载记录.</h3><p>对于此种情况,发生的场景一般是.邀请人直接下了个安装包.发在了他的资源群.资源群的未知用户,通过该安装包进行安装.</p>\n<p>此种情况,导致了客户端拿不到邀请码.而服务端又没有未知用户的IP下载记录.</p>\n<p>服务端处理的方式是,对于此类情形,将新注册的用户归纳为自然流入用户.即该新注册用户没有邀请人.</p>\n","site":{"data":{"contact":[{"title":"github","icon":"icon-github","link":"https://github.com/yuansudong"},{"title":"email","icon":"icon-email","link":"mailto:1145919989@qq.com"},{"title":"qq","icon":"icon-qq","link":"/atom.xml"}],"favicons":["<link rel=\"shortcut icon\" href=\"/img//favicon.ico\">","<link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/img//favicon-16x16.png\">","<link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/img//favicon-32x32.png\">","<link rel=\"icon\" type=\"image/png\" sizes=\"48x48\" href=\"/img//favicon-48x48.png\">","<link rel=\"manifest\" href=\"/img//manifest.json\">","<meta name=\"mobile-web-app-capable\" content=\"yes\">","<meta name=\"theme-color\" content=\"#fff\">","<meta name=\"application-name\">","<link rel=\"apple-touch-icon\" sizes=\"57x57\" href=\"/img//apple-touch-icon-57x57.png\">","<link rel=\"apple-touch-icon\" sizes=\"60x60\" href=\"/img//apple-touch-icon-60x60.png\">","<link rel=\"apple-touch-icon\" sizes=\"72x72\" href=\"/img//apple-touch-icon-72x72.png\">","<link rel=\"apple-touch-icon\" sizes=\"76x76\" href=\"/img//apple-touch-icon-76x76.png\">","<link rel=\"apple-touch-icon\" sizes=\"114x114\" href=\"/img//apple-touch-icon-114x114.png\">","<link rel=\"apple-touch-icon\" sizes=\"120x120\" href=\"/img//apple-touch-icon-120x120.png\">","<link rel=\"apple-touch-icon\" sizes=\"144x144\" href=\"/img//apple-touch-icon-144x144.png\">","<link rel=\"apple-touch-icon\" sizes=\"152x152\" href=\"/img//apple-touch-icon-152x152.png\">","<link rel=\"apple-touch-icon\" sizes=\"167x167\" href=\"/img//apple-touch-icon-167x167.png\">","<link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/img//apple-touch-icon-180x180.png\">","<link rel=\"apple-touch-icon\" sizes=\"1024x1024\" href=\"/img//apple-touch-icon-1024x1024.png\">","<meta name=\"apple-mobile-web-app-capable\" content=\"yes\">","<meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black-translucent\">","<meta name=\"apple-mobile-web-app-title\">","<meta name=\"msapplication-TileColor\" content=\"#fff\">","<meta name=\"msapplication-TileImage\" content=\"/img//mstile-144x144.png\">","<meta name=\"msapplication-config\" content=\"/img//browserconfig.xml\">"]}},"excerpt":"","more":"<p>随着互联网裂变式自媒体的不断崛起,低成本引流成为企业的强烈需求.伴随着微信,FACEBOOK,微博,B站,头条等自媒体平台的崛起.</p>\n<p>裂变式营销逐渐成为推广的一种方式.而其中”社交裂变”成为了其中的重中之重.</p>\n<p>近年来,随着微信生态的发展与成熟,形成了具有中国特色的商业模式和形态.任何一家企业或者个人都可以通过微信的生态圈获得百万级,乃至千万级的用户.</p>\n<p>而裂变营销的核心之一是确保推广人的利益.倘若,推广人的利益受损,又有哪个推广人愿意继续推广呢?</p>\n<p>当然,不排除兴趣.但是,兴趣这个词太过于”玄妙”.非正常人所能触及,更多的趋向于利益.</p>\n<p>那么,要如何确保推广人的利益,是裂变的核心话题.</p>\n<h2 id=\"1-问题场景\"><a href=\"#1-问题场景\" class=\"headerlink\" title=\"1.问题场景\"></a>1.问题场景</h2><p>用户在注册时,不愿意输入附加信息.而此类附加信息是缔造邀请人与被邀请人联系的核心,比如邀请码.</p>\n<p>用户不愿意输入附加信息,程序就不要让用户输入附加信息.将附加信息,在注册时,以静默的方式放在注册接口里,上传给服务器</p>\n<h2 id=\"2-裂变流程\"><a href=\"#2-裂变流程\" class=\"headerlink\" title=\"2.裂变流程\"></a>2.裂变流程</h2><h3 id=\"01-已知用户复制推广链接发给未知用户\"><a href=\"#01-已知用户复制推广链接发给未知用户\" class=\"headerlink\" title=\"01.已知用户复制推广链接发给未知用户\"></a>01.已知用户复制推广链接发给未知用户</h3><p>推广链接举例:<a href=\"https://dl.ptm.com/invation.html?code=AAC98Z&amp;channel=vivo\">https://dl.ptm.com/invation.html?code=AAC98Z&amp;channel=vivo</a></p>\n<p>其中code便是种子用户的邀请码.channel便是推广渠道.</p>\n<h3 id=\"02-未知用户点击链接进入浏览器下载页面\"><a href=\"#02-未知用户点击链接进入浏览器下载页面\" class=\"headerlink\" title=\"02.未知用户点击链接进入浏览器下载页面\"></a>02.未知用户点击链接进入浏览器下载页面</h3><p>在用户进入下载页面之后,该页面首先要做的是将当前系统的环境和邀请码以及渠道信息,通过接口上传至服务器.</p>\n<p>目前,Javascript 可以拿到下面的信息</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">AppVersion:</span> <span class=\"number\">5.0</span> <span class=\"string\">(windows</span> <span class=\"string\">nt</span> <span class=\"number\">10.0</span><span class=\"string\">;</span> <span class=\"string\">win64;</span> <span class=\"string\">x64)</span> <span class=\"string\">applewebkit/537.36</span> <span class=\"string\">(khtml,</span> <span class=\"string\">like</span> <span class=\"string\">gecko)</span> <span class=\"string\">chrome/89.0.4356.6</span> <span class=\"string\">safari/537.36</span></span><br><span class=\"line\"><span class=\"attr\">Language:</span> <span class=\"string\">zh-cn</span></span><br><span class=\"line\"><span class=\"attr\">AppCodeName:</span> <span class=\"string\">mozilla</span></span><br><span class=\"line\"><span class=\"attr\">AppName:</span> <span class=\"string\">netscape</span></span><br><span class=\"line\"><span class=\"attr\">Memory:</span> <span class=\"string\">8G</span></span><br><span class=\"line\"><span class=\"attr\">CPU:</span> <span class=\"number\">4</span><span class=\"string\">核</span></span><br><span class=\"line\"><span class=\"string\">屏幕分辨率:</span> <span class=\"number\">1920 </span><span class=\"string\">X</span> <span class=\"number\">1080</span></span><br><span class=\"line\"><span class=\"attr\">GPU:</span> <span class=\"string\">angle</span> <span class=\"string\">(intel(r)</span> <span class=\"string\">hd</span> <span class=\"string\">graphics</span> <span class=\"number\">4600 </span><span class=\"string\">direct3d11</span> <span class=\"string\">vs_5_0</span> <span class=\"string\">ps_5_0)</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>相关代码如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;#user_agent&quot;</span>).text(<span class=\"built_in\">window</span>.navigator.appVersion.toLowerCase());</span><br><span class=\"line\">$(<span class=\"string\">&quot;#language&quot;</span>).text(<span class=\"built_in\">window</span>.navigator.language.toLowerCase());</span><br><span class=\"line\">$(<span class=\"string\">&quot;#app_code_name&quot;</span>).text(<span class=\"built_in\">window</span>.navigator.appCodeName.toLowerCase());</span><br><span class=\"line\">$(<span class=\"string\">&quot;#app_name&quot;</span>).text(<span class=\"built_in\">window</span>.navigator.appName.toLowerCase());</span><br><span class=\"line\">$(<span class=\"string\">&quot;#memory&quot;</span>).text(<span class=\"built_in\">window</span>.navigator.deviceMemory+<span class=\"string\">&quot;G&quot;</span>);</span><br><span class=\"line\">$(<span class=\"string\">&quot;#cpu&quot;</span>).text(<span class=\"built_in\">window</span>.navigator.hardwareConcurrency+<span class=\"string\">&quot;核&quot;</span>);</span><br><span class=\"line\">$(<span class=\"string\">&quot;#width_height&quot;</span>).text(<span class=\"built_in\">window</span>.screen.width*<span class=\"built_in\">window</span>.devicePixelRatio+<span class=\"string\">&quot; X &quot;</span>+<span class=\"built_in\">window</span>.screen.height*<span class=\"built_in\">window</span>.devicePixelRatio);</span><br><span class=\"line\"><span class=\"keyword\">var</span> canvas = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;canvas&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> gl = canvas.getContext(<span class=\"string\">&#x27;experimental-webgl&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> debugInfo = gl.getExtension(<span class=\"string\">&#x27;WEBGL_debug_renderer_info&#x27;</span>);</span><br><span class=\"line\">$(<span class=\"string\">&quot;#gpu&quot;</span>).text(gl.getParameter(debugInfo.UNMASKED_RENDERER_WEBGL).toLowerCase());</span><br></pre></td></tr></table></figure>\n\n\n\n<p>客户端需要上传的参数如下.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">channel:</span> <span class=\"string\">渠道</span> <span class=\"comment\"># string 渠道未定,正规的就是那几大运营尝试.  https://dl.ptm.com/invation.html?code=AAC98Z&amp;channel=vivo,可从连接中获取chnnael,code和channel不一定都有.</span></span><br><span class=\"line\"><span class=\"attr\">invationCode:</span> <span class=\"string\">AAC98Z</span> <span class=\"comment\">#  string   https://dl.ptm.com/invation.html?code=AAC98Z&amp;channel=vivo ,可从连接参数中获取</span></span><br><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">zh_cn</span> <span class=\"comment\"># string 采用全部小写,需要用toLowerCase()转换.</span></span><br><span class=\"line\"><span class=\"attr\">cpu:</span> <span class=\"number\">4</span> <span class=\"comment\"># number </span></span><br><span class=\"line\"><span class=\"attr\">resolutionWidth:</span> <span class=\"number\">1920</span> <span class=\"comment\"># number 屏幕分辨率中的宽</span></span><br><span class=\"line\"><span class=\"attr\">resolutionHeight:</span> <span class=\"number\">1080</span> <span class=\"comment\"># number 屏幕分辨率中的高</span></span><br><span class=\"line\"><span class=\"attr\">gpu:</span> <span class=\"string\">angle</span> <span class=\"string\">(intel(r)</span> <span class=\"string\">hd</span> <span class=\"string\">graphics</span> <span class=\"number\">4600 </span><span class=\"string\">direct3d11</span> <span class=\"string\">vs_5_0</span> <span class=\"string\">ps_5_0)</span> <span class=\"comment\"># string GPU的型号</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>调用该接口后,服务端会在后台数据库中生成一条记录,该记录将邀请码与IP以及系统环境信息绑定在一起.</p>\n<p>并且服务端会返回,当前的系统信息[IOS,ANDROID,UNKNOWN],以及相关系统的下载连接</p>\n<p>web端可通过动态创建a标签,模拟人为点击,进行下载.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">copy</span>(<span class=\"params\">text</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> textarea = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;textarea&#x27;</span>);</span><br><span class=\"line\">        textarea.id = <span class=\"string\">&quot;copyTextarea&quot;</span>;</span><br><span class=\"line\">        textarea.style.width = <span class=\"number\">0</span>;</span><br><span class=\"line\">        textarea.style.height = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.body.appendChild(textarea);</span><br><span class=\"line\">        textarea = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;copyTextarea&#x27;</span>);</span><br><span class=\"line\">        textarea.innerHTML = text;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>( <span class=\"string\">&quot;android&quot;</span> == <span class=\"string\">&quot;ios&quot;</span>)&#123; <span class=\"comment\">//  此处需要获取本机,判断是不是ios</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> range = <span class=\"built_in\">document</span>.createRange();</span><br><span class=\"line\">            range.selectNode(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;copyTextarea&#x27;</span>));</span><br><span class=\"line\">            <span class=\"keyword\">const</span> selection = <span class=\"built_in\">window</span>.getSelection();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (selection.rangeCount &gt; <span class=\"number\">0</span>) selection.removeAllRanges();</span><br><span class=\"line\">            selection.addRange(range);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            textarea.select(); <span class=\"comment\">// 选中文本(select()方法对IOS部分版本无效)</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.execCommand(<span class=\"string\">&#x27;copy&#x27;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.body.removeChild(textarea);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> $(<span class=\"string\">&quot;#dl_btn&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        copy(<span class=\"string\">&quot;&lt;huowu.ptm.com:invation&gt;AAC98Z&lt;/huowu.ptm.com:invation&gt;&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">var</span> eleA = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\">        eleA.setAttribute(<span class=\"string\">&quot;href&quot;</span>,<span class=\"string\">&quot;接口中返回的一个下载地址&quot;</span>);</span><br><span class=\"line\">        elseA.click(); <span class=\"comment\">// 模拟人为点击,避免打开新的页面去下载 </span></span><br><span class=\"line\"> &#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"03-未知用户进入注册流程\"><a href=\"#03-未知用户进入注册流程\" class=\"headerlink\" title=\"03.未知用户进入注册流程\"></a>03.未知用户进入注册流程</h3><p>为了方便提取,此处使用正则表达式的方式提取邀请码.正则表达式如下.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;huowu.ptm.com:invation&gt;([\\s\\S]*?)&lt;&#x2F;huowu.ptm.com:invation&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>下面是GO代码举例,达到一个抛砖引玉的过程.</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**********************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">假设剪贴板中的内容是这样:</span></span><br><span class=\"line\"><span class=\"comment\">  start </span></span><br><span class=\"line\"><span class=\"comment\">  &lt;huowu.ptm.com:invation&gt;ACD78Z&lt;/huowu.ptm.com:invation&gt; </span></span><br><span class=\"line\"><span class=\"comment\">  end </span></span><br><span class=\"line\"><span class=\"comment\">  人生若如初见,何事秋风悲画扇</span></span><br><span class=\"line\"><span class=\"comment\">    等闲却道故人心,却道故人心易变</span></span><br><span class=\"line\"><span class=\"comment\">    忽有故人心上过,回首山河已是秋</span></span><br><span class=\"line\"><span class=\"comment\">    两处相思同沐雪,此生也算共白头</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;huowu.ptm.com:invation&gt;一个旧的邀请码&lt;/huowu.ptm.com:invation&gt;</span></span><br><span class=\"line\"><span class=\"comment\">***********************************************************************/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    _GrapInvationCode()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// _GrapInvationCode 抓取</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> _<span class=\"title\">GrapInvationCode</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    sCliboradContent = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    start </span></span><br><span class=\"line\"><span class=\"string\">  &lt;huowu.ptm.com:invation&gt;ACD78Z&lt;/huowu.ptm.com:invation&gt; </span></span><br><span class=\"line\"><span class=\"string\">  end </span></span><br><span class=\"line\"><span class=\"string\">  人生若如初见,何事秋风悲画扇</span></span><br><span class=\"line\"><span class=\"string\">    等闲却道故人心,却道故人心易变</span></span><br><span class=\"line\"><span class=\"string\">    忽有故人心上过,回首山河已是秋</span></span><br><span class=\"line\"><span class=\"string\">    两处相思同沐雪,此生也算共白头</span></span><br><span class=\"line\"><span class=\"string\">  &lt;huowu.ptm.com:invation&gt;一个旧的邀请码&lt;/huowu.ptm.com:invation&gt;</span></span><br><span class=\"line\"><span class=\"string\">    `</span></span><br><span class=\"line\">    reg, err := regexp.Compile(<span class=\"string\">&quot;&lt;huowu.ptm.com:invation&gt;(.*?)&lt;/huowu.ptm.com:invation&gt;&quot;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    log.Println(err.Error())</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  sMatchArr := reg.FindAllString(sCliboradContent, <span class=\"number\">1</span>) <span class=\"comment\">// 1指,匹配到一个就返回.</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(matchArr) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"comment\">// 代表剪贴板中,无该格式的内容</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  sDstStr := sMatchArr[<span class=\"number\">0</span>]</span><br><span class=\"line\">  sInvationCode := reg.ReplaceAllString(sDstStr, <span class=\"string\">&quot;$1&quot;</span>)</span><br><span class=\"line\">  log.Println(sInvationCode)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>通过提取,会输出下面的内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2021&#x2F;01&#x2F;25 10:08:44 ACD78Z # ACD78Z 就是该用户的最新邀请码</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"3-异常情况\"><a href=\"#3-异常情况\" class=\"headerlink\" title=\"3.异常情况\"></a>3.异常情况</h2><h3 id=\"01-客户端没有在剪贴板中获得邀请码\"><a href=\"#01-客户端没有在剪贴板中获得邀请码\" class=\"headerlink\" title=\"01.客户端没有在剪贴板中获得邀请码\"></a>01.客户端没有在剪贴板中获得邀请码</h3><p>据搭档反馈,他每次只能拿到剪贴板的最新的一条数据.倘若未知用户的环境在注册app前,进行了复制操作.那么,剪贴板中的邀请码就会被清空.</p>\n<p>客户端拿不到邀请码,服务端就无法让新注册用户与邀请人建立联系,直接导致邀请人利益受损.</p>\n<p>关系好的,直接让你在后台修改. 关系不好的,直接终止推广.</p>\n<p>针对此类的情况,采取的补救措施是在注册接口中,同时附带如下信息.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">zh_cn</span> <span class=\"comment\"># 系统的默认语言环境 string 采用全部小写,需要用toLowerCase()转换.</span></span><br><span class=\"line\"><span class=\"attr\">cpu:</span> <span class=\"number\">4</span> <span class=\"comment\"># number </span></span><br><span class=\"line\"><span class=\"attr\">resolutionWidth:</span> <span class=\"number\">1920</span> <span class=\"comment\"># number 屏幕分辨率中的宽,此处分辨率,需要web端和移动端对一下,有的可能拿到的是屏幕的宽度或者高度.而不是分辨率.以前有同时跳过这个坑</span></span><br><span class=\"line\"><span class=\"attr\">resolutionHeight:</span> <span class=\"number\">1080</span> <span class=\"comment\"># number 屏幕分辨率中的高</span></span><br><span class=\"line\"><span class=\"attr\">gpu:</span> <span class=\"string\">angle</span> <span class=\"string\">(intel(r)</span> <span class=\"string\">hd</span> <span class=\"string\">graphics</span> <span class=\"number\">4600 </span><span class=\"string\">direct3d11</span> <span class=\"string\">vs_5_0</span> <span class=\"string\">ps_5_0)</span> <span class=\"comment\"># string GPU的型号</span></span><br><span class=\"line\"><span class=\"attr\">system:</span> <span class=\"string\">&quot;ios&quot;</span> <span class=\"comment\"># 此处有三个选项,[ios,android,unknown]</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>通过上面的参数,服务器这面会根据请求的IP,查出一个该IP下的所有下载记录.这些记录里包含着每次下载的邀请码.</p>\n<p>根据每条参数里的信息,做一个分值匹配.取分值最高的作为新注册用户的邀请码.</p>\n<h3 id=\"02-客户端在剪贴板中没拿到邀请码-而多个下载用户处于同一局域网\"><a href=\"#02-客户端在剪贴板中没拿到邀请码-而多个下载用户处于同一局域网\" class=\"headerlink\" title=\"02.客户端在剪贴板中没拿到邀请码.而多个下载用户处于同一局域网\"></a>02.客户端在剪贴板中没拿到邀请码.而多个下载用户处于同一局域网</h3><p>处于同一局域网,意味着这些下载IP对于服务器而言是一致的.倘若是不同的邀请码.服务器则以该IP下最新的邀请码,作为新注册的邀请码.</p>\n<h3 id=\"03-客户端没有拿到邀请码-而该IP又没有下载记录\"><a href=\"#03-客户端没有拿到邀请码-而该IP又没有下载记录\" class=\"headerlink\" title=\"03.客户端没有拿到邀请码.而该IP又没有下载记录.\"></a>03.客户端没有拿到邀请码.而该IP又没有下载记录.</h3><p>对于此种情况,发生的场景一般是.邀请人直接下了个安装包.发在了他的资源群.资源群的未知用户,通过该安装包进行安装.</p>\n<p>此种情况,导致了客户端拿不到邀请码.而服务端又没有未知用户的IP下载记录.</p>\n<p>服务端处理的方式是,对于此类情形,将新注册的用户归纳为自然流入用户.即该新注册用户没有邀请人.</p>\n"},{"title":"技术场景之解决hash碰撞","cover":"/img/technology-sense/hash_crash_title.png","subtitle":"技术场景之解决hash碰撞","author":{"nick":"袁苏东","link":"https://github.com/yuansudong"},"typora-root-url":"images","_content":"\n公司基于MONGODB+NFS建立了一套分布式文件存储系统,通过磁动态挂载磁盘的方式,达到动态扩容的目的.\n\n\n\n该分布式文件存储系统通过外接CDN(腾讯,阿里,七牛云等)进行流量分发.其储存的主要类型有APK,EXE,IPA,EXCLE,PDF,各种类型的图片.\n\n\n\n文件的上传通过HTTP上传,TOKEN鉴权的方式上传到服务器,再经过NFS网络共享到各个服务器结点上.\n\n\n\n其中MONGODB的主要主作用是动态扩容+存储文件的HASH值.\n\n\n\n通过计算文件的HASH值,上传服务结点可以通过HASH值确定该文件是否在NFS分布式存储系统中存在.\n\n\n\n倘若存在,则直接返回URI.倘若不存在,则进行文件保存操作.\n\n\n\n第一个版本,对于文件的HASH值,是通过MD5的方式计算出来的.以md5为唯一键与文件的URI映射上.\n\n\n\n最初,想法是美好的.但是,我遇见了一个狗日的测试,他竟然跑到了国外的网站.下载了一个MD5碰撞的例子.\n\n\n\n该网站如下,拿走,不谢!\n\n\n\n```\nhttp://www.win.tue.nl/hashclash/\n```\n\n\n\n结果是不言而喻的,我被狠狠地打了脸,只能灰头土脑的回来研究下HASH碰撞.\n\n\n\n重新声明: 虽然说测试是狗日的,但是不得不承认别人的有些以及专业.狗日二字纯属戏言.\n\n\n\n## 1.HASH简介\n\n\n\n哈希(HASH)算法,即散列函数。它是一种单向密码体制,即它是一个从明文到密文的不可逆的映射，只有加密过程，没有解密过程.\n\n\n\n同时,哈希函数可以将任意长度的输入经过变化以后得到固定长度的输出.\n\n\n\n哈希函数的这种单向特征和输出数据长度固定的特征使得它可以生成消息或者数据.\n\n\n\n## 2.HASH用途\n\n\n\n### 01.数据检验\n\n\n\n在安全接口开发中,在对请求参数进行处理之前,我们需要对请求体进行MD5或者SHA1验证.\n\n\n\n当服务器计算出的SHA1或者MD5,与客户端计算的值一致时,就代表该请求参数,在传输途中没有被其他中间人修改过.\n\n\n\n### 02.唯一标识\n\n\n\n比如,有上千万个文件, 给你一个文件, 要你在这上千万个文件中查找是否存在.\n\n\n\n一个很笨的办法就是把每一文件都拿出来, 然后按照二进制串一一进行对比. 但是这个操作注定是比较费时的.\n\n\n\n而通用的方式是,可以用哈希算法对文件进行计算, 然后比较哈希值是否相同. \n\n\n\n### 03.HASH表\n\n\n\nHASH表对于如今的程序员而言,已经是如雷贯耳了.这里就不再赘述了.\n\n\n\n### 04.负载均衡\n\n\n\n比如,现在又多台服务器, 来了一个请求, 如何确定这个请求应该路由到哪个路由器呢?当然, 必须确保相同的请求经过路由到达同一个服务器. \n\n\n\n一种办法就是保存一张路由关系的表, 比如用户的UID, 但是如果客户端很多, 势必查找的时间会很长. 这时, 可以将客户端的唯一标识信息(如:IP、username等)进行哈希计算, 然后与服务器个数取模, 得到的就是服务器的编号.\n\n\n\n### 05.分布式存储\n\n\n\n当我们有大量数据时, 一般会选择将数据存储到多个服务器, 为了提高读取与写入的速度嘛. 决定将文件存储到哪台服务器, 就可以通过哈希算法取模的操作来得到.\n\n\n\n## 3.HASH函数\n\n\n\n常见的HASH函数有,MD5,SHA1,SHA256,SHA512.通过windows的certutil 可以初步感受.\n\n\n\n### 01.MD5\n\n\n\n```\nC:\\Users\\web>certutil -hashfile ./.gitconfig md5\nMD5 的 ./.gitconfig 哈希:\n38213d497c6bf32cfb3a67cb539cf8a3\nCertUtil: -hashfile 命令成功完成。\n```\n\n\n\n### 02.SHA1\n\n\n\n```\nC:\\Users\\web>certutil -hashfile ./.gitconfig sha1\nSHA1 的 ./.gitconfig 哈希:\n92779fdfbc1200e396839a04e9713f6e12c151b3\nCertUtil: -hashfile 命令成功完成。\n```\n\n\n\n### 03.SHA256\n\n\n\n```\nC:\\Users\\web>certutil -hashfile ./.gitconfig sha256\nSHA256 的 ./.gitconfig 哈希:\n4455f3d3ae7698f759a34f8c17290fa6664bd367157fd16daa5bfa5f54710aea\n```\n\n\n\n### 04.SHA512\n\n\n\n```cmd\nC:\\Users\\web>certutil -hashfile ./.bash_history sha512\nSHA512 的 ./.bash_history 哈希:\n7a1a14ef37e22ae24a1b04b397c8bd60c59567933b0d04776c5bec5486ac2aa39fc56eda5d6e2e5c52bd3484a3fdd51ec29accfe5dde3071f0cacc43eff2b159\nCertUtil: -hashfile 命令成功完成。\n```\n\n\n\n 最终结论\n\n\n\n通过调研,MD5和SHA1都有碰撞的风险,且互联网上已经有相关的举例.而SHA256在理论上有碰撞的可能.但是,目前还未实现.\n\n\n\n最初的想法是,MD5和SHA1作为唯一键.但是再调研以及对比长度后,选择了SHA256","source":"_posts/technology-sense-hash-crash.md","raw":"---\ntitle: 技术场景之解决hash碰撞\ncover:  /img/technology-sense/hash_crash_title.png\nsubtitle: 技术场景之解决hash碰撞\ncategories: \"技术场景\"\ntags: \"技术场景\"\nauthor:\n  nick: 袁苏东\n  link: https://github.com/yuansudong\ntypora-root-url: images\n---\n\n公司基于MONGODB+NFS建立了一套分布式文件存储系统,通过磁动态挂载磁盘的方式,达到动态扩容的目的.\n\n\n\n该分布式文件存储系统通过外接CDN(腾讯,阿里,七牛云等)进行流量分发.其储存的主要类型有APK,EXE,IPA,EXCLE,PDF,各种类型的图片.\n\n\n\n文件的上传通过HTTP上传,TOKEN鉴权的方式上传到服务器,再经过NFS网络共享到各个服务器结点上.\n\n\n\n其中MONGODB的主要主作用是动态扩容+存储文件的HASH值.\n\n\n\n通过计算文件的HASH值,上传服务结点可以通过HASH值确定该文件是否在NFS分布式存储系统中存在.\n\n\n\n倘若存在,则直接返回URI.倘若不存在,则进行文件保存操作.\n\n\n\n第一个版本,对于文件的HASH值,是通过MD5的方式计算出来的.以md5为唯一键与文件的URI映射上.\n\n\n\n最初,想法是美好的.但是,我遇见了一个狗日的测试,他竟然跑到了国外的网站.下载了一个MD5碰撞的例子.\n\n\n\n该网站如下,拿走,不谢!\n\n\n\n```\nhttp://www.win.tue.nl/hashclash/\n```\n\n\n\n结果是不言而喻的,我被狠狠地打了脸,只能灰头土脑的回来研究下HASH碰撞.\n\n\n\n重新声明: 虽然说测试是狗日的,但是不得不承认别人的有些以及专业.狗日二字纯属戏言.\n\n\n\n## 1.HASH简介\n\n\n\n哈希(HASH)算法,即散列函数。它是一种单向密码体制,即它是一个从明文到密文的不可逆的映射，只有加密过程，没有解密过程.\n\n\n\n同时,哈希函数可以将任意长度的输入经过变化以后得到固定长度的输出.\n\n\n\n哈希函数的这种单向特征和输出数据长度固定的特征使得它可以生成消息或者数据.\n\n\n\n## 2.HASH用途\n\n\n\n### 01.数据检验\n\n\n\n在安全接口开发中,在对请求参数进行处理之前,我们需要对请求体进行MD5或者SHA1验证.\n\n\n\n当服务器计算出的SHA1或者MD5,与客户端计算的值一致时,就代表该请求参数,在传输途中没有被其他中间人修改过.\n\n\n\n### 02.唯一标识\n\n\n\n比如,有上千万个文件, 给你一个文件, 要你在这上千万个文件中查找是否存在.\n\n\n\n一个很笨的办法就是把每一文件都拿出来, 然后按照二进制串一一进行对比. 但是这个操作注定是比较费时的.\n\n\n\n而通用的方式是,可以用哈希算法对文件进行计算, 然后比较哈希值是否相同. \n\n\n\n### 03.HASH表\n\n\n\nHASH表对于如今的程序员而言,已经是如雷贯耳了.这里就不再赘述了.\n\n\n\n### 04.负载均衡\n\n\n\n比如,现在又多台服务器, 来了一个请求, 如何确定这个请求应该路由到哪个路由器呢?当然, 必须确保相同的请求经过路由到达同一个服务器. \n\n\n\n一种办法就是保存一张路由关系的表, 比如用户的UID, 但是如果客户端很多, 势必查找的时间会很长. 这时, 可以将客户端的唯一标识信息(如:IP、username等)进行哈希计算, 然后与服务器个数取模, 得到的就是服务器的编号.\n\n\n\n### 05.分布式存储\n\n\n\n当我们有大量数据时, 一般会选择将数据存储到多个服务器, 为了提高读取与写入的速度嘛. 决定将文件存储到哪台服务器, 就可以通过哈希算法取模的操作来得到.\n\n\n\n## 3.HASH函数\n\n\n\n常见的HASH函数有,MD5,SHA1,SHA256,SHA512.通过windows的certutil 可以初步感受.\n\n\n\n### 01.MD5\n\n\n\n```\nC:\\Users\\web>certutil -hashfile ./.gitconfig md5\nMD5 的 ./.gitconfig 哈希:\n38213d497c6bf32cfb3a67cb539cf8a3\nCertUtil: -hashfile 命令成功完成。\n```\n\n\n\n### 02.SHA1\n\n\n\n```\nC:\\Users\\web>certutil -hashfile ./.gitconfig sha1\nSHA1 的 ./.gitconfig 哈希:\n92779fdfbc1200e396839a04e9713f6e12c151b3\nCertUtil: -hashfile 命令成功完成。\n```\n\n\n\n### 03.SHA256\n\n\n\n```\nC:\\Users\\web>certutil -hashfile ./.gitconfig sha256\nSHA256 的 ./.gitconfig 哈希:\n4455f3d3ae7698f759a34f8c17290fa6664bd367157fd16daa5bfa5f54710aea\n```\n\n\n\n### 04.SHA512\n\n\n\n```cmd\nC:\\Users\\web>certutil -hashfile ./.bash_history sha512\nSHA512 的 ./.bash_history 哈希:\n7a1a14ef37e22ae24a1b04b397c8bd60c59567933b0d04776c5bec5486ac2aa39fc56eda5d6e2e5c52bd3484a3fdd51ec29accfe5dde3071f0cacc43eff2b159\nCertUtil: -hashfile 命令成功完成。\n```\n\n\n\n 最终结论\n\n\n\n通过调研,MD5和SHA1都有碰撞的风险,且互联网上已经有相关的举例.而SHA256在理论上有碰撞的可能.但是,目前还未实现.\n\n\n\n最初的想法是,MD5和SHA1作为唯一键.但是再调研以及对比长度后,选择了SHA256","slug":"technology-sense-hash-crash","published":1,"date":"2021-03-16T17:22:02.475Z","updated":"2021-03-16T20:46:18.422Z","_id":"ckmchg4jg00147gvl40z4ebhk","comments":1,"layout":"post","photos":[],"link":"","content":"<p>公司基于MONGODB+NFS建立了一套分布式文件存储系统,通过磁动态挂载磁盘的方式,达到动态扩容的目的.</p>\n<p>该分布式文件存储系统通过外接CDN(腾讯,阿里,七牛云等)进行流量分发.其储存的主要类型有APK,EXE,IPA,EXCLE,PDF,各种类型的图片.</p>\n<p>文件的上传通过HTTP上传,TOKEN鉴权的方式上传到服务器,再经过NFS网络共享到各个服务器结点上.</p>\n<p>其中MONGODB的主要主作用是动态扩容+存储文件的HASH值.</p>\n<p>通过计算文件的HASH值,上传服务结点可以通过HASH值确定该文件是否在NFS分布式存储系统中存在.</p>\n<p>倘若存在,则直接返回URI.倘若不存在,则进行文件保存操作.</p>\n<p>第一个版本,对于文件的HASH值,是通过MD5的方式计算出来的.以md5为唯一键与文件的URI映射上.</p>\n<p>最初,想法是美好的.但是,我遇见了一个狗日的测试,他竟然跑到了国外的网站.下载了一个MD5碰撞的例子.</p>\n<p>该网站如下,拿走,不谢!</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:&#x2F;&#x2F;www.win.tue.nl&#x2F;hashclash&#x2F;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>结果是不言而喻的,我被狠狠地打了脸,只能灰头土脑的回来研究下HASH碰撞.</p>\n<p>重新声明: 虽然说测试是狗日的,但是不得不承认别人的有些以及专业.狗日二字纯属戏言.</p>\n<h2 id=\"1-HASH简介\"><a href=\"#1-HASH简介\" class=\"headerlink\" title=\"1.HASH简介\"></a>1.HASH简介</h2><p>哈希(HASH)算法,即散列函数。它是一种单向密码体制,即它是一个从明文到密文的不可逆的映射，只有加密过程，没有解密过程.</p>\n<p>同时,哈希函数可以将任意长度的输入经过变化以后得到固定长度的输出.</p>\n<p>哈希函数的这种单向特征和输出数据长度固定的特征使得它可以生成消息或者数据.</p>\n<h2 id=\"2-HASH用途\"><a href=\"#2-HASH用途\" class=\"headerlink\" title=\"2.HASH用途\"></a>2.HASH用途</h2><h3 id=\"01-数据检验\"><a href=\"#01-数据检验\" class=\"headerlink\" title=\"01.数据检验\"></a>01.数据检验</h3><p>在安全接口开发中,在对请求参数进行处理之前,我们需要对请求体进行MD5或者SHA1验证.</p>\n<p>当服务器计算出的SHA1或者MD5,与客户端计算的值一致时,就代表该请求参数,在传输途中没有被其他中间人修改过.</p>\n<h3 id=\"02-唯一标识\"><a href=\"#02-唯一标识\" class=\"headerlink\" title=\"02.唯一标识\"></a>02.唯一标识</h3><p>比如,有上千万个文件, 给你一个文件, 要你在这上千万个文件中查找是否存在.</p>\n<p>一个很笨的办法就是把每一文件都拿出来, 然后按照二进制串一一进行对比. 但是这个操作注定是比较费时的.</p>\n<p>而通用的方式是,可以用哈希算法对文件进行计算, 然后比较哈希值是否相同. </p>\n<h3 id=\"03-HASH表\"><a href=\"#03-HASH表\" class=\"headerlink\" title=\"03.HASH表\"></a>03.HASH表</h3><p>HASH表对于如今的程序员而言,已经是如雷贯耳了.这里就不再赘述了.</p>\n<h3 id=\"04-负载均衡\"><a href=\"#04-负载均衡\" class=\"headerlink\" title=\"04.负载均衡\"></a>04.负载均衡</h3><p>比如,现在又多台服务器, 来了一个请求, 如何确定这个请求应该路由到哪个路由器呢?当然, 必须确保相同的请求经过路由到达同一个服务器. </p>\n<p>一种办法就是保存一张路由关系的表, 比如用户的UID, 但是如果客户端很多, 势必查找的时间会很长. 这时, 可以将客户端的唯一标识信息(如:IP、username等)进行哈希计算, 然后与服务器个数取模, 得到的就是服务器的编号.</p>\n<h3 id=\"05-分布式存储\"><a href=\"#05-分布式存储\" class=\"headerlink\" title=\"05.分布式存储\"></a>05.分布式存储</h3><p>当我们有大量数据时, 一般会选择将数据存储到多个服务器, 为了提高读取与写入的速度嘛. 决定将文件存储到哪台服务器, 就可以通过哈希算法取模的操作来得到.</p>\n<h2 id=\"3-HASH函数\"><a href=\"#3-HASH函数\" class=\"headerlink\" title=\"3.HASH函数\"></a>3.HASH函数</h2><p>常见的HASH函数有,MD5,SHA1,SHA256,SHA512.通过windows的certutil 可以初步感受.</p>\n<h3 id=\"01-MD5\"><a href=\"#01-MD5\" class=\"headerlink\" title=\"01.MD5\"></a>01.MD5</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\web&gt;certutil -hashfile .&#x2F;.gitconfig md5</span><br><span class=\"line\">MD5 的 .&#x2F;.gitconfig 哈希:</span><br><span class=\"line\">38213d497c6bf32cfb3a67cb539cf8a3</span><br><span class=\"line\">CertUtil: -hashfile 命令成功完成。</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"02-SHA1\"><a href=\"#02-SHA1\" class=\"headerlink\" title=\"02.SHA1\"></a>02.SHA1</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\web&gt;certutil -hashfile .&#x2F;.gitconfig sha1</span><br><span class=\"line\">SHA1 的 .&#x2F;.gitconfig 哈希:</span><br><span class=\"line\">92779fdfbc1200e396839a04e9713f6e12c151b3</span><br><span class=\"line\">CertUtil: -hashfile 命令成功完成。</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"03-SHA256\"><a href=\"#03-SHA256\" class=\"headerlink\" title=\"03.SHA256\"></a>03.SHA256</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\web&gt;certutil -hashfile .&#x2F;.gitconfig sha256</span><br><span class=\"line\">SHA256 的 .&#x2F;.gitconfig 哈希:</span><br><span class=\"line\">4455f3d3ae7698f759a34f8c17290fa6664bd367157fd16daa5bfa5f54710aea</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"04-SHA512\"><a href=\"#04-SHA512\" class=\"headerlink\" title=\"04.SHA512\"></a>04.SHA512</h3><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">C:\\<span class=\"title\">Users</span>\\<span class=\"title\">web</span>&gt;<span class=\"title\">certutil</span> -<span class=\"title\">hashfile</span> ./.<span class=\"title\">bash_history</span> <span class=\"title\">sha512</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">SHA512</span> 的 ./.<span class=\"title\">bash_history</span> 哈希:</span></span><br><span class=\"line\"><span class=\"function\">7<span class=\"title\">a1a14ef37e22ae24a1b04b397c8bd60c59567933b0d04776c5bec5486ac2aa39fc56eda5d6e2e5c52bd3484a3fdd51ec29accfe5dde3071f0cacc43eff2b159</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">CertUtil</span>: -<span class=\"title\">hashfile</span> 命令成功完成。</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p> 最终结论</p>\n<p>通过调研,MD5和SHA1都有碰撞的风险,且互联网上已经有相关的举例.而SHA256在理论上有碰撞的可能.但是,目前还未实现.</p>\n<p>最初的想法是,MD5和SHA1作为唯一键.但是再调研以及对比长度后,选择了SHA256</p>\n","site":{"data":{"contact":[{"title":"github","icon":"icon-github","link":"https://github.com/yuansudong"},{"title":"email","icon":"icon-email","link":"mailto:1145919989@qq.com"},{"title":"qq","icon":"icon-qq","link":"/atom.xml"}],"favicons":["<link rel=\"shortcut icon\" href=\"/img//favicon.ico\">","<link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/img//favicon-16x16.png\">","<link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/img//favicon-32x32.png\">","<link rel=\"icon\" type=\"image/png\" sizes=\"48x48\" href=\"/img//favicon-48x48.png\">","<link rel=\"manifest\" href=\"/img//manifest.json\">","<meta name=\"mobile-web-app-capable\" content=\"yes\">","<meta name=\"theme-color\" content=\"#fff\">","<meta name=\"application-name\">","<link rel=\"apple-touch-icon\" sizes=\"57x57\" href=\"/img//apple-touch-icon-57x57.png\">","<link rel=\"apple-touch-icon\" sizes=\"60x60\" href=\"/img//apple-touch-icon-60x60.png\">","<link rel=\"apple-touch-icon\" sizes=\"72x72\" href=\"/img//apple-touch-icon-72x72.png\">","<link rel=\"apple-touch-icon\" sizes=\"76x76\" href=\"/img//apple-touch-icon-76x76.png\">","<link rel=\"apple-touch-icon\" sizes=\"114x114\" href=\"/img//apple-touch-icon-114x114.png\">","<link rel=\"apple-touch-icon\" sizes=\"120x120\" href=\"/img//apple-touch-icon-120x120.png\">","<link rel=\"apple-touch-icon\" sizes=\"144x144\" href=\"/img//apple-touch-icon-144x144.png\">","<link rel=\"apple-touch-icon\" sizes=\"152x152\" href=\"/img//apple-touch-icon-152x152.png\">","<link rel=\"apple-touch-icon\" sizes=\"167x167\" href=\"/img//apple-touch-icon-167x167.png\">","<link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/img//apple-touch-icon-180x180.png\">","<link rel=\"apple-touch-icon\" sizes=\"1024x1024\" href=\"/img//apple-touch-icon-1024x1024.png\">","<meta name=\"apple-mobile-web-app-capable\" content=\"yes\">","<meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black-translucent\">","<meta name=\"apple-mobile-web-app-title\">","<meta name=\"msapplication-TileColor\" content=\"#fff\">","<meta name=\"msapplication-TileImage\" content=\"/img//mstile-144x144.png\">","<meta name=\"msapplication-config\" content=\"/img//browserconfig.xml\">"]}},"excerpt":"","more":"<p>公司基于MONGODB+NFS建立了一套分布式文件存储系统,通过磁动态挂载磁盘的方式,达到动态扩容的目的.</p>\n<p>该分布式文件存储系统通过外接CDN(腾讯,阿里,七牛云等)进行流量分发.其储存的主要类型有APK,EXE,IPA,EXCLE,PDF,各种类型的图片.</p>\n<p>文件的上传通过HTTP上传,TOKEN鉴权的方式上传到服务器,再经过NFS网络共享到各个服务器结点上.</p>\n<p>其中MONGODB的主要主作用是动态扩容+存储文件的HASH值.</p>\n<p>通过计算文件的HASH值,上传服务结点可以通过HASH值确定该文件是否在NFS分布式存储系统中存在.</p>\n<p>倘若存在,则直接返回URI.倘若不存在,则进行文件保存操作.</p>\n<p>第一个版本,对于文件的HASH值,是通过MD5的方式计算出来的.以md5为唯一键与文件的URI映射上.</p>\n<p>最初,想法是美好的.但是,我遇见了一个狗日的测试,他竟然跑到了国外的网站.下载了一个MD5碰撞的例子.</p>\n<p>该网站如下,拿走,不谢!</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:&#x2F;&#x2F;www.win.tue.nl&#x2F;hashclash&#x2F;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>结果是不言而喻的,我被狠狠地打了脸,只能灰头土脑的回来研究下HASH碰撞.</p>\n<p>重新声明: 虽然说测试是狗日的,但是不得不承认别人的有些以及专业.狗日二字纯属戏言.</p>\n<h2 id=\"1-HASH简介\"><a href=\"#1-HASH简介\" class=\"headerlink\" title=\"1.HASH简介\"></a>1.HASH简介</h2><p>哈希(HASH)算法,即散列函数。它是一种单向密码体制,即它是一个从明文到密文的不可逆的映射，只有加密过程，没有解密过程.</p>\n<p>同时,哈希函数可以将任意长度的输入经过变化以后得到固定长度的输出.</p>\n<p>哈希函数的这种单向特征和输出数据长度固定的特征使得它可以生成消息或者数据.</p>\n<h2 id=\"2-HASH用途\"><a href=\"#2-HASH用途\" class=\"headerlink\" title=\"2.HASH用途\"></a>2.HASH用途</h2><h3 id=\"01-数据检验\"><a href=\"#01-数据检验\" class=\"headerlink\" title=\"01.数据检验\"></a>01.数据检验</h3><p>在安全接口开发中,在对请求参数进行处理之前,我们需要对请求体进行MD5或者SHA1验证.</p>\n<p>当服务器计算出的SHA1或者MD5,与客户端计算的值一致时,就代表该请求参数,在传输途中没有被其他中间人修改过.</p>\n<h3 id=\"02-唯一标识\"><a href=\"#02-唯一标识\" class=\"headerlink\" title=\"02.唯一标识\"></a>02.唯一标识</h3><p>比如,有上千万个文件, 给你一个文件, 要你在这上千万个文件中查找是否存在.</p>\n<p>一个很笨的办法就是把每一文件都拿出来, 然后按照二进制串一一进行对比. 但是这个操作注定是比较费时的.</p>\n<p>而通用的方式是,可以用哈希算法对文件进行计算, 然后比较哈希值是否相同. </p>\n<h3 id=\"03-HASH表\"><a href=\"#03-HASH表\" class=\"headerlink\" title=\"03.HASH表\"></a>03.HASH表</h3><p>HASH表对于如今的程序员而言,已经是如雷贯耳了.这里就不再赘述了.</p>\n<h3 id=\"04-负载均衡\"><a href=\"#04-负载均衡\" class=\"headerlink\" title=\"04.负载均衡\"></a>04.负载均衡</h3><p>比如,现在又多台服务器, 来了一个请求, 如何确定这个请求应该路由到哪个路由器呢?当然, 必须确保相同的请求经过路由到达同一个服务器. </p>\n<p>一种办法就是保存一张路由关系的表, 比如用户的UID, 但是如果客户端很多, 势必查找的时间会很长. 这时, 可以将客户端的唯一标识信息(如:IP、username等)进行哈希计算, 然后与服务器个数取模, 得到的就是服务器的编号.</p>\n<h3 id=\"05-分布式存储\"><a href=\"#05-分布式存储\" class=\"headerlink\" title=\"05.分布式存储\"></a>05.分布式存储</h3><p>当我们有大量数据时, 一般会选择将数据存储到多个服务器, 为了提高读取与写入的速度嘛. 决定将文件存储到哪台服务器, 就可以通过哈希算法取模的操作来得到.</p>\n<h2 id=\"3-HASH函数\"><a href=\"#3-HASH函数\" class=\"headerlink\" title=\"3.HASH函数\"></a>3.HASH函数</h2><p>常见的HASH函数有,MD5,SHA1,SHA256,SHA512.通过windows的certutil 可以初步感受.</p>\n<h3 id=\"01-MD5\"><a href=\"#01-MD5\" class=\"headerlink\" title=\"01.MD5\"></a>01.MD5</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\web&gt;certutil -hashfile .&#x2F;.gitconfig md5</span><br><span class=\"line\">MD5 的 .&#x2F;.gitconfig 哈希:</span><br><span class=\"line\">38213d497c6bf32cfb3a67cb539cf8a3</span><br><span class=\"line\">CertUtil: -hashfile 命令成功完成。</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"02-SHA1\"><a href=\"#02-SHA1\" class=\"headerlink\" title=\"02.SHA1\"></a>02.SHA1</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\web&gt;certutil -hashfile .&#x2F;.gitconfig sha1</span><br><span class=\"line\">SHA1 的 .&#x2F;.gitconfig 哈希:</span><br><span class=\"line\">92779fdfbc1200e396839a04e9713f6e12c151b3</span><br><span class=\"line\">CertUtil: -hashfile 命令成功完成。</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"03-SHA256\"><a href=\"#03-SHA256\" class=\"headerlink\" title=\"03.SHA256\"></a>03.SHA256</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\web&gt;certutil -hashfile .&#x2F;.gitconfig sha256</span><br><span class=\"line\">SHA256 的 .&#x2F;.gitconfig 哈希:</span><br><span class=\"line\">4455f3d3ae7698f759a34f8c17290fa6664bd367157fd16daa5bfa5f54710aea</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"04-SHA512\"><a href=\"#04-SHA512\" class=\"headerlink\" title=\"04.SHA512\"></a>04.SHA512</h3><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">C:\\<span class=\"title\">Users</span>\\<span class=\"title\">web</span>&gt;<span class=\"title\">certutil</span> -<span class=\"title\">hashfile</span> ./.<span class=\"title\">bash_history</span> <span class=\"title\">sha512</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">SHA512</span> 的 ./.<span class=\"title\">bash_history</span> 哈希:</span></span><br><span class=\"line\"><span class=\"function\">7<span class=\"title\">a1a14ef37e22ae24a1b04b397c8bd60c59567933b0d04776c5bec5486ac2aa39fc56eda5d6e2e5c52bd3484a3fdd51ec29accfe5dde3071f0cacc43eff2b159</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">CertUtil</span>: -<span class=\"title\">hashfile</span> 命令成功完成。</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p> 最终结论</p>\n<p>通过调研,MD5和SHA1都有碰撞的风险,且互联网上已经有相关的举例.而SHA256在理论上有碰撞的可能.但是,目前还未实现.</p>\n<p>最初的想法是,MD5和SHA1作为唯一键.但是再调研以及对比长度后,选择了SHA256</p>\n"},{"title":"技术场景之解决重复请求","cover":"/img/technology-sense/request_repeated_title.png","subtitle":"技术场景之解决重复请求","author":{"nick":"袁苏东","link":"https://github.com/yuansudong"},"typora-root-url":"images","_content":"\n\n\n何为重复请求? 即期望请求一次的接口,重复请求了多次. 倘若要解决重复请求,就需要实现接口的幂等性.\n\n\n\n何为幂等?幂等(idempotent、idempotence)是一个数学与计算机学概念,常见于抽象代数中.在编程中,幂等是指无论执行多少次,其结果与第一次执行的结果相同.\n\n\n\n何为接口幂等?接口幂等,即同一个网络请求无论多少次进入服务器,其产生的影响与第一次进入服务器的影响相同.而要实现接口幂等,首先得分析,CRUD的幂等性\n\n\n\n\n\n### 01.CRUD幂等\n\n\n\nCRUD 即Create,Read,Update,Delete的简写.其语义对应着SQL中的Insert,Select,Update,Delete 语句.\n\n\n\n#### A.  Create 创建类操作\n\n  \n\n在数据库中,数据的创建是通过主键自增+唯一索引的方式来确定一行数据.其操作不具备幂等性\n\n\n\n#### B.  Read 查询类操作\n\n\n\n不考虑并发的情况下,在数据查询中,不会修改或者新数增数据,其操作无论执行多少次,其返回的结果与第一次操作的情况相同.\n\n\n\n可谓是天然幂等.\n\n\n\n#### C.  Update 更新类操作\n\n\n\n基于主键的计算式Update,不具备幂等性.比如下列的SQL语句.多次执行的结果,与第一次执行的结果不同\n\n\n\n```\nUPDATE Bi SET Bi.Number = Bi.Number - 1 WHERE Bi.Id = 1\n```\n\n\n\n基于主键的非计算式Update,具备幂等性.比如下列的SQL语句.多次执行的结果与第一次执行的结果相同.\n\n\n\n```\nUPDATE Bi SET Bi.Number = @Value WHERE Bi.Id = 1\n```\n\n\n\n#### D.  Delete 删除类操作\n\n\n\n基于主键的delete是具备幂等性的.比如,下列的SQL语句\n\n\n\n```\nDELETE FROM Bi WHERE Bi.Id = 1\n```\n\n\n\n基于逻辑删除,将DeletedAt字段置为当前时间.在查询时过滤掉该条数据.\n\n\n\n如此方式,在数据层面不具有幂等性.但是,在逻辑方面他具有了幂等性.比如,下列的SQL语句.\n\n\n\n```\nUPDATE Bi SET Bi.DeletedAt = {{当前的时间戳}} WHERE Bi.Id = 1\n```\n\n\n\n### 02.原因分析及其解决方案\n\n\n\n#### 01.重复点击\n\n重复点击,即,用户不小心双击或者测试人员恶意双击造成的重复请求\n\n对于这一类的重复请求.通用的解决方案是客户端在一个请求未结束之前,将点击按钮置为灰色,让按钮失去执行接口的能力.\n\n#### 06.在浏览器中因为后退等操作按钮,导致POST重复提交\n\n05.网络波动引起的重复请求\n\n04.RPC调用时,重试引起的重复调用\n\n\n\n对于这三类问题,有下列几种解决办法.\n\n\n\n第一种方案: 在正式执行接口之前,客户端先通过I1接口申请一个单次准入令牌.该令牌全局唯一,且有效时间为5分钟.客户端在发起正式请求时,在带header中带上单次准入令牌.服务器根据此准入令牌,与redis中进行删除操作,只有删除的个数为1时,才会允许放行. 否则返回相关错误码,客户端根据错误码提示操作太频繁或者网络出小差再试一次等提示.\n\n\n\n优点:  客户端不用挂心准入令牌的生成,实现了各端的统一,且服务器可以根据准入令牌做限流处理.\n\n\n\n缺点:  增加了TPS的耗时,增加了客户端的编码量(因人而异).  \n\n\n\n第二种方案: 客户端自行生成一个唯一标识符.与以前项目中,客户端感觉每次请求之前都要去服务器拿准入token,有些麻烦,所以决定自己生成.\n\n在生成之后,通过将其加入header中带入服务器.服务器根据数据表中的唯一索引,或者SQL执行受影响的行数,可以确保幂等.\n\n\n\n下面是以前合作的搭档对于唯一标识符的生成方式.\n\n\n\n```\nbString = {精确到纳秒的时间戳}_{设备标识符}_md5(请求体)_sha1(请求体)\nmd5Body = md5(bString)\nsha1Body = sha1(bString)\nrequestId = md5Body_sha1Body  \n```\n\n\n\nrequestId 就是需要带在header中的请求ID","source":"_posts/technology-sense-network-request-repeated.md","raw":"---\ntitle: 技术场景之解决重复请求\ncover:  /img/technology-sense/request_repeated_title.png\nsubtitle: 技术场景之解决重复请求\ncategories: \"技术场景\"\ntags: \"技术场景\"\nauthor:\n  nick: 袁苏东\n  link: https://github.com/yuansudong\ntypora-root-url: images\n---\n\n\n\n何为重复请求? 即期望请求一次的接口,重复请求了多次. 倘若要解决重复请求,就需要实现接口的幂等性.\n\n\n\n何为幂等?幂等(idempotent、idempotence)是一个数学与计算机学概念,常见于抽象代数中.在编程中,幂等是指无论执行多少次,其结果与第一次执行的结果相同.\n\n\n\n何为接口幂等?接口幂等,即同一个网络请求无论多少次进入服务器,其产生的影响与第一次进入服务器的影响相同.而要实现接口幂等,首先得分析,CRUD的幂等性\n\n\n\n\n\n### 01.CRUD幂等\n\n\n\nCRUD 即Create,Read,Update,Delete的简写.其语义对应着SQL中的Insert,Select,Update,Delete 语句.\n\n\n\n#### A.  Create 创建类操作\n\n  \n\n在数据库中,数据的创建是通过主键自增+唯一索引的方式来确定一行数据.其操作不具备幂等性\n\n\n\n#### B.  Read 查询类操作\n\n\n\n不考虑并发的情况下,在数据查询中,不会修改或者新数增数据,其操作无论执行多少次,其返回的结果与第一次操作的情况相同.\n\n\n\n可谓是天然幂等.\n\n\n\n#### C.  Update 更新类操作\n\n\n\n基于主键的计算式Update,不具备幂等性.比如下列的SQL语句.多次执行的结果,与第一次执行的结果不同\n\n\n\n```\nUPDATE Bi SET Bi.Number = Bi.Number - 1 WHERE Bi.Id = 1\n```\n\n\n\n基于主键的非计算式Update,具备幂等性.比如下列的SQL语句.多次执行的结果与第一次执行的结果相同.\n\n\n\n```\nUPDATE Bi SET Bi.Number = @Value WHERE Bi.Id = 1\n```\n\n\n\n#### D.  Delete 删除类操作\n\n\n\n基于主键的delete是具备幂等性的.比如,下列的SQL语句\n\n\n\n```\nDELETE FROM Bi WHERE Bi.Id = 1\n```\n\n\n\n基于逻辑删除,将DeletedAt字段置为当前时间.在查询时过滤掉该条数据.\n\n\n\n如此方式,在数据层面不具有幂等性.但是,在逻辑方面他具有了幂等性.比如,下列的SQL语句.\n\n\n\n```\nUPDATE Bi SET Bi.DeletedAt = {{当前的时间戳}} WHERE Bi.Id = 1\n```\n\n\n\n### 02.原因分析及其解决方案\n\n\n\n#### 01.重复点击\n\n重复点击,即,用户不小心双击或者测试人员恶意双击造成的重复请求\n\n对于这一类的重复请求.通用的解决方案是客户端在一个请求未结束之前,将点击按钮置为灰色,让按钮失去执行接口的能力.\n\n#### 06.在浏览器中因为后退等操作按钮,导致POST重复提交\n\n05.网络波动引起的重复请求\n\n04.RPC调用时,重试引起的重复调用\n\n\n\n对于这三类问题,有下列几种解决办法.\n\n\n\n第一种方案: 在正式执行接口之前,客户端先通过I1接口申请一个单次准入令牌.该令牌全局唯一,且有效时间为5分钟.客户端在发起正式请求时,在带header中带上单次准入令牌.服务器根据此准入令牌,与redis中进行删除操作,只有删除的个数为1时,才会允许放行. 否则返回相关错误码,客户端根据错误码提示操作太频繁或者网络出小差再试一次等提示.\n\n\n\n优点:  客户端不用挂心准入令牌的生成,实现了各端的统一,且服务器可以根据准入令牌做限流处理.\n\n\n\n缺点:  增加了TPS的耗时,增加了客户端的编码量(因人而异).  \n\n\n\n第二种方案: 客户端自行生成一个唯一标识符.与以前项目中,客户端感觉每次请求之前都要去服务器拿准入token,有些麻烦,所以决定自己生成.\n\n在生成之后,通过将其加入header中带入服务器.服务器根据数据表中的唯一索引,或者SQL执行受影响的行数,可以确保幂等.\n\n\n\n下面是以前合作的搭档对于唯一标识符的生成方式.\n\n\n\n```\nbString = {精确到纳秒的时间戳}_{设备标识符}_md5(请求体)_sha1(请求体)\nmd5Body = md5(bString)\nsha1Body = sha1(bString)\nrequestId = md5Body_sha1Body  \n```\n\n\n\nrequestId 就是需要带在header中的请求ID","slug":"technology-sense-network-request-repeated","published":1,"date":"2021-03-15T16:58:23.122Z","updated":"2021-03-15T17:14:03.604Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmchg4ji00167gvl4tn28h0k","content":"<p>何为重复请求? 即期望请求一次的接口,重复请求了多次. 倘若要解决重复请求,就需要实现接口的幂等性.</p>\n<p>何为幂等?幂等(idempotent、idempotence)是一个数学与计算机学概念,常见于抽象代数中.在编程中,幂等是指无论执行多少次,其结果与第一次执行的结果相同.</p>\n<p>何为接口幂等?接口幂等,即同一个网络请求无论多少次进入服务器,其产生的影响与第一次进入服务器的影响相同.而要实现接口幂等,首先得分析,CRUD的幂等性</p>\n<h3 id=\"01-CRUD幂等\"><a href=\"#01-CRUD幂等\" class=\"headerlink\" title=\"01.CRUD幂等\"></a>01.CRUD幂等</h3><p>CRUD 即Create,Read,Update,Delete的简写.其语义对应着SQL中的Insert,Select,Update,Delete 语句.</p>\n<h4 id=\"A-Create-创建类操作\"><a href=\"#A-Create-创建类操作\" class=\"headerlink\" title=\"A.  Create 创建类操作\"></a>A.  Create 创建类操作</h4><p>在数据库中,数据的创建是通过主键自增+唯一索引的方式来确定一行数据.其操作不具备幂等性</p>\n<h4 id=\"B-Read-查询类操作\"><a href=\"#B-Read-查询类操作\" class=\"headerlink\" title=\"B.  Read 查询类操作\"></a>B.  Read 查询类操作</h4><p>不考虑并发的情况下,在数据查询中,不会修改或者新数增数据,其操作无论执行多少次,其返回的结果与第一次操作的情况相同.</p>\n<p>可谓是天然幂等.</p>\n<h4 id=\"C-Update-更新类操作\"><a href=\"#C-Update-更新类操作\" class=\"headerlink\" title=\"C.  Update 更新类操作\"></a>C.  Update 更新类操作</h4><p>基于主键的计算式Update,不具备幂等性.比如下列的SQL语句.多次执行的结果,与第一次执行的结果不同</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UPDATE Bi SET Bi.Number &#x3D; Bi.Number - 1 WHERE Bi.Id &#x3D; 1</span><br></pre></td></tr></table></figure>\n\n\n\n<p>基于主键的非计算式Update,具备幂等性.比如下列的SQL语句.多次执行的结果与第一次执行的结果相同.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UPDATE Bi SET Bi.Number &#x3D; @Value WHERE Bi.Id &#x3D; 1</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"D-Delete-删除类操作\"><a href=\"#D-Delete-删除类操作\" class=\"headerlink\" title=\"D.  Delete 删除类操作\"></a>D.  Delete 删除类操作</h4><p>基于主键的delete是具备幂等性的.比如,下列的SQL语句</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELETE FROM Bi WHERE Bi.Id &#x3D; 1</span><br></pre></td></tr></table></figure>\n\n\n\n<p>基于逻辑删除,将DeletedAt字段置为当前时间.在查询时过滤掉该条数据.</p>\n<p>如此方式,在数据层面不具有幂等性.但是,在逻辑方面他具有了幂等性.比如,下列的SQL语句.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UPDATE Bi SET Bi.DeletedAt &#x3D; &#123;&#123;当前的时间戳&#125;&#125; WHERE Bi.Id &#x3D; 1</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"02-原因分析及其解决方案\"><a href=\"#02-原因分析及其解决方案\" class=\"headerlink\" title=\"02.原因分析及其解决方案\"></a>02.原因分析及其解决方案</h3><h4 id=\"01-重复点击\"><a href=\"#01-重复点击\" class=\"headerlink\" title=\"01.重复点击\"></a>01.重复点击</h4><p>重复点击,即,用户不小心双击或者测试人员恶意双击造成的重复请求</p>\n<p>对于这一类的重复请求.通用的解决方案是客户端在一个请求未结束之前,将点击按钮置为灰色,让按钮失去执行接口的能力.</p>\n<h4 id=\"06-在浏览器中因为后退等操作按钮-导致POST重复提交\"><a href=\"#06-在浏览器中因为后退等操作按钮-导致POST重复提交\" class=\"headerlink\" title=\"06.在浏览器中因为后退等操作按钮,导致POST重复提交\"></a>06.在浏览器中因为后退等操作按钮,导致POST重复提交</h4><p>05.网络波动引起的重复请求</p>\n<p>04.RPC调用时,重试引起的重复调用</p>\n<p>对于这三类问题,有下列几种解决办法.</p>\n<p>第一种方案: 在正式执行接口之前,客户端先通过I1接口申请一个单次准入令牌.该令牌全局唯一,且有效时间为5分钟.客户端在发起正式请求时,在带header中带上单次准入令牌.服务器根据此准入令牌,与redis中进行删除操作,只有删除的个数为1时,才会允许放行. 否则返回相关错误码,客户端根据错误码提示操作太频繁或者网络出小差再试一次等提示.</p>\n<p>优点:  客户端不用挂心准入令牌的生成,实现了各端的统一,且服务器可以根据准入令牌做限流处理.</p>\n<p>缺点:  增加了TPS的耗时,增加了客户端的编码量(因人而异).  </p>\n<p>第二种方案: 客户端自行生成一个唯一标识符.与以前项目中,客户端感觉每次请求之前都要去服务器拿准入token,有些麻烦,所以决定自己生成.</p>\n<p>在生成之后,通过将其加入header中带入服务器.服务器根据数据表中的唯一索引,或者SQL执行受影响的行数,可以确保幂等.</p>\n<p>下面是以前合作的搭档对于唯一标识符的生成方式.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bString &#x3D; &#123;精确到纳秒的时间戳&#125;_&#123;设备标识符&#125;_md5(请求体)_sha1(请求体)</span><br><span class=\"line\">md5Body &#x3D; md5(bString)</span><br><span class=\"line\">sha1Body &#x3D; sha1(bString)</span><br><span class=\"line\">requestId &#x3D; md5Body_sha1Body  </span><br></pre></td></tr></table></figure>\n\n\n\n<p>requestId 就是需要带在header中的请求ID</p>\n","site":{"data":{"contact":[{"title":"github","icon":"icon-github","link":"https://github.com/yuansudong"},{"title":"email","icon":"icon-email","link":"mailto:1145919989@qq.com"},{"title":"qq","icon":"icon-qq","link":"/atom.xml"}],"favicons":["<link rel=\"shortcut icon\" href=\"/img//favicon.ico\">","<link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/img//favicon-16x16.png\">","<link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/img//favicon-32x32.png\">","<link rel=\"icon\" type=\"image/png\" sizes=\"48x48\" href=\"/img//favicon-48x48.png\">","<link rel=\"manifest\" href=\"/img//manifest.json\">","<meta name=\"mobile-web-app-capable\" content=\"yes\">","<meta name=\"theme-color\" content=\"#fff\">","<meta name=\"application-name\">","<link rel=\"apple-touch-icon\" sizes=\"57x57\" href=\"/img//apple-touch-icon-57x57.png\">","<link rel=\"apple-touch-icon\" sizes=\"60x60\" href=\"/img//apple-touch-icon-60x60.png\">","<link rel=\"apple-touch-icon\" sizes=\"72x72\" href=\"/img//apple-touch-icon-72x72.png\">","<link rel=\"apple-touch-icon\" sizes=\"76x76\" href=\"/img//apple-touch-icon-76x76.png\">","<link rel=\"apple-touch-icon\" sizes=\"114x114\" href=\"/img//apple-touch-icon-114x114.png\">","<link rel=\"apple-touch-icon\" sizes=\"120x120\" href=\"/img//apple-touch-icon-120x120.png\">","<link rel=\"apple-touch-icon\" sizes=\"144x144\" href=\"/img//apple-touch-icon-144x144.png\">","<link rel=\"apple-touch-icon\" sizes=\"152x152\" href=\"/img//apple-touch-icon-152x152.png\">","<link rel=\"apple-touch-icon\" sizes=\"167x167\" href=\"/img//apple-touch-icon-167x167.png\">","<link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/img//apple-touch-icon-180x180.png\">","<link rel=\"apple-touch-icon\" sizes=\"1024x1024\" href=\"/img//apple-touch-icon-1024x1024.png\">","<meta name=\"apple-mobile-web-app-capable\" content=\"yes\">","<meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black-translucent\">","<meta name=\"apple-mobile-web-app-title\">","<meta name=\"msapplication-TileColor\" content=\"#fff\">","<meta name=\"msapplication-TileImage\" content=\"/img//mstile-144x144.png\">","<meta name=\"msapplication-config\" content=\"/img//browserconfig.xml\">"]}},"excerpt":"","more":"<p>何为重复请求? 即期望请求一次的接口,重复请求了多次. 倘若要解决重复请求,就需要实现接口的幂等性.</p>\n<p>何为幂等?幂等(idempotent、idempotence)是一个数学与计算机学概念,常见于抽象代数中.在编程中,幂等是指无论执行多少次,其结果与第一次执行的结果相同.</p>\n<p>何为接口幂等?接口幂等,即同一个网络请求无论多少次进入服务器,其产生的影响与第一次进入服务器的影响相同.而要实现接口幂等,首先得分析,CRUD的幂等性</p>\n<h3 id=\"01-CRUD幂等\"><a href=\"#01-CRUD幂等\" class=\"headerlink\" title=\"01.CRUD幂等\"></a>01.CRUD幂等</h3><p>CRUD 即Create,Read,Update,Delete的简写.其语义对应着SQL中的Insert,Select,Update,Delete 语句.</p>\n<h4 id=\"A-Create-创建类操作\"><a href=\"#A-Create-创建类操作\" class=\"headerlink\" title=\"A.  Create 创建类操作\"></a>A.  Create 创建类操作</h4><p>在数据库中,数据的创建是通过主键自增+唯一索引的方式来确定一行数据.其操作不具备幂等性</p>\n<h4 id=\"B-Read-查询类操作\"><a href=\"#B-Read-查询类操作\" class=\"headerlink\" title=\"B.  Read 查询类操作\"></a>B.  Read 查询类操作</h4><p>不考虑并发的情况下,在数据查询中,不会修改或者新数增数据,其操作无论执行多少次,其返回的结果与第一次操作的情况相同.</p>\n<p>可谓是天然幂等.</p>\n<h4 id=\"C-Update-更新类操作\"><a href=\"#C-Update-更新类操作\" class=\"headerlink\" title=\"C.  Update 更新类操作\"></a>C.  Update 更新类操作</h4><p>基于主键的计算式Update,不具备幂等性.比如下列的SQL语句.多次执行的结果,与第一次执行的结果不同</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UPDATE Bi SET Bi.Number &#x3D; Bi.Number - 1 WHERE Bi.Id &#x3D; 1</span><br></pre></td></tr></table></figure>\n\n\n\n<p>基于主键的非计算式Update,具备幂等性.比如下列的SQL语句.多次执行的结果与第一次执行的结果相同.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UPDATE Bi SET Bi.Number &#x3D; @Value WHERE Bi.Id &#x3D; 1</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"D-Delete-删除类操作\"><a href=\"#D-Delete-删除类操作\" class=\"headerlink\" title=\"D.  Delete 删除类操作\"></a>D.  Delete 删除类操作</h4><p>基于主键的delete是具备幂等性的.比如,下列的SQL语句</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELETE FROM Bi WHERE Bi.Id &#x3D; 1</span><br></pre></td></tr></table></figure>\n\n\n\n<p>基于逻辑删除,将DeletedAt字段置为当前时间.在查询时过滤掉该条数据.</p>\n<p>如此方式,在数据层面不具有幂等性.但是,在逻辑方面他具有了幂等性.比如,下列的SQL语句.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UPDATE Bi SET Bi.DeletedAt &#x3D; &#123;&#123;当前的时间戳&#125;&#125; WHERE Bi.Id &#x3D; 1</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"02-原因分析及其解决方案\"><a href=\"#02-原因分析及其解决方案\" class=\"headerlink\" title=\"02.原因分析及其解决方案\"></a>02.原因分析及其解决方案</h3><h4 id=\"01-重复点击\"><a href=\"#01-重复点击\" class=\"headerlink\" title=\"01.重复点击\"></a>01.重复点击</h4><p>重复点击,即,用户不小心双击或者测试人员恶意双击造成的重复请求</p>\n<p>对于这一类的重复请求.通用的解决方案是客户端在一个请求未结束之前,将点击按钮置为灰色,让按钮失去执行接口的能力.</p>\n<h4 id=\"06-在浏览器中因为后退等操作按钮-导致POST重复提交\"><a href=\"#06-在浏览器中因为后退等操作按钮-导致POST重复提交\" class=\"headerlink\" title=\"06.在浏览器中因为后退等操作按钮,导致POST重复提交\"></a>06.在浏览器中因为后退等操作按钮,导致POST重复提交</h4><p>05.网络波动引起的重复请求</p>\n<p>04.RPC调用时,重试引起的重复调用</p>\n<p>对于这三类问题,有下列几种解决办法.</p>\n<p>第一种方案: 在正式执行接口之前,客户端先通过I1接口申请一个单次准入令牌.该令牌全局唯一,且有效时间为5分钟.客户端在发起正式请求时,在带header中带上单次准入令牌.服务器根据此准入令牌,与redis中进行删除操作,只有删除的个数为1时,才会允许放行. 否则返回相关错误码,客户端根据错误码提示操作太频繁或者网络出小差再试一次等提示.</p>\n<p>优点:  客户端不用挂心准入令牌的生成,实现了各端的统一,且服务器可以根据准入令牌做限流处理.</p>\n<p>缺点:  增加了TPS的耗时,增加了客户端的编码量(因人而异).  </p>\n<p>第二种方案: 客户端自行生成一个唯一标识符.与以前项目中,客户端感觉每次请求之前都要去服务器拿准入token,有些麻烦,所以决定自己生成.</p>\n<p>在生成之后,通过将其加入header中带入服务器.服务器根据数据表中的唯一索引,或者SQL执行受影响的行数,可以确保幂等.</p>\n<p>下面是以前合作的搭档对于唯一标识符的生成方式.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bString &#x3D; &#123;精确到纳秒的时间戳&#125;_&#123;设备标识符&#125;_md5(请求体)_sha1(请求体)</span><br><span class=\"line\">md5Body &#x3D; md5(bString)</span><br><span class=\"line\">sha1Body &#x3D; sha1(bString)</span><br><span class=\"line\">requestId &#x3D; md5Body_sha1Body  </span><br></pre></td></tr></table></figure>\n\n\n\n<p>requestId 就是需要带在header中的请求ID</p>\n"},{"title":"技术场景之优化邀请码","cover":"/img/technology-sense/optimize_invation_code_title.png","subtitle":"技术场景之优化邀请码","author":{"nick":"袁苏东","link":"https://github.com/yuansudong"},"_content":"\n邀请码是识别邀请人的一种方式,常常被用作推广. 而邀请码最便捷的方式就是使用邀请人的UID.\n\n\n\n但是,根据接口开发规范,数据库字段不能暴露在接口中,特别是UID.因此,邀请码一般是由一个[A-Z],[a-z],[0-9]的字符串组成.\n\n\n\n对于一些工程,它们是通过生成一批预备邀请码在数据库中.\n\n\n\n在用户申请邀请码的时候,将邀请码与申请人的UID绑定在一起,并且给这个绑定一个过期时间.\n\n\n\n当未知用户注册时,通过填写邀请码的方式,便可以将邀请人和新用户绑定在一起,以及对邀请人发放利益.\n\n\n\n## 1.问题场景\n\n\n\n(1) 邀请码过多,增加数据库查询负担.\n\n\n\n(2) 减少邀请码,随着用户量的增长.用户会频繁收到邀请码不够用的信息.\n\n\n\n## 2.解决办法 \n\n\n\n\n\n在一番权衡之后,采用了进制转换.即将UID的十进制,转换为其他进制.\n\n\n\n在计算机系统中,有进制一说.比如,二进制,八进制,十进制,十六进制.其核心便是逢二进一,逢八进一,逢十进一,逢十六进一.但是在核心的最前面,却是基数.\n\n\n\n二进制的基数为 [ 0 , 1 ].\n\n八进制的基数为 [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 ].\n\n十进制的基数为 [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ].\n\n十六进制的基数为 [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , A , B , C , D , E , F ].\n\n\n\n对于邀请码而言,短小是核心,所以邀请码的最大长度通常被产品限制为六位.\n\n\n\n由此可见,十进制是不能向二进制和八进制转换的.因为,这会使得邀请码变得非常的长.\n\n\n\n至于十六进制,在一定程度上可以容纳更多的十进制.但是,它会很快地突破六位的限制,且被大部分程序员所熟识.因为不能作为邀请码.首先会喷开发者没见识.其次,会暴露邀请人的核心信息.\n\n\n\n因此,于邀请码而言, 需要自己设计一个新的进制出来. 上面提到 , 邀请码由[A-Z],[a-z],[0-9]组成.\n\n\n\n但是,由于 1和 l,0和O对于人而言不太容易区分,且常常区分错误. 所以,要将l,1,O,0在基数中除掉.\n\n\n\n```\n{\n    'A', 'B', 'C', '6', 'D', 'E', 'F', '2', 'G', 'H', 'J', '3', 'K', 'L', 'M', '4', 'N', 'P', '5', 'Q', 'R', 'S', '7', 'T', '8', 'U', 'V', 'W', '9', 'X', 'Y', 'Z',\n    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'j', 'k', 'm', 'n', 'p', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n}\n```\n\n\n\n因为,基数中有54个基数,因此将其称之为54进制.\n\n对于6位数的邀请码而言,54进制可以容纳 54 x 54 x 54 x 54 x 54 x 54 个十进制进制.\n\n即 24794911296个十进制,这个数字是两百亿之多, 比全球的人还多.\n\n\n\n因此,以此种方式生成邀请码,将邀请码与用户绑定在一起,基本上可以满足所有大型应用.从而不必担心,查询效率的问题.更不要担心数据库\n\n\n\n所以,邀请码的生成方式,决定将用户的UID转换成以54为基数的字符串.\n\n\n\n下面是GO的实现代码.主要目的是起一个抛砖引玉的目的\n\n\n\n## 3.实施步骤\n\n\n\n### 01.前提准备\n\n```\n// base 用于存储进制转换函数\nvar base []byte\n\n// basemap 用于根据值获取索引,以此来提高索引的效率\nvar basemap map[byte]int\n\nvar binary int64\n\nvar defaultNum int\n\n// 用于初始化base中的编码, 即进制转换的函数\nfunc init() {\n  base = []byte{\n    'A', 'B', 'C', '6', 'D', 'E', 'F', '2', 'G', 'H', 'J', '3', 'K', 'L', 'M', '4', 'N', 'P', '5', 'Q', 'R', 'S', '7', 'T', '8', 'U', 'V', 'W', '9', 'X', 'Y', 'Z',\n    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'j', 'k', 'm', 'n', 'p', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n  }\n  basemap = make(map[byte]int)\n  for index := 0; index < len(base); index++ {\n    basemap[base[index]] = index\n  }\n  defaultNum = 6            //  默认给6位\n  binary = int64(len(base)) //  用于求出这是多少进制的\n}\n```\n\n\n\n### 02.将用户的UID编码为邀请码\n\n\n\n```\n// InvationEncode 对数字进行编码,获得54进制类似的邀请码\nfunc InvationEncode(num int64) string {\n  store := make([]byte, 0, defaultNum)\n  l := list.New()\n  encode(num, l, 1)\n  // 查看位数填充,序列集合上抽像的0值\n  for index := l.Len(); index < defaultNum; index++ {\n    store = append(store, base[0])\n  }\n  for curr := l.Front(); curr != nil; curr = curr.Next() {\n    store = append(store, curr.Value.(byte))\n  }\n  return string(store)\n}\n\n// encode 是Encode 的辅助函数\nfunc encode(encodeNum int64, l *list.List, index int) {\n  // merchant 用于求商\n  merchant := encodeNum / binary\n  // remainder 用于求余\n  remainder := encodeNum % binary\n  // 余数是上一位的的取值,商数是当前位的取值\n  l.PushFront(base[int(remainder)])\n  // 检查商是否是需要进1, 如果需要进1, 需要进入下一轮\n  if merchant >= binary {\n    encode(merchant, l, index+1)\n  } else {\n    if merchant != 0 {\n      l.PushFront(base[int(merchant)])\n    }\n  }\n}\n```\n\n\n\n### 03.将邀请码解码为用户的UID\n\n\n\n```\n// InvationDecode 用于将相应的字符串邀请码转换成用户的UID,int64\nfunc InvationDecode(str string) (int64, bool) {\n  if str == \"\" {\n    return 0, false\n  }\n  store := []byte(str)\n  length := len(store)\n  value := int64(0)\n  for index := length; index > 0; index-- {\n    pos := index - 1\n    num, isExists := basemap[store[pos]]\n    if !isExists {\n      return value, false\n    }\n    value += int64(num) * getDividend(length-index, binary)\n  }\n  return value, true\n}\n// getDividend 用于获取被除数\nfunc getDividend(c int, bin int64) int64 {\n  sum := int64(1)\n  for index := 0; index < c; index++ {\n    sum *= bin\n  }\n  return sum\n}\n```\n\n\n\n### 04.测试\n\n\n\n十进制 \t\t\t\t\t 五十四进制\n\n10010\t\t\t\t\t\tAAA6TR\n\n20020\t\t\t\t\t  AAAFsj\n\n12345678910\t    VtvHv9","source":"_posts/technology-sense-optimize-invation-code.md","raw":"---\ntitle: 技术场景之优化邀请码\ncover:  /img/technology-sense/optimize_invation_code_title.png\nsubtitle: 技术场景之优化邀请码\ncategories: \"技术场景\"\ntags: \"技术场景\"\nauthor: \n  nick: 袁苏东\n  link: https://github.com/yuansudong\n---\n\n邀请码是识别邀请人的一种方式,常常被用作推广. 而邀请码最便捷的方式就是使用邀请人的UID.\n\n\n\n但是,根据接口开发规范,数据库字段不能暴露在接口中,特别是UID.因此,邀请码一般是由一个[A-Z],[a-z],[0-9]的字符串组成.\n\n\n\n对于一些工程,它们是通过生成一批预备邀请码在数据库中.\n\n\n\n在用户申请邀请码的时候,将邀请码与申请人的UID绑定在一起,并且给这个绑定一个过期时间.\n\n\n\n当未知用户注册时,通过填写邀请码的方式,便可以将邀请人和新用户绑定在一起,以及对邀请人发放利益.\n\n\n\n## 1.问题场景\n\n\n\n(1) 邀请码过多,增加数据库查询负担.\n\n\n\n(2) 减少邀请码,随着用户量的增长.用户会频繁收到邀请码不够用的信息.\n\n\n\n## 2.解决办法 \n\n\n\n\n\n在一番权衡之后,采用了进制转换.即将UID的十进制,转换为其他进制.\n\n\n\n在计算机系统中,有进制一说.比如,二进制,八进制,十进制,十六进制.其核心便是逢二进一,逢八进一,逢十进一,逢十六进一.但是在核心的最前面,却是基数.\n\n\n\n二进制的基数为 [ 0 , 1 ].\n\n八进制的基数为 [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 ].\n\n十进制的基数为 [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ].\n\n十六进制的基数为 [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , A , B , C , D , E , F ].\n\n\n\n对于邀请码而言,短小是核心,所以邀请码的最大长度通常被产品限制为六位.\n\n\n\n由此可见,十进制是不能向二进制和八进制转换的.因为,这会使得邀请码变得非常的长.\n\n\n\n至于十六进制,在一定程度上可以容纳更多的十进制.但是,它会很快地突破六位的限制,且被大部分程序员所熟识.因为不能作为邀请码.首先会喷开发者没见识.其次,会暴露邀请人的核心信息.\n\n\n\n因此,于邀请码而言, 需要自己设计一个新的进制出来. 上面提到 , 邀请码由[A-Z],[a-z],[0-9]组成.\n\n\n\n但是,由于 1和 l,0和O对于人而言不太容易区分,且常常区分错误. 所以,要将l,1,O,0在基数中除掉.\n\n\n\n```\n{\n    'A', 'B', 'C', '6', 'D', 'E', 'F', '2', 'G', 'H', 'J', '3', 'K', 'L', 'M', '4', 'N', 'P', '5', 'Q', 'R', 'S', '7', 'T', '8', 'U', 'V', 'W', '9', 'X', 'Y', 'Z',\n    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'j', 'k', 'm', 'n', 'p', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n}\n```\n\n\n\n因为,基数中有54个基数,因此将其称之为54进制.\n\n对于6位数的邀请码而言,54进制可以容纳 54 x 54 x 54 x 54 x 54 x 54 个十进制进制.\n\n即 24794911296个十进制,这个数字是两百亿之多, 比全球的人还多.\n\n\n\n因此,以此种方式生成邀请码,将邀请码与用户绑定在一起,基本上可以满足所有大型应用.从而不必担心,查询效率的问题.更不要担心数据库\n\n\n\n所以,邀请码的生成方式,决定将用户的UID转换成以54为基数的字符串.\n\n\n\n下面是GO的实现代码.主要目的是起一个抛砖引玉的目的\n\n\n\n## 3.实施步骤\n\n\n\n### 01.前提准备\n\n```\n// base 用于存储进制转换函数\nvar base []byte\n\n// basemap 用于根据值获取索引,以此来提高索引的效率\nvar basemap map[byte]int\n\nvar binary int64\n\nvar defaultNum int\n\n// 用于初始化base中的编码, 即进制转换的函数\nfunc init() {\n  base = []byte{\n    'A', 'B', 'C', '6', 'D', 'E', 'F', '2', 'G', 'H', 'J', '3', 'K', 'L', 'M', '4', 'N', 'P', '5', 'Q', 'R', 'S', '7', 'T', '8', 'U', 'V', 'W', '9', 'X', 'Y', 'Z',\n    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'j', 'k', 'm', 'n', 'p', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n  }\n  basemap = make(map[byte]int)\n  for index := 0; index < len(base); index++ {\n    basemap[base[index]] = index\n  }\n  defaultNum = 6            //  默认给6位\n  binary = int64(len(base)) //  用于求出这是多少进制的\n}\n```\n\n\n\n### 02.将用户的UID编码为邀请码\n\n\n\n```\n// InvationEncode 对数字进行编码,获得54进制类似的邀请码\nfunc InvationEncode(num int64) string {\n  store := make([]byte, 0, defaultNum)\n  l := list.New()\n  encode(num, l, 1)\n  // 查看位数填充,序列集合上抽像的0值\n  for index := l.Len(); index < defaultNum; index++ {\n    store = append(store, base[0])\n  }\n  for curr := l.Front(); curr != nil; curr = curr.Next() {\n    store = append(store, curr.Value.(byte))\n  }\n  return string(store)\n}\n\n// encode 是Encode 的辅助函数\nfunc encode(encodeNum int64, l *list.List, index int) {\n  // merchant 用于求商\n  merchant := encodeNum / binary\n  // remainder 用于求余\n  remainder := encodeNum % binary\n  // 余数是上一位的的取值,商数是当前位的取值\n  l.PushFront(base[int(remainder)])\n  // 检查商是否是需要进1, 如果需要进1, 需要进入下一轮\n  if merchant >= binary {\n    encode(merchant, l, index+1)\n  } else {\n    if merchant != 0 {\n      l.PushFront(base[int(merchant)])\n    }\n  }\n}\n```\n\n\n\n### 03.将邀请码解码为用户的UID\n\n\n\n```\n// InvationDecode 用于将相应的字符串邀请码转换成用户的UID,int64\nfunc InvationDecode(str string) (int64, bool) {\n  if str == \"\" {\n    return 0, false\n  }\n  store := []byte(str)\n  length := len(store)\n  value := int64(0)\n  for index := length; index > 0; index-- {\n    pos := index - 1\n    num, isExists := basemap[store[pos]]\n    if !isExists {\n      return value, false\n    }\n    value += int64(num) * getDividend(length-index, binary)\n  }\n  return value, true\n}\n// getDividend 用于获取被除数\nfunc getDividend(c int, bin int64) int64 {\n  sum := int64(1)\n  for index := 0; index < c; index++ {\n    sum *= bin\n  }\n  return sum\n}\n```\n\n\n\n### 04.测试\n\n\n\n十进制 \t\t\t\t\t 五十四进制\n\n10010\t\t\t\t\t\tAAA6TR\n\n20020\t\t\t\t\t  AAAFsj\n\n12345678910\t    VtvHv9","slug":"technology-sense-optimize-invation-code","published":1,"date":"2021-03-16T18:01:07.574Z","updated":"2021-03-16T20:46:26.939Z","_id":"ckmchg4jl001b7gvl8xap7d5r","comments":1,"layout":"post","photos":[],"link":"","content":"<p>邀请码是识别邀请人的一种方式,常常被用作推广. 而邀请码最便捷的方式就是使用邀请人的UID.</p>\n<p>但是,根据接口开发规范,数据库字段不能暴露在接口中,特别是UID.因此,邀请码一般是由一个[A-Z],[a-z],[0-9]的字符串组成.</p>\n<p>对于一些工程,它们是通过生成一批预备邀请码在数据库中.</p>\n<p>在用户申请邀请码的时候,将邀请码与申请人的UID绑定在一起,并且给这个绑定一个过期时间.</p>\n<p>当未知用户注册时,通过填写邀请码的方式,便可以将邀请人和新用户绑定在一起,以及对邀请人发放利益.</p>\n<h2 id=\"1-问题场景\"><a href=\"#1-问题场景\" class=\"headerlink\" title=\"1.问题场景\"></a>1.问题场景</h2><p>(1) 邀请码过多,增加数据库查询负担.</p>\n<p>(2) 减少邀请码,随着用户量的增长.用户会频繁收到邀请码不够用的信息.</p>\n<h2 id=\"2-解决办法\"><a href=\"#2-解决办法\" class=\"headerlink\" title=\"2.解决办法\"></a>2.解决办法</h2><p>在一番权衡之后,采用了进制转换.即将UID的十进制,转换为其他进制.</p>\n<p>在计算机系统中,有进制一说.比如,二进制,八进制,十进制,十六进制.其核心便是逢二进一,逢八进一,逢十进一,逢十六进一.但是在核心的最前面,却是基数.</p>\n<p>二进制的基数为 [ 0 , 1 ].</p>\n<p>八进制的基数为 [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 ].</p>\n<p>十进制的基数为 [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ].</p>\n<p>十六进制的基数为 [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , A , B , C , D , E , F ].</p>\n<p>对于邀请码而言,短小是核心,所以邀请码的最大长度通常被产品限制为六位.</p>\n<p>由此可见,十进制是不能向二进制和八进制转换的.因为,这会使得邀请码变得非常的长.</p>\n<p>至于十六进制,在一定程度上可以容纳更多的十进制.但是,它会很快地突破六位的限制,且被大部分程序员所熟识.因为不能作为邀请码.首先会喷开发者没见识.其次,会暴露邀请人的核心信息.</p>\n<p>因此,于邀请码而言, 需要自己设计一个新的进制出来. 上面提到 , 邀请码由[A-Z],[a-z],[0-9]组成.</p>\n<p>但是,由于 1和 l,0和O对于人而言不太容易区分,且常常区分错误. 所以,要将l,1,O,0在基数中除掉.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;6&#39;, &#39;D&#39;, &#39;E&#39;, &#39;F&#39;, &#39;2&#39;, &#39;G&#39;, &#39;H&#39;, &#39;J&#39;, &#39;3&#39;, &#39;K&#39;, &#39;L&#39;, &#39;M&#39;, &#39;4&#39;, &#39;N&#39;, &#39;P&#39;, &#39;5&#39;, &#39;Q&#39;, &#39;R&#39;, &#39;S&#39;, &#39;7&#39;, &#39;T&#39;, &#39;8&#39;, &#39;U&#39;, &#39;V&#39;, &#39;W&#39;, &#39;9&#39;, &#39;X&#39;, &#39;Y&#39;, &#39;Z&#39;,</span><br><span class=\"line\">    &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;j&#39;, &#39;k&#39;, &#39;m&#39;, &#39;n&#39;, &#39;p&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>因为,基数中有54个基数,因此将其称之为54进制.</p>\n<p>对于6位数的邀请码而言,54进制可以容纳 54 x 54 x 54 x 54 x 54 x 54 个十进制进制.</p>\n<p>即 24794911296个十进制,这个数字是两百亿之多, 比全球的人还多.</p>\n<p>因此,以此种方式生成邀请码,将邀请码与用户绑定在一起,基本上可以满足所有大型应用.从而不必担心,查询效率的问题.更不要担心数据库</p>\n<p>所以,邀请码的生成方式,决定将用户的UID转换成以54为基数的字符串.</p>\n<p>下面是GO的实现代码.主要目的是起一个抛砖引玉的目的</p>\n<h2 id=\"3-实施步骤\"><a href=\"#3-实施步骤\" class=\"headerlink\" title=\"3.实施步骤\"></a>3.实施步骤</h2><h3 id=\"01-前提准备\"><a href=\"#01-前提准备\" class=\"headerlink\" title=\"01.前提准备\"></a>01.前提准备</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; base 用于存储进制转换函数</span><br><span class=\"line\">var base []byte</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; basemap 用于根据值获取索引,以此来提高索引的效率</span><br><span class=\"line\">var basemap map[byte]int</span><br><span class=\"line\"></span><br><span class=\"line\">var binary int64</span><br><span class=\"line\"></span><br><span class=\"line\">var defaultNum int</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 用于初始化base中的编码, 即进制转换的函数</span><br><span class=\"line\">func init() &#123;</span><br><span class=\"line\">  base &#x3D; []byte&#123;</span><br><span class=\"line\">    &#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;6&#39;, &#39;D&#39;, &#39;E&#39;, &#39;F&#39;, &#39;2&#39;, &#39;G&#39;, &#39;H&#39;, &#39;J&#39;, &#39;3&#39;, &#39;K&#39;, &#39;L&#39;, &#39;M&#39;, &#39;4&#39;, &#39;N&#39;, &#39;P&#39;, &#39;5&#39;, &#39;Q&#39;, &#39;R&#39;, &#39;S&#39;, &#39;7&#39;, &#39;T&#39;, &#39;8&#39;, &#39;U&#39;, &#39;V&#39;, &#39;W&#39;, &#39;9&#39;, &#39;X&#39;, &#39;Y&#39;, &#39;Z&#39;,</span><br><span class=\"line\">    &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;j&#39;, &#39;k&#39;, &#39;m&#39;, &#39;n&#39;, &#39;p&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  basemap &#x3D; make(map[byte]int)</span><br><span class=\"line\">  for index :&#x3D; 0; index &lt; len(base); index++ &#123;</span><br><span class=\"line\">    basemap[base[index]] &#x3D; index</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  defaultNum &#x3D; 6            &#x2F;&#x2F;  默认给6位</span><br><span class=\"line\">  binary &#x3D; int64(len(base)) &#x2F;&#x2F;  用于求出这是多少进制的</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"02-将用户的UID编码为邀请码\"><a href=\"#02-将用户的UID编码为邀请码\" class=\"headerlink\" title=\"02.将用户的UID编码为邀请码\"></a>02.将用户的UID编码为邀请码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; InvationEncode 对数字进行编码,获得54进制类似的邀请码</span><br><span class=\"line\">func InvationEncode(num int64) string &#123;</span><br><span class=\"line\">  store :&#x3D; make([]byte, 0, defaultNum)</span><br><span class=\"line\">  l :&#x3D; list.New()</span><br><span class=\"line\">  encode(num, l, 1)</span><br><span class=\"line\">  &#x2F;&#x2F; 查看位数填充,序列集合上抽像的0值</span><br><span class=\"line\">  for index :&#x3D; l.Len(); index &lt; defaultNum; index++ &#123;</span><br><span class=\"line\">    store &#x3D; append(store, base[0])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  for curr :&#x3D; l.Front(); curr !&#x3D; nil; curr &#x3D; curr.Next() &#123;</span><br><span class=\"line\">    store &#x3D; append(store, curr.Value.(byte))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return string(store)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; encode 是Encode 的辅助函数</span><br><span class=\"line\">func encode(encodeNum int64, l *list.List, index int) &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; merchant 用于求商</span><br><span class=\"line\">  merchant :&#x3D; encodeNum &#x2F; binary</span><br><span class=\"line\">  &#x2F;&#x2F; remainder 用于求余</span><br><span class=\"line\">  remainder :&#x3D; encodeNum % binary</span><br><span class=\"line\">  &#x2F;&#x2F; 余数是上一位的的取值,商数是当前位的取值</span><br><span class=\"line\">  l.PushFront(base[int(remainder)])</span><br><span class=\"line\">  &#x2F;&#x2F; 检查商是否是需要进1, 如果需要进1, 需要进入下一轮</span><br><span class=\"line\">  if merchant &gt;&#x3D; binary &#123;</span><br><span class=\"line\">    encode(merchant, l, index+1)</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    if merchant !&#x3D; 0 &#123;</span><br><span class=\"line\">      l.PushFront(base[int(merchant)])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"03-将邀请码解码为用户的UID\"><a href=\"#03-将邀请码解码为用户的UID\" class=\"headerlink\" title=\"03.将邀请码解码为用户的UID\"></a>03.将邀请码解码为用户的UID</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; InvationDecode 用于将相应的字符串邀请码转换成用户的UID,int64</span><br><span class=\"line\">func InvationDecode(str string) (int64, bool) &#123;</span><br><span class=\"line\">  if str &#x3D;&#x3D; &quot;&quot; &#123;</span><br><span class=\"line\">    return 0, false</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  store :&#x3D; []byte(str)</span><br><span class=\"line\">  length :&#x3D; len(store)</span><br><span class=\"line\">  value :&#x3D; int64(0)</span><br><span class=\"line\">  for index :&#x3D; length; index &gt; 0; index-- &#123;</span><br><span class=\"line\">    pos :&#x3D; index - 1</span><br><span class=\"line\">    num, isExists :&#x3D; basemap[store[pos]]</span><br><span class=\"line\">    if !isExists &#123;</span><br><span class=\"line\">      return value, false</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    value +&#x3D; int64(num) * getDividend(length-index, binary)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return value, true</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F; getDividend 用于获取被除数</span><br><span class=\"line\">func getDividend(c int, bin int64) int64 &#123;</span><br><span class=\"line\">  sum :&#x3D; int64(1)</span><br><span class=\"line\">  for index :&#x3D; 0; index &lt; c; index++ &#123;</span><br><span class=\"line\">    sum *&#x3D; bin</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return sum</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"04-测试\"><a href=\"#04-测试\" class=\"headerlink\" title=\"04.测试\"></a>04.测试</h3><p>十进制                      五十四进制</p>\n<p>10010                        AAA6TR</p>\n<p>20020                      AAAFsj</p>\n<p>12345678910        VtvHv9</p>\n","site":{"data":{"contact":[{"title":"github","icon":"icon-github","link":"https://github.com/yuansudong"},{"title":"email","icon":"icon-email","link":"mailto:1145919989@qq.com"},{"title":"qq","icon":"icon-qq","link":"/atom.xml"}],"favicons":["<link rel=\"shortcut icon\" href=\"/img//favicon.ico\">","<link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/img//favicon-16x16.png\">","<link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/img//favicon-32x32.png\">","<link rel=\"icon\" type=\"image/png\" sizes=\"48x48\" href=\"/img//favicon-48x48.png\">","<link rel=\"manifest\" href=\"/img//manifest.json\">","<meta name=\"mobile-web-app-capable\" content=\"yes\">","<meta name=\"theme-color\" content=\"#fff\">","<meta name=\"application-name\">","<link rel=\"apple-touch-icon\" sizes=\"57x57\" href=\"/img//apple-touch-icon-57x57.png\">","<link rel=\"apple-touch-icon\" sizes=\"60x60\" href=\"/img//apple-touch-icon-60x60.png\">","<link rel=\"apple-touch-icon\" sizes=\"72x72\" href=\"/img//apple-touch-icon-72x72.png\">","<link rel=\"apple-touch-icon\" sizes=\"76x76\" href=\"/img//apple-touch-icon-76x76.png\">","<link rel=\"apple-touch-icon\" sizes=\"114x114\" href=\"/img//apple-touch-icon-114x114.png\">","<link rel=\"apple-touch-icon\" sizes=\"120x120\" href=\"/img//apple-touch-icon-120x120.png\">","<link rel=\"apple-touch-icon\" sizes=\"144x144\" href=\"/img//apple-touch-icon-144x144.png\">","<link rel=\"apple-touch-icon\" sizes=\"152x152\" href=\"/img//apple-touch-icon-152x152.png\">","<link rel=\"apple-touch-icon\" sizes=\"167x167\" href=\"/img//apple-touch-icon-167x167.png\">","<link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/img//apple-touch-icon-180x180.png\">","<link rel=\"apple-touch-icon\" sizes=\"1024x1024\" href=\"/img//apple-touch-icon-1024x1024.png\">","<meta name=\"apple-mobile-web-app-capable\" content=\"yes\">","<meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black-translucent\">","<meta name=\"apple-mobile-web-app-title\">","<meta name=\"msapplication-TileColor\" content=\"#fff\">","<meta name=\"msapplication-TileImage\" content=\"/img//mstile-144x144.png\">","<meta name=\"msapplication-config\" content=\"/img//browserconfig.xml\">"]}},"excerpt":"","more":"<p>邀请码是识别邀请人的一种方式,常常被用作推广. 而邀请码最便捷的方式就是使用邀请人的UID.</p>\n<p>但是,根据接口开发规范,数据库字段不能暴露在接口中,特别是UID.因此,邀请码一般是由一个[A-Z],[a-z],[0-9]的字符串组成.</p>\n<p>对于一些工程,它们是通过生成一批预备邀请码在数据库中.</p>\n<p>在用户申请邀请码的时候,将邀请码与申请人的UID绑定在一起,并且给这个绑定一个过期时间.</p>\n<p>当未知用户注册时,通过填写邀请码的方式,便可以将邀请人和新用户绑定在一起,以及对邀请人发放利益.</p>\n<h2 id=\"1-问题场景\"><a href=\"#1-问题场景\" class=\"headerlink\" title=\"1.问题场景\"></a>1.问题场景</h2><p>(1) 邀请码过多,增加数据库查询负担.</p>\n<p>(2) 减少邀请码,随着用户量的增长.用户会频繁收到邀请码不够用的信息.</p>\n<h2 id=\"2-解决办法\"><a href=\"#2-解决办法\" class=\"headerlink\" title=\"2.解决办法\"></a>2.解决办法</h2><p>在一番权衡之后,采用了进制转换.即将UID的十进制,转换为其他进制.</p>\n<p>在计算机系统中,有进制一说.比如,二进制,八进制,十进制,十六进制.其核心便是逢二进一,逢八进一,逢十进一,逢十六进一.但是在核心的最前面,却是基数.</p>\n<p>二进制的基数为 [ 0 , 1 ].</p>\n<p>八进制的基数为 [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 ].</p>\n<p>十进制的基数为 [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ].</p>\n<p>十六进制的基数为 [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , A , B , C , D , E , F ].</p>\n<p>对于邀请码而言,短小是核心,所以邀请码的最大长度通常被产品限制为六位.</p>\n<p>由此可见,十进制是不能向二进制和八进制转换的.因为,这会使得邀请码变得非常的长.</p>\n<p>至于十六进制,在一定程度上可以容纳更多的十进制.但是,它会很快地突破六位的限制,且被大部分程序员所熟识.因为不能作为邀请码.首先会喷开发者没见识.其次,会暴露邀请人的核心信息.</p>\n<p>因此,于邀请码而言, 需要自己设计一个新的进制出来. 上面提到 , 邀请码由[A-Z],[a-z],[0-9]组成.</p>\n<p>但是,由于 1和 l,0和O对于人而言不太容易区分,且常常区分错误. 所以,要将l,1,O,0在基数中除掉.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;6&#39;, &#39;D&#39;, &#39;E&#39;, &#39;F&#39;, &#39;2&#39;, &#39;G&#39;, &#39;H&#39;, &#39;J&#39;, &#39;3&#39;, &#39;K&#39;, &#39;L&#39;, &#39;M&#39;, &#39;4&#39;, &#39;N&#39;, &#39;P&#39;, &#39;5&#39;, &#39;Q&#39;, &#39;R&#39;, &#39;S&#39;, &#39;7&#39;, &#39;T&#39;, &#39;8&#39;, &#39;U&#39;, &#39;V&#39;, &#39;W&#39;, &#39;9&#39;, &#39;X&#39;, &#39;Y&#39;, &#39;Z&#39;,</span><br><span class=\"line\">    &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;j&#39;, &#39;k&#39;, &#39;m&#39;, &#39;n&#39;, &#39;p&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>因为,基数中有54个基数,因此将其称之为54进制.</p>\n<p>对于6位数的邀请码而言,54进制可以容纳 54 x 54 x 54 x 54 x 54 x 54 个十进制进制.</p>\n<p>即 24794911296个十进制,这个数字是两百亿之多, 比全球的人还多.</p>\n<p>因此,以此种方式生成邀请码,将邀请码与用户绑定在一起,基本上可以满足所有大型应用.从而不必担心,查询效率的问题.更不要担心数据库</p>\n<p>所以,邀请码的生成方式,决定将用户的UID转换成以54为基数的字符串.</p>\n<p>下面是GO的实现代码.主要目的是起一个抛砖引玉的目的</p>\n<h2 id=\"3-实施步骤\"><a href=\"#3-实施步骤\" class=\"headerlink\" title=\"3.实施步骤\"></a>3.实施步骤</h2><h3 id=\"01-前提准备\"><a href=\"#01-前提准备\" class=\"headerlink\" title=\"01.前提准备\"></a>01.前提准备</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; base 用于存储进制转换函数</span><br><span class=\"line\">var base []byte</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; basemap 用于根据值获取索引,以此来提高索引的效率</span><br><span class=\"line\">var basemap map[byte]int</span><br><span class=\"line\"></span><br><span class=\"line\">var binary int64</span><br><span class=\"line\"></span><br><span class=\"line\">var defaultNum int</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 用于初始化base中的编码, 即进制转换的函数</span><br><span class=\"line\">func init() &#123;</span><br><span class=\"line\">  base &#x3D; []byte&#123;</span><br><span class=\"line\">    &#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;6&#39;, &#39;D&#39;, &#39;E&#39;, &#39;F&#39;, &#39;2&#39;, &#39;G&#39;, &#39;H&#39;, &#39;J&#39;, &#39;3&#39;, &#39;K&#39;, &#39;L&#39;, &#39;M&#39;, &#39;4&#39;, &#39;N&#39;, &#39;P&#39;, &#39;5&#39;, &#39;Q&#39;, &#39;R&#39;, &#39;S&#39;, &#39;7&#39;, &#39;T&#39;, &#39;8&#39;, &#39;U&#39;, &#39;V&#39;, &#39;W&#39;, &#39;9&#39;, &#39;X&#39;, &#39;Y&#39;, &#39;Z&#39;,</span><br><span class=\"line\">    &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;j&#39;, &#39;k&#39;, &#39;m&#39;, &#39;n&#39;, &#39;p&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  basemap &#x3D; make(map[byte]int)</span><br><span class=\"line\">  for index :&#x3D; 0; index &lt; len(base); index++ &#123;</span><br><span class=\"line\">    basemap[base[index]] &#x3D; index</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  defaultNum &#x3D; 6            &#x2F;&#x2F;  默认给6位</span><br><span class=\"line\">  binary &#x3D; int64(len(base)) &#x2F;&#x2F;  用于求出这是多少进制的</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"02-将用户的UID编码为邀请码\"><a href=\"#02-将用户的UID编码为邀请码\" class=\"headerlink\" title=\"02.将用户的UID编码为邀请码\"></a>02.将用户的UID编码为邀请码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; InvationEncode 对数字进行编码,获得54进制类似的邀请码</span><br><span class=\"line\">func InvationEncode(num int64) string &#123;</span><br><span class=\"line\">  store :&#x3D; make([]byte, 0, defaultNum)</span><br><span class=\"line\">  l :&#x3D; list.New()</span><br><span class=\"line\">  encode(num, l, 1)</span><br><span class=\"line\">  &#x2F;&#x2F; 查看位数填充,序列集合上抽像的0值</span><br><span class=\"line\">  for index :&#x3D; l.Len(); index &lt; defaultNum; index++ &#123;</span><br><span class=\"line\">    store &#x3D; append(store, base[0])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  for curr :&#x3D; l.Front(); curr !&#x3D; nil; curr &#x3D; curr.Next() &#123;</span><br><span class=\"line\">    store &#x3D; append(store, curr.Value.(byte))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return string(store)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; encode 是Encode 的辅助函数</span><br><span class=\"line\">func encode(encodeNum int64, l *list.List, index int) &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; merchant 用于求商</span><br><span class=\"line\">  merchant :&#x3D; encodeNum &#x2F; binary</span><br><span class=\"line\">  &#x2F;&#x2F; remainder 用于求余</span><br><span class=\"line\">  remainder :&#x3D; encodeNum % binary</span><br><span class=\"line\">  &#x2F;&#x2F; 余数是上一位的的取值,商数是当前位的取值</span><br><span class=\"line\">  l.PushFront(base[int(remainder)])</span><br><span class=\"line\">  &#x2F;&#x2F; 检查商是否是需要进1, 如果需要进1, 需要进入下一轮</span><br><span class=\"line\">  if merchant &gt;&#x3D; binary &#123;</span><br><span class=\"line\">    encode(merchant, l, index+1)</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    if merchant !&#x3D; 0 &#123;</span><br><span class=\"line\">      l.PushFront(base[int(merchant)])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"03-将邀请码解码为用户的UID\"><a href=\"#03-将邀请码解码为用户的UID\" class=\"headerlink\" title=\"03.将邀请码解码为用户的UID\"></a>03.将邀请码解码为用户的UID</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; InvationDecode 用于将相应的字符串邀请码转换成用户的UID,int64</span><br><span class=\"line\">func InvationDecode(str string) (int64, bool) &#123;</span><br><span class=\"line\">  if str &#x3D;&#x3D; &quot;&quot; &#123;</span><br><span class=\"line\">    return 0, false</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  store :&#x3D; []byte(str)</span><br><span class=\"line\">  length :&#x3D; len(store)</span><br><span class=\"line\">  value :&#x3D; int64(0)</span><br><span class=\"line\">  for index :&#x3D; length; index &gt; 0; index-- &#123;</span><br><span class=\"line\">    pos :&#x3D; index - 1</span><br><span class=\"line\">    num, isExists :&#x3D; basemap[store[pos]]</span><br><span class=\"line\">    if !isExists &#123;</span><br><span class=\"line\">      return value, false</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    value +&#x3D; int64(num) * getDividend(length-index, binary)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return value, true</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F; getDividend 用于获取被除数</span><br><span class=\"line\">func getDividend(c int, bin int64) int64 &#123;</span><br><span class=\"line\">  sum :&#x3D; int64(1)</span><br><span class=\"line\">  for index :&#x3D; 0; index &lt; c; index++ &#123;</span><br><span class=\"line\">    sum *&#x3D; bin</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return sum</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"04-测试\"><a href=\"#04-测试\" class=\"headerlink\" title=\"04.测试\"></a>04.测试</h3><p>十进制                      五十四进制</p>\n<p>10010                        AAA6TR</p>\n<p>20020                      AAAFsj</p>\n<p>12345678910        VtvHv9</p>\n"},{"title":"技术场景之优化邀请码","cover":"/img/technology-sense/optimize_live_room_title.png","subtitle":"技术场景之优化邀请码","author":{"nick":"袁苏东","link":"https://github.com/yuansudong"},"_content":"\n互联网发展至今,人们对多媒体内容的需求从来都没有断过.直播就是其中的一种.随着直播的兴起,各种各样的直播间浮现在人们面前.比如计时付费直播间.\n\n\n\n## 1.问题场景\n\n\n\n直播间服务器,直白点就是房间. 一群具有相同特征人的聚集地.只负责直播间的业务.\n\n\n\n而直播间的一个业务--计时扣费. 即过一段时间,对房间里的看客进行扣费.\n\n\n\n最初,同事采用一个认证连接,一个协程,并且启动定时器的方式进行计时.通过定时器的触发管道.然后收到管道通知后,进行扣费.\n\n\n\n```go\nfunc (s *Session) startBilling(minutes int64) {\n  duration := time.Minute * time.Duration(minutes)\n  s.billingTimer = time.NewTimer(duration)\n  defer s.billingTimer.Stop()\n  for {\n    select {\n    case <-s.billingTimer.C:\n      err := globals.userRepo.BillForTimeRoom(s.user, s.created, minutes, s.room.data)\n      if err != nil {\n        if err == perr.ErrSQLUpdateInvalid {\n          s.notifyGoldNotEnough()\n          s.ShutdownAll()\n          return\n        }\n        log.Printf(\"billing fail for time room=%d, user=%d, minutes =%d\", s.room.data.GetId(), s.user.GetId(), minutes)\n      }\n      s.queueOut(perr.ErrOutofGoldExplicitTs(s.user.GetId(), types.TimeStamp(), 0))\n      s.billingTimer.Reset(duration)\n    case <-s.billShutdown:\n      return\n    }\n  }\n}\n```\n\n\n\n首先,一个认证连接多一个协程. 协程在GO中就意味着内存. \n\n\n\n其次,一个认证连接多一个定时器. 当然, GO中的定时器.不是一个协程一个定时器.\n\n\n\n而是,一个驱动器维持着一个四叉堆.当时间到达,通过一个缓冲容量为1的管道,通知SELECT该定时器管道的协程,让其执行任务.\n\n\n\n如此做法,的确能实现直播间的计时扣费.但是,代价太大了.\n\n\n\n## 解决办法\n\n\n\nREDIS中有一个数据结构,名为有序集合(SORT SET). 经常被用作排行榜的场景.\n\n\n\n但是,该数据结构还可以做一件事,那便是延时队列.或者说定时器.\n\n\n\n即以过期时间戳作为分值,以认证连接的唯一ID作为成员,每次查询以[0,当前时间戳]进行查询,查回来的成员便是到达时间,需要处理扣费的连接.\n\n\n\n如此做,将一个认证连接,一个协程,转移到了一个计时房间,一个计费协程.在一定程度上减少了协程,减少了内存,减少了GC的回收压力.\n\n\n\n但是,此处还需要注意的是,对于轮询REDIS有序集合的频率.对于轮询频率的,我知道的有常数退避和指数退避\n\n\n\n常数退避,即以固定时间休眠,休眠完成之后,再去对redis进行查询操作.\n\n\n\n指数退避,即以1,2,4,4,4,4.... 的方式休眠,休眠之后再去对redis进行查询操作.\n\n\n\n此处,我采用指数退避的方式减少轮询REDIS的频率.\n\n\n\n下面是GOLANG的DEMO实现,达到抛砖引玉的目的.\n\n\n\n```go\n//  需要处理分页问题.\nfunc (o *Object) _CoreBill() {\n  o._WG.Add(1)\n  mRds := globals.GetInstance().GetRedis()\n  min, max, invalid := \"0\", \"\", 0\n  sRdsKey := types.GetRedisBillKey(o._RoomData.RoomID)\n  for {\n    select {\n    case <-o._BillShutdownChan:\n      goto end\n    default:\n      max = fmt.Sprint(types.TimeStamp())\n      suids, err := mRds.ZRangeByScore(\n        context.Background(),\n        sRdsKey,\n        &redis.ZRangeBy{\n          Min: min,\n          Max: max,\n        },\n      ).Result()\n      if err != nil {\n        log.Println(err.Error())\n      }\n      iLength := len(suids)\n      if iLength == 0 {\n        iExp := invalid\n        if invalid > 2 {\n          iExp = 2\n        }\n        time.Sleep((1<<iExp + 1) * time.Second)\n        invalid++\n        continue\n      }\n      invalid = 0\n      iExpire := time.Now().Add(time.Minute).Unix()\n      for _, item := range suids {\n        iIdentidy, _ := strconv.ParseInt(item, 10, 64)\n        if iMem, ok := o._Set.Load(iIdentidy); ok {\n          mMem := iMem.(*_Member)\n          if mMem._Sess.GetUID() != o._RoomData.AnchorID {\n            o._RoomData._BillForTimerRoom(mMem._Sess.GetUID(), 60)\n            if _, err := mRds.ZAdd(\n              context.TODO(),\n              sRdsKey,\n              &redis.Z{\n                Score:  float64(iExpire),\n                Member: mMem._Sess.GetIdentify(),\n              },\n            ).Result(); err != nil {\n              log.Println(err.Error())\n            }\n          }\n        }\n      }\n    }\n  }\nend:\n  o._BillShutdownChan = nil\n  o._WG.Done()\n}\n```\n\n\n\n至此,解决完毕.","source":"_posts/technology-sense-optimize-live-room.md","raw":"---\ntitle: 技术场景之优化邀请码\ncover:  /img/technology-sense/optimize_live_room_title.png\nsubtitle: 技术场景之优化邀请码\ncategories: \"技术场景\"\ntags: \"技术场景\"\nauthor: \n  nick: 袁苏东\n  link: https://github.com/yuansudong\n---\n\n互联网发展至今,人们对多媒体内容的需求从来都没有断过.直播就是其中的一种.随着直播的兴起,各种各样的直播间浮现在人们面前.比如计时付费直播间.\n\n\n\n## 1.问题场景\n\n\n\n直播间服务器,直白点就是房间. 一群具有相同特征人的聚集地.只负责直播间的业务.\n\n\n\n而直播间的一个业务--计时扣费. 即过一段时间,对房间里的看客进行扣费.\n\n\n\n最初,同事采用一个认证连接,一个协程,并且启动定时器的方式进行计时.通过定时器的触发管道.然后收到管道通知后,进行扣费.\n\n\n\n```go\nfunc (s *Session) startBilling(minutes int64) {\n  duration := time.Minute * time.Duration(minutes)\n  s.billingTimer = time.NewTimer(duration)\n  defer s.billingTimer.Stop()\n  for {\n    select {\n    case <-s.billingTimer.C:\n      err := globals.userRepo.BillForTimeRoom(s.user, s.created, minutes, s.room.data)\n      if err != nil {\n        if err == perr.ErrSQLUpdateInvalid {\n          s.notifyGoldNotEnough()\n          s.ShutdownAll()\n          return\n        }\n        log.Printf(\"billing fail for time room=%d, user=%d, minutes =%d\", s.room.data.GetId(), s.user.GetId(), minutes)\n      }\n      s.queueOut(perr.ErrOutofGoldExplicitTs(s.user.GetId(), types.TimeStamp(), 0))\n      s.billingTimer.Reset(duration)\n    case <-s.billShutdown:\n      return\n    }\n  }\n}\n```\n\n\n\n首先,一个认证连接多一个协程. 协程在GO中就意味着内存. \n\n\n\n其次,一个认证连接多一个定时器. 当然, GO中的定时器.不是一个协程一个定时器.\n\n\n\n而是,一个驱动器维持着一个四叉堆.当时间到达,通过一个缓冲容量为1的管道,通知SELECT该定时器管道的协程,让其执行任务.\n\n\n\n如此做法,的确能实现直播间的计时扣费.但是,代价太大了.\n\n\n\n## 解决办法\n\n\n\nREDIS中有一个数据结构,名为有序集合(SORT SET). 经常被用作排行榜的场景.\n\n\n\n但是,该数据结构还可以做一件事,那便是延时队列.或者说定时器.\n\n\n\n即以过期时间戳作为分值,以认证连接的唯一ID作为成员,每次查询以[0,当前时间戳]进行查询,查回来的成员便是到达时间,需要处理扣费的连接.\n\n\n\n如此做,将一个认证连接,一个协程,转移到了一个计时房间,一个计费协程.在一定程度上减少了协程,减少了内存,减少了GC的回收压力.\n\n\n\n但是,此处还需要注意的是,对于轮询REDIS有序集合的频率.对于轮询频率的,我知道的有常数退避和指数退避\n\n\n\n常数退避,即以固定时间休眠,休眠完成之后,再去对redis进行查询操作.\n\n\n\n指数退避,即以1,2,4,4,4,4.... 的方式休眠,休眠之后再去对redis进行查询操作.\n\n\n\n此处,我采用指数退避的方式减少轮询REDIS的频率.\n\n\n\n下面是GOLANG的DEMO实现,达到抛砖引玉的目的.\n\n\n\n```go\n//  需要处理分页问题.\nfunc (o *Object) _CoreBill() {\n  o._WG.Add(1)\n  mRds := globals.GetInstance().GetRedis()\n  min, max, invalid := \"0\", \"\", 0\n  sRdsKey := types.GetRedisBillKey(o._RoomData.RoomID)\n  for {\n    select {\n    case <-o._BillShutdownChan:\n      goto end\n    default:\n      max = fmt.Sprint(types.TimeStamp())\n      suids, err := mRds.ZRangeByScore(\n        context.Background(),\n        sRdsKey,\n        &redis.ZRangeBy{\n          Min: min,\n          Max: max,\n        },\n      ).Result()\n      if err != nil {\n        log.Println(err.Error())\n      }\n      iLength := len(suids)\n      if iLength == 0 {\n        iExp := invalid\n        if invalid > 2 {\n          iExp = 2\n        }\n        time.Sleep((1<<iExp + 1) * time.Second)\n        invalid++\n        continue\n      }\n      invalid = 0\n      iExpire := time.Now().Add(time.Minute).Unix()\n      for _, item := range suids {\n        iIdentidy, _ := strconv.ParseInt(item, 10, 64)\n        if iMem, ok := o._Set.Load(iIdentidy); ok {\n          mMem := iMem.(*_Member)\n          if mMem._Sess.GetUID() != o._RoomData.AnchorID {\n            o._RoomData._BillForTimerRoom(mMem._Sess.GetUID(), 60)\n            if _, err := mRds.ZAdd(\n              context.TODO(),\n              sRdsKey,\n              &redis.Z{\n                Score:  float64(iExpire),\n                Member: mMem._Sess.GetIdentify(),\n              },\n            ).Result(); err != nil {\n              log.Println(err.Error())\n            }\n          }\n        }\n      }\n    }\n  }\nend:\n  o._BillShutdownChan = nil\n  o._WG.Done()\n}\n```\n\n\n\n至此,解决完毕.","slug":"technology-sense-optimize-live-room","published":1,"date":"2021-03-16T18:10:30.271Z","updated":"2021-03-16T20:42:45.976Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmchg4jq001d7gvl6a2k8itl","content":"<p>互联网发展至今,人们对多媒体内容的需求从来都没有断过.直播就是其中的一种.随着直播的兴起,各种各样的直播间浮现在人们面前.比如计时付费直播间.</p>\n<h2 id=\"1-问题场景\"><a href=\"#1-问题场景\" class=\"headerlink\" title=\"1.问题场景\"></a>1.问题场景</h2><p>直播间服务器,直白点就是房间. 一群具有相同特征人的聚集地.只负责直播间的业务.</p>\n<p>而直播间的一个业务–计时扣费. 即过一段时间,对房间里的看客进行扣费.</p>\n<p>最初,同事采用一个认证连接,一个协程,并且启动定时器的方式进行计时.通过定时器的触发管道.然后收到管道通知后,进行扣费.</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *Session)</span> <span class=\"title\">startBilling</span><span class=\"params\">(minutes <span class=\"keyword\">int64</span>)</span></span> &#123;</span><br><span class=\"line\">  duration := time.Minute * time.Duration(minutes)</span><br><span class=\"line\">  s.billingTimer = time.NewTimer(duration)</span><br><span class=\"line\">  <span class=\"keyword\">defer</span> s.billingTimer.Stop()</span><br><span class=\"line\">  <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> &lt;-s.billingTimer.C:</span><br><span class=\"line\">      err := globals.userRepo.BillForTimeRoom(s.user, s.created, minutes, s.room.data)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err == perr.ErrSQLUpdateInvalid &#123;</span><br><span class=\"line\">          s.notifyGoldNotEnough()</span><br><span class=\"line\">          s.ShutdownAll()</span><br><span class=\"line\">          <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        log.Printf(<span class=\"string\">&quot;billing fail for time room=%d, user=%d, minutes =%d&quot;</span>, s.room.data.GetId(), s.user.GetId(), minutes)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      s.queueOut(perr.ErrOutofGoldExplicitTs(s.user.GetId(), types.TimeStamp(), <span class=\"number\">0</span>))</span><br><span class=\"line\">      s.billingTimer.Reset(duration)</span><br><span class=\"line\">    <span class=\"keyword\">case</span> &lt;-s.billShutdown:</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>首先,一个认证连接多一个协程. 协程在GO中就意味着内存. </p>\n<p>其次,一个认证连接多一个定时器. 当然, GO中的定时器.不是一个协程一个定时器.</p>\n<p>而是,一个驱动器维持着一个四叉堆.当时间到达,通过一个缓冲容量为1的管道,通知SELECT该定时器管道的协程,让其执行任务.</p>\n<p>如此做法,的确能实现直播间的计时扣费.但是,代价太大了.</p>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><p>REDIS中有一个数据结构,名为有序集合(SORT SET). 经常被用作排行榜的场景.</p>\n<p>但是,该数据结构还可以做一件事,那便是延时队列.或者说定时器.</p>\n<p>即以过期时间戳作为分值,以认证连接的唯一ID作为成员,每次查询以[0,当前时间戳]进行查询,查回来的成员便是到达时间,需要处理扣费的连接.</p>\n<p>如此做,将一个认证连接,一个协程,转移到了一个计时房间,一个计费协程.在一定程度上减少了协程,减少了内存,减少了GC的回收压力.</p>\n<p>但是,此处还需要注意的是,对于轮询REDIS有序集合的频率.对于轮询频率的,我知道的有常数退避和指数退避</p>\n<p>常数退避,即以固定时间休眠,休眠完成之后,再去对redis进行查询操作.</p>\n<p>指数退避,即以1,2,4,4,4,4…. 的方式休眠,休眠之后再去对redis进行查询操作.</p>\n<p>此处,我采用指数退避的方式减少轮询REDIS的频率.</p>\n<p>下面是GOLANG的DEMO实现,达到抛砖引玉的目的.</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  需要处理分页问题.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(o *Object)</span> _<span class=\"title\">CoreBill</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  o._WG.Add(<span class=\"number\">1</span>)</span><br><span class=\"line\">  mRds := globals.GetInstance().GetRedis()</span><br><span class=\"line\">  min, max, invalid := <span class=\"string\">&quot;0&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"number\">0</span></span><br><span class=\"line\">  sRdsKey := types.GetRedisBillKey(o._RoomData.RoomID)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> &lt;-o._BillShutdownChan:</span><br><span class=\"line\">      <span class=\"keyword\">goto</span> end</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      max = fmt.Sprint(types.TimeStamp())</span><br><span class=\"line\">      suids, err := mRds.ZRangeByScore(</span><br><span class=\"line\">        context.Background(),</span><br><span class=\"line\">        sRdsKey,</span><br><span class=\"line\">        &amp;redis.ZRangeBy&#123;</span><br><span class=\"line\">          Min: min,</span><br><span class=\"line\">          Max: max,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      ).Result()</span><br><span class=\"line\">      <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        log.Println(err.Error())</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      iLength := <span class=\"built_in\">len</span>(suids)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> iLength == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        iExp := invalid</span><br><span class=\"line\">        <span class=\"keyword\">if</span> invalid &gt; <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">          iExp = <span class=\"number\">2</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        time.Sleep((<span class=\"number\">1</span>&lt;&lt;iExp + <span class=\"number\">1</span>) * time.Second)</span><br><span class=\"line\">        invalid++</span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      invalid = <span class=\"number\">0</span></span><br><span class=\"line\">      iExpire := time.Now().Add(time.Minute).Unix()</span><br><span class=\"line\">      <span class=\"keyword\">for</span> _, item := <span class=\"keyword\">range</span> suids &#123;</span><br><span class=\"line\">        iIdentidy, _ := strconv.ParseInt(item, <span class=\"number\">10</span>, <span class=\"number\">64</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> iMem, ok := o._Set.Load(iIdentidy); ok &#123;</span><br><span class=\"line\">          mMem := iMem.(*_Member)</span><br><span class=\"line\">          <span class=\"keyword\">if</span> mMem._Sess.GetUID() != o._RoomData.AnchorID &#123;</span><br><span class=\"line\">            o._RoomData._BillForTimerRoom(mMem._Sess.GetUID(), <span class=\"number\">60</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> _, err := mRds.ZAdd(</span><br><span class=\"line\">              context.TODO(),</span><br><span class=\"line\">              sRdsKey,</span><br><span class=\"line\">              &amp;redis.Z&#123;</span><br><span class=\"line\">                Score:  <span class=\"keyword\">float64</span>(iExpire),</span><br><span class=\"line\">                Member: mMem._Sess.GetIdentify(),</span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">            ).Result(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">              log.Println(err.Error())</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">end:</span><br><span class=\"line\">  o._BillShutdownChan = <span class=\"literal\">nil</span></span><br><span class=\"line\">  o._WG.Done()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>至此,解决完毕.</p>\n","site":{"data":{"contact":[{"title":"github","icon":"icon-github","link":"https://github.com/yuansudong"},{"title":"email","icon":"icon-email","link":"mailto:1145919989@qq.com"},{"title":"qq","icon":"icon-qq","link":"/atom.xml"}],"favicons":["<link rel=\"shortcut icon\" href=\"/img//favicon.ico\">","<link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/img//favicon-16x16.png\">","<link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/img//favicon-32x32.png\">","<link rel=\"icon\" type=\"image/png\" sizes=\"48x48\" href=\"/img//favicon-48x48.png\">","<link rel=\"manifest\" href=\"/img//manifest.json\">","<meta name=\"mobile-web-app-capable\" content=\"yes\">","<meta name=\"theme-color\" content=\"#fff\">","<meta name=\"application-name\">","<link rel=\"apple-touch-icon\" sizes=\"57x57\" href=\"/img//apple-touch-icon-57x57.png\">","<link rel=\"apple-touch-icon\" sizes=\"60x60\" href=\"/img//apple-touch-icon-60x60.png\">","<link rel=\"apple-touch-icon\" sizes=\"72x72\" href=\"/img//apple-touch-icon-72x72.png\">","<link rel=\"apple-touch-icon\" sizes=\"76x76\" href=\"/img//apple-touch-icon-76x76.png\">","<link rel=\"apple-touch-icon\" sizes=\"114x114\" href=\"/img//apple-touch-icon-114x114.png\">","<link rel=\"apple-touch-icon\" sizes=\"120x120\" href=\"/img//apple-touch-icon-120x120.png\">","<link rel=\"apple-touch-icon\" sizes=\"144x144\" href=\"/img//apple-touch-icon-144x144.png\">","<link rel=\"apple-touch-icon\" sizes=\"152x152\" href=\"/img//apple-touch-icon-152x152.png\">","<link rel=\"apple-touch-icon\" sizes=\"167x167\" href=\"/img//apple-touch-icon-167x167.png\">","<link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/img//apple-touch-icon-180x180.png\">","<link rel=\"apple-touch-icon\" sizes=\"1024x1024\" href=\"/img//apple-touch-icon-1024x1024.png\">","<meta name=\"apple-mobile-web-app-capable\" content=\"yes\">","<meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black-translucent\">","<meta name=\"apple-mobile-web-app-title\">","<meta name=\"msapplication-TileColor\" content=\"#fff\">","<meta name=\"msapplication-TileImage\" content=\"/img//mstile-144x144.png\">","<meta name=\"msapplication-config\" content=\"/img//browserconfig.xml\">"]}},"excerpt":"","more":"<p>互联网发展至今,人们对多媒体内容的需求从来都没有断过.直播就是其中的一种.随着直播的兴起,各种各样的直播间浮现在人们面前.比如计时付费直播间.</p>\n<h2 id=\"1-问题场景\"><a href=\"#1-问题场景\" class=\"headerlink\" title=\"1.问题场景\"></a>1.问题场景</h2><p>直播间服务器,直白点就是房间. 一群具有相同特征人的聚集地.只负责直播间的业务.</p>\n<p>而直播间的一个业务–计时扣费. 即过一段时间,对房间里的看客进行扣费.</p>\n<p>最初,同事采用一个认证连接,一个协程,并且启动定时器的方式进行计时.通过定时器的触发管道.然后收到管道通知后,进行扣费.</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *Session)</span> <span class=\"title\">startBilling</span><span class=\"params\">(minutes <span class=\"keyword\">int64</span>)</span></span> &#123;</span><br><span class=\"line\">  duration := time.Minute * time.Duration(minutes)</span><br><span class=\"line\">  s.billingTimer = time.NewTimer(duration)</span><br><span class=\"line\">  <span class=\"keyword\">defer</span> s.billingTimer.Stop()</span><br><span class=\"line\">  <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> &lt;-s.billingTimer.C:</span><br><span class=\"line\">      err := globals.userRepo.BillForTimeRoom(s.user, s.created, minutes, s.room.data)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err == perr.ErrSQLUpdateInvalid &#123;</span><br><span class=\"line\">          s.notifyGoldNotEnough()</span><br><span class=\"line\">          s.ShutdownAll()</span><br><span class=\"line\">          <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        log.Printf(<span class=\"string\">&quot;billing fail for time room=%d, user=%d, minutes =%d&quot;</span>, s.room.data.GetId(), s.user.GetId(), minutes)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      s.queueOut(perr.ErrOutofGoldExplicitTs(s.user.GetId(), types.TimeStamp(), <span class=\"number\">0</span>))</span><br><span class=\"line\">      s.billingTimer.Reset(duration)</span><br><span class=\"line\">    <span class=\"keyword\">case</span> &lt;-s.billShutdown:</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>首先,一个认证连接多一个协程. 协程在GO中就意味着内存. </p>\n<p>其次,一个认证连接多一个定时器. 当然, GO中的定时器.不是一个协程一个定时器.</p>\n<p>而是,一个驱动器维持着一个四叉堆.当时间到达,通过一个缓冲容量为1的管道,通知SELECT该定时器管道的协程,让其执行任务.</p>\n<p>如此做法,的确能实现直播间的计时扣费.但是,代价太大了.</p>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><p>REDIS中有一个数据结构,名为有序集合(SORT SET). 经常被用作排行榜的场景.</p>\n<p>但是,该数据结构还可以做一件事,那便是延时队列.或者说定时器.</p>\n<p>即以过期时间戳作为分值,以认证连接的唯一ID作为成员,每次查询以[0,当前时间戳]进行查询,查回来的成员便是到达时间,需要处理扣费的连接.</p>\n<p>如此做,将一个认证连接,一个协程,转移到了一个计时房间,一个计费协程.在一定程度上减少了协程,减少了内存,减少了GC的回收压力.</p>\n<p>但是,此处还需要注意的是,对于轮询REDIS有序集合的频率.对于轮询频率的,我知道的有常数退避和指数退避</p>\n<p>常数退避,即以固定时间休眠,休眠完成之后,再去对redis进行查询操作.</p>\n<p>指数退避,即以1,2,4,4,4,4…. 的方式休眠,休眠之后再去对redis进行查询操作.</p>\n<p>此处,我采用指数退避的方式减少轮询REDIS的频率.</p>\n<p>下面是GOLANG的DEMO实现,达到抛砖引玉的目的.</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  需要处理分页问题.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(o *Object)</span> _<span class=\"title\">CoreBill</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  o._WG.Add(<span class=\"number\">1</span>)</span><br><span class=\"line\">  mRds := globals.GetInstance().GetRedis()</span><br><span class=\"line\">  min, max, invalid := <span class=\"string\">&quot;0&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"number\">0</span></span><br><span class=\"line\">  sRdsKey := types.GetRedisBillKey(o._RoomData.RoomID)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> &lt;-o._BillShutdownChan:</span><br><span class=\"line\">      <span class=\"keyword\">goto</span> end</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      max = fmt.Sprint(types.TimeStamp())</span><br><span class=\"line\">      suids, err := mRds.ZRangeByScore(</span><br><span class=\"line\">        context.Background(),</span><br><span class=\"line\">        sRdsKey,</span><br><span class=\"line\">        &amp;redis.ZRangeBy&#123;</span><br><span class=\"line\">          Min: min,</span><br><span class=\"line\">          Max: max,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      ).Result()</span><br><span class=\"line\">      <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        log.Println(err.Error())</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      iLength := <span class=\"built_in\">len</span>(suids)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> iLength == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        iExp := invalid</span><br><span class=\"line\">        <span class=\"keyword\">if</span> invalid &gt; <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">          iExp = <span class=\"number\">2</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        time.Sleep((<span class=\"number\">1</span>&lt;&lt;iExp + <span class=\"number\">1</span>) * time.Second)</span><br><span class=\"line\">        invalid++</span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      invalid = <span class=\"number\">0</span></span><br><span class=\"line\">      iExpire := time.Now().Add(time.Minute).Unix()</span><br><span class=\"line\">      <span class=\"keyword\">for</span> _, item := <span class=\"keyword\">range</span> suids &#123;</span><br><span class=\"line\">        iIdentidy, _ := strconv.ParseInt(item, <span class=\"number\">10</span>, <span class=\"number\">64</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> iMem, ok := o._Set.Load(iIdentidy); ok &#123;</span><br><span class=\"line\">          mMem := iMem.(*_Member)</span><br><span class=\"line\">          <span class=\"keyword\">if</span> mMem._Sess.GetUID() != o._RoomData.AnchorID &#123;</span><br><span class=\"line\">            o._RoomData._BillForTimerRoom(mMem._Sess.GetUID(), <span class=\"number\">60</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> _, err := mRds.ZAdd(</span><br><span class=\"line\">              context.TODO(),</span><br><span class=\"line\">              sRdsKey,</span><br><span class=\"line\">              &amp;redis.Z&#123;</span><br><span class=\"line\">                Score:  <span class=\"keyword\">float64</span>(iExpire),</span><br><span class=\"line\">                Member: mMem._Sess.GetIdentify(),</span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">            ).Result(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">              log.Println(err.Error())</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">end:</span><br><span class=\"line\">  o._BillShutdownChan = <span class=\"literal\">nil</span></span><br><span class=\"line\">  o._WG.Done()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>至此,解决完毕.</p>\n"},{"title":"技术场景之优化敏感词屏蔽","cover":"/img/technology-sense/optimize_sensitive_words_title.png","subtitle":"技术场景之优化敏感词屏蔽","author":{"nick":"袁苏东","link":"https://github.com/yuansudong"},"_content":"\n随着国家对互联网管控的加压,一些涉黄,涉爆,涉政的相关词条不允许在网络上传播.\n\n\n\n这一规定的出现,使得一些应用,比如,社交类,游戏类不得不对相关词语进行屏蔽,否则会招到制裁.\n\n\n\n## 1.问题场景\n\n\n\n为了符合相关法律法规,以及运营的需求.我们将敏感词的配置放在了数据库中,以方便运营在后台实时地增减相关词条.\n\n\n\n每当敏感词库更新之后,后台需要通知相关API服务器敏感词有了变化.相关API服务器收到通知后,会通过HTTP协议重新从资源服务器上拉取敏感词,并对该服的敏感词进行更新.\n\n\n\n最开始,敏感词的屏蔽,同事采用的是正则表达式替换.但是,随着敏感词条的增加,一个接口的处理时间达到了4秒之多.\n\n\n\n4秒,已经超出了用户能忍受的极限.优化的脚步不得不提前.\n\n\n\n## 2.解决方案\n\n\n\n通过调研以及测试,最终选择了TrieTree作为优化方案.\n\n\n\n记忆中TrieTree最早出现在算法导论二叉树那章的练习题中,当时没怎么在意,在调研后,才发现,原来它还有如此的作用.\n\n\n\nTrie，又称单词查找树或键树，是一种树形结构，是一种哈希树的变种。\n\n\n\n典型应用是用于统计和排序大量的字符串（但不仅限于字符串），所以经常被搜索引擎系统用于文本词频统计。\n\n\n\n它的优点是：最大限度地减少无谓的字符串比较，查询效率比哈希表高.\n\n\n\n它的特点是: 根节点不包含字符，除根节点外每一个节点都只包含一个字符。\n\n从根节点到某一节点，路径上经过的字符连接起来，为该节点对应的字符串。\n\n每个节点的所有子节点包含的字符都不相同。\n\n\n\n\n\n了解到TrieTree之后,还需要了解golang中rune类型.用过GO的人都知道,GO中的字符串是由rune类型构成的.\n\n\n\n在在源代码的builtin.go文件中,有下面的几行代码定义了rune的实际类型.\n\n\n\n```go\n// rune is an alias for int32 and is equivalent to int32 in all ways. It is\n// used, by convention, to distinguish character values from integer values.\ntype rune = int32\n```\n\n\n\n从上面的代码中,可以看到,rune的实际类型是int32.\n\n\n\n对于数据, 在计算机底层存储都是0和1.字符串也不例外.字符串在转换成byte之后,其实都是一个数值.\n\n英文字符是ASCII码来存储的,占用一个字节.而中国以及日本的常用文字在4千以上,一个字节肯定是存储不了的.\n\n而此时,这些存储不下的文字,会通过unicode存储.也就是两个字节.\n\n但是,你会发现.当按照上面的定义去言明字符串的字节时,是错误的. 比如,下面的这个代码\n\n\n\n```go\npackage main\n\nimport \"log\"\n\nfunc main() {\n\n  strA := \"abcdef\" // 目测为6\n  strB := \"ab哈希哈\"  // 目测为8\n  fmt.Println(\"strA\", len(strA), \"strB\", len(strB))\n}\n```\n\n\n\n输出结果为:\n\n\n\n```\nstrA 6 strB 11\n```\n\n\n\n惊讶吧? 竟然是11.\n\n\n\n至于出现11的原因,这和该字符的编码有关系.经过测试,得出下面的结论.\n\n\n\n0 ~ 2的8次方            1个字节\n\n2的8次方 ~ 2的16次方    2个字节\n\n2的16次方  ~ 2的24次方  3个字节\n\n2的24次方 ~ 2的32次方   4个字节\n\n\n\n\"哈\"的编码为21704,占用3个字节. \"希\"的编码为24076,占用3个字节.而a,b皆占用一个字节.所以,最后求出的长度为11\n\n\n\n## 3.TireTree实现\n\n\n\n### 01.结点定义\n\n\n\n```go\n// _Node Trie树上的一个节点.\ntype _Node struct {\n  isRootNode bool // 用于表示是否是bool结点\n  isPathEnd  bool // 用于表示该结点是否是末尾结点\n  Character  rune // 当前结点所存储的字符\n  Children   map[rune]*_Node // 当前字符后面跟随的有那些字符\n}\n```\n\n\n\n### 02.TireTree定义\n\n\n\n```go\n// _TrieTree 短语组成的Trie树.\ntype _TrieTree struct {\n  Root *_Node // 描述一个根结点\n}\n```\n\n\n\n### 03.增加\n\n\n\n```go\nfunc (tree *_TrieTree) add(word string) {\n  var current = tree.Root\n  var runes = []rune(word)\n  for position := 0; position < len(runes); position++ {\n    r := runes[position]\n    if next, ok := current.Children[r]; ok {\n      current = next\n    } else {\n      newNode := _NewNode(r)\n      current.Children[r] = newNode\n      current = newNode\n    }\n    if position == len(runes)-1 {\n      current.isPathEnd = true\n    }\n  }\n}\n```\n\n\n\n### 04.删除\n\n\n\n```go\n\n// del 删除单个\nfunc (tree *_TrieTree) del(word string) {\n  var current = tree.Root\n  var runes = []rune(word)\n  for position := 0; position < len(runes); position++ {\n    r := runes[position]\n    if next, ok := current.Children[r]; !ok {\n      return\n    } else {\n      current = next\n    }\n    if position == len(runes)-1 {\n      current.SoftDel()\n    }\n  }\n}\n```\n\n\n\n### 05.替换\n\n\n\n```go\n// Replace 词语替换\nfunc (tree *_TrieTree) Replace(text string, character rune) string {\n  var (\n    parent  = tree.Root\n    current *_Node\n    runes   = []rune(text)\n    length  = len(runes)\n    left    = 0\n    found   bool\n  )\n\n  for position := 0; position < len(runes); position++ {\n    current, found = parent.Children[runes[position]]\n\n    if !found || (!current.IsPathEnd() && position == length-1) {\n      parent = tree.Root\n      position = left\n      left++\n      continue\n    }\n    if current.IsPathEnd() && left <= position {\n      for i := left; i <= position; i++ {\n        runes[i] = character\n      }\n    }\n    parent = current\n  }\n  return string(runes)\n}\n```\n\n\n\n### 06.查找\n\n\n\n```go\n\nfunc (tree *_TrieTree) Find(text string) (bool, string) {\n  const (\n    Empty = \"\"\n  )\n  var (\n    parent  = tree.Root\n    current *_Node\n    runes   = []rune(text)\n    length  = len(runes)\n    left    = 0\n    found   bool\n  )\n  for position := 0; position < len(runes); position++ {\n    current, found = parent.Children[runes[position]]\n    if !found || (!current.IsPathEnd() && position == length-1) {\n      parent = tree.Root\n      position = left\n      left++\n      continue\n    }\n    if current.IsPathEnd() && left <= position {\n      return false, string(runes[left : position+1])\n    }\n    parent = current\n  }\n  return true, Empty\n}\n```\n\n\n\n\n\n更新之后,接口从4s多,转变为毫秒级","source":"_posts/technology-sense-optimize-sensitive-words.md","raw":"---\ntitle: 技术场景之优化敏感词屏蔽\ncover:  /img/technology-sense/optimize_sensitive_words_title.png\nsubtitle: 技术场景之优化敏感词屏蔽\ncategories: \"技术场景\"\ntags: \"技术场景\"\nauthor: \n  nick: 袁苏东\n  link: https://github.com/yuansudong\n---\n\n随着国家对互联网管控的加压,一些涉黄,涉爆,涉政的相关词条不允许在网络上传播.\n\n\n\n这一规定的出现,使得一些应用,比如,社交类,游戏类不得不对相关词语进行屏蔽,否则会招到制裁.\n\n\n\n## 1.问题场景\n\n\n\n为了符合相关法律法规,以及运营的需求.我们将敏感词的配置放在了数据库中,以方便运营在后台实时地增减相关词条.\n\n\n\n每当敏感词库更新之后,后台需要通知相关API服务器敏感词有了变化.相关API服务器收到通知后,会通过HTTP协议重新从资源服务器上拉取敏感词,并对该服的敏感词进行更新.\n\n\n\n最开始,敏感词的屏蔽,同事采用的是正则表达式替换.但是,随着敏感词条的增加,一个接口的处理时间达到了4秒之多.\n\n\n\n4秒,已经超出了用户能忍受的极限.优化的脚步不得不提前.\n\n\n\n## 2.解决方案\n\n\n\n通过调研以及测试,最终选择了TrieTree作为优化方案.\n\n\n\n记忆中TrieTree最早出现在算法导论二叉树那章的练习题中,当时没怎么在意,在调研后,才发现,原来它还有如此的作用.\n\n\n\nTrie，又称单词查找树或键树，是一种树形结构，是一种哈希树的变种。\n\n\n\n典型应用是用于统计和排序大量的字符串（但不仅限于字符串），所以经常被搜索引擎系统用于文本词频统计。\n\n\n\n它的优点是：最大限度地减少无谓的字符串比较，查询效率比哈希表高.\n\n\n\n它的特点是: 根节点不包含字符，除根节点外每一个节点都只包含一个字符。\n\n从根节点到某一节点，路径上经过的字符连接起来，为该节点对应的字符串。\n\n每个节点的所有子节点包含的字符都不相同。\n\n\n\n\n\n了解到TrieTree之后,还需要了解golang中rune类型.用过GO的人都知道,GO中的字符串是由rune类型构成的.\n\n\n\n在在源代码的builtin.go文件中,有下面的几行代码定义了rune的实际类型.\n\n\n\n```go\n// rune is an alias for int32 and is equivalent to int32 in all ways. It is\n// used, by convention, to distinguish character values from integer values.\ntype rune = int32\n```\n\n\n\n从上面的代码中,可以看到,rune的实际类型是int32.\n\n\n\n对于数据, 在计算机底层存储都是0和1.字符串也不例外.字符串在转换成byte之后,其实都是一个数值.\n\n英文字符是ASCII码来存储的,占用一个字节.而中国以及日本的常用文字在4千以上,一个字节肯定是存储不了的.\n\n而此时,这些存储不下的文字,会通过unicode存储.也就是两个字节.\n\n但是,你会发现.当按照上面的定义去言明字符串的字节时,是错误的. 比如,下面的这个代码\n\n\n\n```go\npackage main\n\nimport \"log\"\n\nfunc main() {\n\n  strA := \"abcdef\" // 目测为6\n  strB := \"ab哈希哈\"  // 目测为8\n  fmt.Println(\"strA\", len(strA), \"strB\", len(strB))\n}\n```\n\n\n\n输出结果为:\n\n\n\n```\nstrA 6 strB 11\n```\n\n\n\n惊讶吧? 竟然是11.\n\n\n\n至于出现11的原因,这和该字符的编码有关系.经过测试,得出下面的结论.\n\n\n\n0 ~ 2的8次方            1个字节\n\n2的8次方 ~ 2的16次方    2个字节\n\n2的16次方  ~ 2的24次方  3个字节\n\n2的24次方 ~ 2的32次方   4个字节\n\n\n\n\"哈\"的编码为21704,占用3个字节. \"希\"的编码为24076,占用3个字节.而a,b皆占用一个字节.所以,最后求出的长度为11\n\n\n\n## 3.TireTree实现\n\n\n\n### 01.结点定义\n\n\n\n```go\n// _Node Trie树上的一个节点.\ntype _Node struct {\n  isRootNode bool // 用于表示是否是bool结点\n  isPathEnd  bool // 用于表示该结点是否是末尾结点\n  Character  rune // 当前结点所存储的字符\n  Children   map[rune]*_Node // 当前字符后面跟随的有那些字符\n}\n```\n\n\n\n### 02.TireTree定义\n\n\n\n```go\n// _TrieTree 短语组成的Trie树.\ntype _TrieTree struct {\n  Root *_Node // 描述一个根结点\n}\n```\n\n\n\n### 03.增加\n\n\n\n```go\nfunc (tree *_TrieTree) add(word string) {\n  var current = tree.Root\n  var runes = []rune(word)\n  for position := 0; position < len(runes); position++ {\n    r := runes[position]\n    if next, ok := current.Children[r]; ok {\n      current = next\n    } else {\n      newNode := _NewNode(r)\n      current.Children[r] = newNode\n      current = newNode\n    }\n    if position == len(runes)-1 {\n      current.isPathEnd = true\n    }\n  }\n}\n```\n\n\n\n### 04.删除\n\n\n\n```go\n\n// del 删除单个\nfunc (tree *_TrieTree) del(word string) {\n  var current = tree.Root\n  var runes = []rune(word)\n  for position := 0; position < len(runes); position++ {\n    r := runes[position]\n    if next, ok := current.Children[r]; !ok {\n      return\n    } else {\n      current = next\n    }\n    if position == len(runes)-1 {\n      current.SoftDel()\n    }\n  }\n}\n```\n\n\n\n### 05.替换\n\n\n\n```go\n// Replace 词语替换\nfunc (tree *_TrieTree) Replace(text string, character rune) string {\n  var (\n    parent  = tree.Root\n    current *_Node\n    runes   = []rune(text)\n    length  = len(runes)\n    left    = 0\n    found   bool\n  )\n\n  for position := 0; position < len(runes); position++ {\n    current, found = parent.Children[runes[position]]\n\n    if !found || (!current.IsPathEnd() && position == length-1) {\n      parent = tree.Root\n      position = left\n      left++\n      continue\n    }\n    if current.IsPathEnd() && left <= position {\n      for i := left; i <= position; i++ {\n        runes[i] = character\n      }\n    }\n    parent = current\n  }\n  return string(runes)\n}\n```\n\n\n\n### 06.查找\n\n\n\n```go\n\nfunc (tree *_TrieTree) Find(text string) (bool, string) {\n  const (\n    Empty = \"\"\n  )\n  var (\n    parent  = tree.Root\n    current *_Node\n    runes   = []rune(text)\n    length  = len(runes)\n    left    = 0\n    found   bool\n  )\n  for position := 0; position < len(runes); position++ {\n    current, found = parent.Children[runes[position]]\n    if !found || (!current.IsPathEnd() && position == length-1) {\n      parent = tree.Root\n      position = left\n      left++\n      continue\n    }\n    if current.IsPathEnd() && left <= position {\n      return false, string(runes[left : position+1])\n    }\n    parent = current\n  }\n  return true, Empty\n}\n```\n\n\n\n\n\n更新之后,接口从4s多,转变为毫秒级","slug":"technology-sense-optimize-sensitive-words","published":1,"date":"2021-03-16T17:48:46.395Z","updated":"2021-03-16T20:46:41.758Z","_id":"ckmchg4ju001h7gvlb9d97461","comments":1,"layout":"post","photos":[],"link":"","content":"<p>随着国家对互联网管控的加压,一些涉黄,涉爆,涉政的相关词条不允许在网络上传播.</p>\n<p>这一规定的出现,使得一些应用,比如,社交类,游戏类不得不对相关词语进行屏蔽,否则会招到制裁.</p>\n<h2 id=\"1-问题场景\"><a href=\"#1-问题场景\" class=\"headerlink\" title=\"1.问题场景\"></a>1.问题场景</h2><p>为了符合相关法律法规,以及运营的需求.我们将敏感词的配置放在了数据库中,以方便运营在后台实时地增减相关词条.</p>\n<p>每当敏感词库更新之后,后台需要通知相关API服务器敏感词有了变化.相关API服务器收到通知后,会通过HTTP协议重新从资源服务器上拉取敏感词,并对该服的敏感词进行更新.</p>\n<p>最开始,敏感词的屏蔽,同事采用的是正则表达式替换.但是,随着敏感词条的增加,一个接口的处理时间达到了4秒之多.</p>\n<p>4秒,已经超出了用户能忍受的极限.优化的脚步不得不提前.</p>\n<h2 id=\"2-解决方案\"><a href=\"#2-解决方案\" class=\"headerlink\" title=\"2.解决方案\"></a>2.解决方案</h2><p>通过调研以及测试,最终选择了TrieTree作为优化方案.</p>\n<p>记忆中TrieTree最早出现在算法导论二叉树那章的练习题中,当时没怎么在意,在调研后,才发现,原来它还有如此的作用.</p>\n<p>Trie，又称单词查找树或键树，是一种树形结构，是一种哈希树的变种。</p>\n<p>典型应用是用于统计和排序大量的字符串（但不仅限于字符串），所以经常被搜索引擎系统用于文本词频统计。</p>\n<p>它的优点是：最大限度地减少无谓的字符串比较，查询效率比哈希表高.</p>\n<p>它的特点是: 根节点不包含字符，除根节点外每一个节点都只包含一个字符。</p>\n<p>从根节点到某一节点，路径上经过的字符连接起来，为该节点对应的字符串。</p>\n<p>每个节点的所有子节点包含的字符都不相同。</p>\n<p>了解到TrieTree之后,还需要了解golang中rune类型.用过GO的人都知道,GO中的字符串是由rune类型构成的.</p>\n<p>在在源代码的builtin.go文件中,有下面的几行代码定义了rune的实际类型.</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// rune is an alias for int32 and is equivalent to int32 in all ways. It is</span></span><br><span class=\"line\"><span class=\"comment\">// used, by convention, to distinguish character values from integer values.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"keyword\">rune</span> = <span class=\"keyword\">int32</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>从上面的代码中,可以看到,rune的实际类型是int32.</p>\n<p>对于数据, 在计算机底层存储都是0和1.字符串也不例外.字符串在转换成byte之后,其实都是一个数值.</p>\n<p>英文字符是ASCII码来存储的,占用一个字节.而中国以及日本的常用文字在4千以上,一个字节肯定是存储不了的.</p>\n<p>而此时,这些存储不下的文字,会通过unicode存储.也就是两个字节.</p>\n<p>但是,你会发现.当按照上面的定义去言明字符串的字节时,是错误的. 比如,下面的这个代码</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  strA := <span class=\"string\">&quot;abcdef&quot;</span> <span class=\"comment\">// 目测为6</span></span><br><span class=\"line\">  strB := <span class=\"string\">&quot;ab哈希哈&quot;</span>  <span class=\"comment\">// 目测为8</span></span><br><span class=\"line\">  fmt.Println(<span class=\"string\">&quot;strA&quot;</span>, <span class=\"built_in\">len</span>(strA), <span class=\"string\">&quot;strB&quot;</span>, <span class=\"built_in\">len</span>(strB))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>输出结果为:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strA 6 strB 11</span><br></pre></td></tr></table></figure>\n\n\n\n<p>惊讶吧? 竟然是11.</p>\n<p>至于出现11的原因,这和该字符的编码有关系.经过测试,得出下面的结论.</p>\n<p>0 ~ 2的8次方            1个字节</p>\n<p>2的8次方 ~ 2的16次方    2个字节</p>\n<p>2的16次方  ~ 2的24次方  3个字节</p>\n<p>2的24次方 ~ 2的32次方   4个字节</p>\n<p>“哈”的编码为21704,占用3个字节. “希”的编码为24076,占用3个字节.而a,b皆占用一个字节.所以,最后求出的长度为11</p>\n<h2 id=\"3-TireTree实现\"><a href=\"#3-TireTree实现\" class=\"headerlink\" title=\"3.TireTree实现\"></a>3.TireTree实现</h2><h3 id=\"01-结点定义\"><a href=\"#01-结点定义\" class=\"headerlink\" title=\"01.结点定义\"></a>01.结点定义</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// _Node Trie树上的一个节点.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> _Node <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  isRootNode <span class=\"keyword\">bool</span> <span class=\"comment\">// 用于表示是否是bool结点</span></span><br><span class=\"line\">  isPathEnd  <span class=\"keyword\">bool</span> <span class=\"comment\">// 用于表示该结点是否是末尾结点</span></span><br><span class=\"line\">  Character  <span class=\"keyword\">rune</span> <span class=\"comment\">// 当前结点所存储的字符</span></span><br><span class=\"line\">  Children   <span class=\"keyword\">map</span>[<span class=\"keyword\">rune</span>]*_Node <span class=\"comment\">// 当前字符后面跟随的有那些字符</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"02-TireTree定义\"><a href=\"#02-TireTree定义\" class=\"headerlink\" title=\"02.TireTree定义\"></a>02.TireTree定义</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// _TrieTree 短语组成的Trie树.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> _TrieTree <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  Root *_Node <span class=\"comment\">// 描述一个根结点</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"03-增加\"><a href=\"#03-增加\" class=\"headerlink\" title=\"03.增加\"></a>03.增加</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(tree *_TrieTree)</span> <span class=\"title\">add</span><span class=\"params\">(word <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> current = tree.Root</span><br><span class=\"line\">  <span class=\"keyword\">var</span> runes = []<span class=\"keyword\">rune</span>(word)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> position := <span class=\"number\">0</span>; position &lt; <span class=\"built_in\">len</span>(runes); position++ &#123;</span><br><span class=\"line\">    r := runes[position]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> next, ok := current.Children[r]; ok &#123;</span><br><span class=\"line\">      current = next</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      newNode := _NewNode(r)</span><br><span class=\"line\">      current.Children[r] = newNode</span><br><span class=\"line\">      current = newNode</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> position == <span class=\"built_in\">len</span>(runes)<span class=\"number\">-1</span> &#123;</span><br><span class=\"line\">      current.isPathEnd = <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"04-删除\"><a href=\"#04-删除\" class=\"headerlink\" title=\"04.删除\"></a>04.删除</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// del 删除单个</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(tree *_TrieTree)</span> <span class=\"title\">del</span><span class=\"params\">(word <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> current = tree.Root</span><br><span class=\"line\">  <span class=\"keyword\">var</span> runes = []<span class=\"keyword\">rune</span>(word)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> position := <span class=\"number\">0</span>; position &lt; <span class=\"built_in\">len</span>(runes); position++ &#123;</span><br><span class=\"line\">    r := runes[position]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> next, ok := current.Children[r]; !ok &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      current = next</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> position == <span class=\"built_in\">len</span>(runes)<span class=\"number\">-1</span> &#123;</span><br><span class=\"line\">      current.SoftDel()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"05-替换\"><a href=\"#05-替换\" class=\"headerlink\" title=\"05.替换\"></a>05.替换</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Replace 词语替换</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(tree *_TrieTree)</span> <span class=\"title\">Replace</span><span class=\"params\">(text <span class=\"keyword\">string</span>, character <span class=\"keyword\">rune</span>)</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> (</span><br><span class=\"line\">    parent  = tree.Root</span><br><span class=\"line\">    current *_Node</span><br><span class=\"line\">    runes   = []<span class=\"keyword\">rune</span>(text)</span><br><span class=\"line\">    length  = <span class=\"built_in\">len</span>(runes)</span><br><span class=\"line\">    left    = <span class=\"number\">0</span></span><br><span class=\"line\">    found   <span class=\"keyword\">bool</span></span><br><span class=\"line\">  )</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> position := <span class=\"number\">0</span>; position &lt; <span class=\"built_in\">len</span>(runes); position++ &#123;</span><br><span class=\"line\">    current, found = parent.Children[runes[position]]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> !found || (!current.IsPathEnd() &amp;&amp; position == length<span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      parent = tree.Root</span><br><span class=\"line\">      position = left</span><br><span class=\"line\">      left++</span><br><span class=\"line\">      <span class=\"keyword\">continue</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> current.IsPathEnd() &amp;&amp; left &lt;= position &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> i := left; i &lt;= position; i++ &#123;</span><br><span class=\"line\">        runes[i] = character</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    parent = current</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">string</span>(runes)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"06-查找\"><a href=\"#06-查找\" class=\"headerlink\" title=\"06.查找\"></a>06.查找</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(tree *_TrieTree)</span> <span class=\"title\">Find</span><span class=\"params\">(text <span class=\"keyword\">string</span>)</span> <span class=\"params\">(<span class=\"keyword\">bool</span>, <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> (</span><br><span class=\"line\">    Empty = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">  )</span><br><span class=\"line\">  <span class=\"keyword\">var</span> (</span><br><span class=\"line\">    parent  = tree.Root</span><br><span class=\"line\">    current *_Node</span><br><span class=\"line\">    runes   = []<span class=\"keyword\">rune</span>(text)</span><br><span class=\"line\">    length  = <span class=\"built_in\">len</span>(runes)</span><br><span class=\"line\">    left    = <span class=\"number\">0</span></span><br><span class=\"line\">    found   <span class=\"keyword\">bool</span></span><br><span class=\"line\">  )</span><br><span class=\"line\">  <span class=\"keyword\">for</span> position := <span class=\"number\">0</span>; position &lt; <span class=\"built_in\">len</span>(runes); position++ &#123;</span><br><span class=\"line\">    current, found = parent.Children[runes[position]]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> !found || (!current.IsPathEnd() &amp;&amp; position == length<span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      parent = tree.Root</span><br><span class=\"line\">      position = left</span><br><span class=\"line\">      left++</span><br><span class=\"line\">      <span class=\"keyword\">continue</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> current.IsPathEnd() &amp;&amp; left &lt;= position &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>, <span class=\"keyword\">string</span>(runes[left : position+<span class=\"number\">1</span>])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    parent = current</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>, Empty</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>更新之后,接口从4s多,转变为毫秒级</p>\n","site":{"data":{"contact":[{"title":"github","icon":"icon-github","link":"https://github.com/yuansudong"},{"title":"email","icon":"icon-email","link":"mailto:1145919989@qq.com"},{"title":"qq","icon":"icon-qq","link":"/atom.xml"}],"favicons":["<link rel=\"shortcut icon\" href=\"/img//favicon.ico\">","<link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/img//favicon-16x16.png\">","<link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/img//favicon-32x32.png\">","<link rel=\"icon\" type=\"image/png\" sizes=\"48x48\" href=\"/img//favicon-48x48.png\">","<link rel=\"manifest\" href=\"/img//manifest.json\">","<meta name=\"mobile-web-app-capable\" content=\"yes\">","<meta name=\"theme-color\" content=\"#fff\">","<meta name=\"application-name\">","<link rel=\"apple-touch-icon\" sizes=\"57x57\" href=\"/img//apple-touch-icon-57x57.png\">","<link rel=\"apple-touch-icon\" sizes=\"60x60\" href=\"/img//apple-touch-icon-60x60.png\">","<link rel=\"apple-touch-icon\" sizes=\"72x72\" href=\"/img//apple-touch-icon-72x72.png\">","<link rel=\"apple-touch-icon\" sizes=\"76x76\" href=\"/img//apple-touch-icon-76x76.png\">","<link rel=\"apple-touch-icon\" sizes=\"114x114\" href=\"/img//apple-touch-icon-114x114.png\">","<link rel=\"apple-touch-icon\" sizes=\"120x120\" href=\"/img//apple-touch-icon-120x120.png\">","<link rel=\"apple-touch-icon\" sizes=\"144x144\" href=\"/img//apple-touch-icon-144x144.png\">","<link rel=\"apple-touch-icon\" sizes=\"152x152\" href=\"/img//apple-touch-icon-152x152.png\">","<link rel=\"apple-touch-icon\" sizes=\"167x167\" href=\"/img//apple-touch-icon-167x167.png\">","<link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/img//apple-touch-icon-180x180.png\">","<link rel=\"apple-touch-icon\" sizes=\"1024x1024\" href=\"/img//apple-touch-icon-1024x1024.png\">","<meta name=\"apple-mobile-web-app-capable\" content=\"yes\">","<meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black-translucent\">","<meta name=\"apple-mobile-web-app-title\">","<meta name=\"msapplication-TileColor\" content=\"#fff\">","<meta name=\"msapplication-TileImage\" content=\"/img//mstile-144x144.png\">","<meta name=\"msapplication-config\" content=\"/img//browserconfig.xml\">"]}},"excerpt":"","more":"<p>随着国家对互联网管控的加压,一些涉黄,涉爆,涉政的相关词条不允许在网络上传播.</p>\n<p>这一规定的出现,使得一些应用,比如,社交类,游戏类不得不对相关词语进行屏蔽,否则会招到制裁.</p>\n<h2 id=\"1-问题场景\"><a href=\"#1-问题场景\" class=\"headerlink\" title=\"1.问题场景\"></a>1.问题场景</h2><p>为了符合相关法律法规,以及运营的需求.我们将敏感词的配置放在了数据库中,以方便运营在后台实时地增减相关词条.</p>\n<p>每当敏感词库更新之后,后台需要通知相关API服务器敏感词有了变化.相关API服务器收到通知后,会通过HTTP协议重新从资源服务器上拉取敏感词,并对该服的敏感词进行更新.</p>\n<p>最开始,敏感词的屏蔽,同事采用的是正则表达式替换.但是,随着敏感词条的增加,一个接口的处理时间达到了4秒之多.</p>\n<p>4秒,已经超出了用户能忍受的极限.优化的脚步不得不提前.</p>\n<h2 id=\"2-解决方案\"><a href=\"#2-解决方案\" class=\"headerlink\" title=\"2.解决方案\"></a>2.解决方案</h2><p>通过调研以及测试,最终选择了TrieTree作为优化方案.</p>\n<p>记忆中TrieTree最早出现在算法导论二叉树那章的练习题中,当时没怎么在意,在调研后,才发现,原来它还有如此的作用.</p>\n<p>Trie，又称单词查找树或键树，是一种树形结构，是一种哈希树的变种。</p>\n<p>典型应用是用于统计和排序大量的字符串（但不仅限于字符串），所以经常被搜索引擎系统用于文本词频统计。</p>\n<p>它的优点是：最大限度地减少无谓的字符串比较，查询效率比哈希表高.</p>\n<p>它的特点是: 根节点不包含字符，除根节点外每一个节点都只包含一个字符。</p>\n<p>从根节点到某一节点，路径上经过的字符连接起来，为该节点对应的字符串。</p>\n<p>每个节点的所有子节点包含的字符都不相同。</p>\n<p>了解到TrieTree之后,还需要了解golang中rune类型.用过GO的人都知道,GO中的字符串是由rune类型构成的.</p>\n<p>在在源代码的builtin.go文件中,有下面的几行代码定义了rune的实际类型.</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// rune is an alias for int32 and is equivalent to int32 in all ways. It is</span></span><br><span class=\"line\"><span class=\"comment\">// used, by convention, to distinguish character values from integer values.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"keyword\">rune</span> = <span class=\"keyword\">int32</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>从上面的代码中,可以看到,rune的实际类型是int32.</p>\n<p>对于数据, 在计算机底层存储都是0和1.字符串也不例外.字符串在转换成byte之后,其实都是一个数值.</p>\n<p>英文字符是ASCII码来存储的,占用一个字节.而中国以及日本的常用文字在4千以上,一个字节肯定是存储不了的.</p>\n<p>而此时,这些存储不下的文字,会通过unicode存储.也就是两个字节.</p>\n<p>但是,你会发现.当按照上面的定义去言明字符串的字节时,是错误的. 比如,下面的这个代码</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  strA := <span class=\"string\">&quot;abcdef&quot;</span> <span class=\"comment\">// 目测为6</span></span><br><span class=\"line\">  strB := <span class=\"string\">&quot;ab哈希哈&quot;</span>  <span class=\"comment\">// 目测为8</span></span><br><span class=\"line\">  fmt.Println(<span class=\"string\">&quot;strA&quot;</span>, <span class=\"built_in\">len</span>(strA), <span class=\"string\">&quot;strB&quot;</span>, <span class=\"built_in\">len</span>(strB))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>输出结果为:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strA 6 strB 11</span><br></pre></td></tr></table></figure>\n\n\n\n<p>惊讶吧? 竟然是11.</p>\n<p>至于出现11的原因,这和该字符的编码有关系.经过测试,得出下面的结论.</p>\n<p>0 ~ 2的8次方            1个字节</p>\n<p>2的8次方 ~ 2的16次方    2个字节</p>\n<p>2的16次方  ~ 2的24次方  3个字节</p>\n<p>2的24次方 ~ 2的32次方   4个字节</p>\n<p>“哈”的编码为21704,占用3个字节. “希”的编码为24076,占用3个字节.而a,b皆占用一个字节.所以,最后求出的长度为11</p>\n<h2 id=\"3-TireTree实现\"><a href=\"#3-TireTree实现\" class=\"headerlink\" title=\"3.TireTree实现\"></a>3.TireTree实现</h2><h3 id=\"01-结点定义\"><a href=\"#01-结点定义\" class=\"headerlink\" title=\"01.结点定义\"></a>01.结点定义</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// _Node Trie树上的一个节点.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> _Node <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  isRootNode <span class=\"keyword\">bool</span> <span class=\"comment\">// 用于表示是否是bool结点</span></span><br><span class=\"line\">  isPathEnd  <span class=\"keyword\">bool</span> <span class=\"comment\">// 用于表示该结点是否是末尾结点</span></span><br><span class=\"line\">  Character  <span class=\"keyword\">rune</span> <span class=\"comment\">// 当前结点所存储的字符</span></span><br><span class=\"line\">  Children   <span class=\"keyword\">map</span>[<span class=\"keyword\">rune</span>]*_Node <span class=\"comment\">// 当前字符后面跟随的有那些字符</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"02-TireTree定义\"><a href=\"#02-TireTree定义\" class=\"headerlink\" title=\"02.TireTree定义\"></a>02.TireTree定义</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// _TrieTree 短语组成的Trie树.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> _TrieTree <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  Root *_Node <span class=\"comment\">// 描述一个根结点</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"03-增加\"><a href=\"#03-增加\" class=\"headerlink\" title=\"03.增加\"></a>03.增加</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(tree *_TrieTree)</span> <span class=\"title\">add</span><span class=\"params\">(word <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> current = tree.Root</span><br><span class=\"line\">  <span class=\"keyword\">var</span> runes = []<span class=\"keyword\">rune</span>(word)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> position := <span class=\"number\">0</span>; position &lt; <span class=\"built_in\">len</span>(runes); position++ &#123;</span><br><span class=\"line\">    r := runes[position]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> next, ok := current.Children[r]; ok &#123;</span><br><span class=\"line\">      current = next</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      newNode := _NewNode(r)</span><br><span class=\"line\">      current.Children[r] = newNode</span><br><span class=\"line\">      current = newNode</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> position == <span class=\"built_in\">len</span>(runes)<span class=\"number\">-1</span> &#123;</span><br><span class=\"line\">      current.isPathEnd = <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"04-删除\"><a href=\"#04-删除\" class=\"headerlink\" title=\"04.删除\"></a>04.删除</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// del 删除单个</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(tree *_TrieTree)</span> <span class=\"title\">del</span><span class=\"params\">(word <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> current = tree.Root</span><br><span class=\"line\">  <span class=\"keyword\">var</span> runes = []<span class=\"keyword\">rune</span>(word)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> position := <span class=\"number\">0</span>; position &lt; <span class=\"built_in\">len</span>(runes); position++ &#123;</span><br><span class=\"line\">    r := runes[position]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> next, ok := current.Children[r]; !ok &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      current = next</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> position == <span class=\"built_in\">len</span>(runes)<span class=\"number\">-1</span> &#123;</span><br><span class=\"line\">      current.SoftDel()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"05-替换\"><a href=\"#05-替换\" class=\"headerlink\" title=\"05.替换\"></a>05.替换</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Replace 词语替换</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(tree *_TrieTree)</span> <span class=\"title\">Replace</span><span class=\"params\">(text <span class=\"keyword\">string</span>, character <span class=\"keyword\">rune</span>)</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> (</span><br><span class=\"line\">    parent  = tree.Root</span><br><span class=\"line\">    current *_Node</span><br><span class=\"line\">    runes   = []<span class=\"keyword\">rune</span>(text)</span><br><span class=\"line\">    length  = <span class=\"built_in\">len</span>(runes)</span><br><span class=\"line\">    left    = <span class=\"number\">0</span></span><br><span class=\"line\">    found   <span class=\"keyword\">bool</span></span><br><span class=\"line\">  )</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> position := <span class=\"number\">0</span>; position &lt; <span class=\"built_in\">len</span>(runes); position++ &#123;</span><br><span class=\"line\">    current, found = parent.Children[runes[position]]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> !found || (!current.IsPathEnd() &amp;&amp; position == length<span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      parent = tree.Root</span><br><span class=\"line\">      position = left</span><br><span class=\"line\">      left++</span><br><span class=\"line\">      <span class=\"keyword\">continue</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> current.IsPathEnd() &amp;&amp; left &lt;= position &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> i := left; i &lt;= position; i++ &#123;</span><br><span class=\"line\">        runes[i] = character</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    parent = current</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">string</span>(runes)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"06-查找\"><a href=\"#06-查找\" class=\"headerlink\" title=\"06.查找\"></a>06.查找</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(tree *_TrieTree)</span> <span class=\"title\">Find</span><span class=\"params\">(text <span class=\"keyword\">string</span>)</span> <span class=\"params\">(<span class=\"keyword\">bool</span>, <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> (</span><br><span class=\"line\">    Empty = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">  )</span><br><span class=\"line\">  <span class=\"keyword\">var</span> (</span><br><span class=\"line\">    parent  = tree.Root</span><br><span class=\"line\">    current *_Node</span><br><span class=\"line\">    runes   = []<span class=\"keyword\">rune</span>(text)</span><br><span class=\"line\">    length  = <span class=\"built_in\">len</span>(runes)</span><br><span class=\"line\">    left    = <span class=\"number\">0</span></span><br><span class=\"line\">    found   <span class=\"keyword\">bool</span></span><br><span class=\"line\">  )</span><br><span class=\"line\">  <span class=\"keyword\">for</span> position := <span class=\"number\">0</span>; position &lt; <span class=\"built_in\">len</span>(runes); position++ &#123;</span><br><span class=\"line\">    current, found = parent.Children[runes[position]]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> !found || (!current.IsPathEnd() &amp;&amp; position == length<span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      parent = tree.Root</span><br><span class=\"line\">      position = left</span><br><span class=\"line\">      left++</span><br><span class=\"line\">      <span class=\"keyword\">continue</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> current.IsPathEnd() &amp;&amp; left &lt;= position &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>, <span class=\"keyword\">string</span>(runes[left : position+<span class=\"number\">1</span>])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    parent = current</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>, Empty</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>更新之后,接口从4s多,转变为毫秒级</p>\n"},{"title":"技术场景之解决sql注入","cover":"/img/technology-sense/sql_inject_title.png","subtitle":"技术场景之解决sql注入","author":{"nick":"袁苏东","link":"https://github.com/yuansudong"},"typora-root-url":"images","_content":"\n以前的无知,造就了一场场线上事故,现在回想起来,不忍想象.而这篇文章,主要聊聊SQL注入.曾经的自己,因为没有对接口参数进行规范化处理,导致了数据库被恶意客户端把数据库爬得一干二净.当时非常气恼,现在回想起来,我还要谢谢那个人,谢谢你没有把数据库的数据全给我清空.\n\n\n\n### 1.什么是SQL注入\n\n\n\nSQL注入,指服务器接口对用户输入数据的合法性没有判断或过滤不严,导致恶意客户端可以通过在参数中加入SQL语句,从而欺骗数据库,达到非正常授权的操作.\n\n\n\n### 2.注入类型\n\n \n\n### 01.数字型注入\n\n\n\n当输入的参数为整型时，如ID、年龄、时间戳等，如果存在注入漏洞，则可以认为是数字型注入.\n\n\n\n数字型注入最多出现在ASP、PHP等弱类型语言中，弱类型语言会自动推导变量类型.\n\n\n\n比如，参数id=10，PHP会自动推导变量id的数据类型为int类型，那么id=8 and 1=1，则会推导为string类型，这是弱类型语言的特性.\n\n\n\n而对于Go,Java,C#这类强类型语言，如果试图把一个字符串转换为int类型，则会抛出异常，无法继续执行。所以，强类型的语言很少存在数字型注入漏洞 .\n\n\n\n### 02.字符型注入\n\n\n\n当输入参数为字符串时，称为字符型。数字型与字符型注入最大的区别在于：数字型不需要单引号闭合，而字符串类型一般要使用单引号来闭合.\n\n\n\n通过在字符型参数里,进行主动闭合.便可以让数据库忽略后续的查询条件.\n\n\n\n比如,登录场景.用户需要填写用户名和密码,通过服务器进行验证,倘若密码以及用户名,服务器便会方法令牌,允许用户登录.\n\n\n\n以前的一个同事大致是这么写的.\n\n\n\n```\nSELECT {{需要的数据}} FROM Account WHERE Account.UserName = @Username AND Account.Password = md5(@Password);\n```\n\n\n\n对于上面的SQL,只谈UserName不谈Password.\n\n\n\n恶意客户端,可以通过在参数UserName中,植入SQL语句,达到不输入密码,只要用户名在数据库中存在,就可以访问系统的目的.\n\n\n\n比如,恶意客户端在接口参数的UserName中,填入的是 admin\" -- ,而服务器接口也没有对字符串参数进行处理.\n\n\n\n直接将值放入SQL语句中,会构建出如下的SQL语句.\n\n\n\n```sql\nSELECT {{需要的数据}} FROM Account WHERE Account.UserName = \"admin\" --\" AND Account.Password = md5(@Password);\n```\n\n\n\n从上面的颜色就可以看出,通过此等输入方式,后面的SQL语句就被注释掉了.\n\n\n\n倘若根据这位同事的代码逻辑,这个登录接口就成了不需要密码登录的接口.\n\n\n\nsql注入能干什么用途?\n\n\n\n这一部分,我们以下列语句来事实SQL语句的注入,看一看SQL注入,到底能干些什么事情\n\n\n\n```sql\nSELECT * FROM Account WHERE Account.UserName = @UserName AND Password = @Password\n```\n\n\n\n### 01.通过SQL注入,获取数据库的版本\n\n\n\n```\nSELECT*FROM AccountWHERE Account.UserName = \"user01\"       AND mid(version(),1,3) = 8.0 -- \" AND Password = @Password\n```\n\n\n\n倘若能够正常返回,或者返回期望的错误码,则证明该数据库的版本是8.0\n\n\n\n### 02.获取数据表中的数据库信息\n\n\n\n```sql\nSELECT\n\t{{你需要的数据}}\nFROM AccountWHERE Account.UserName = \"user01\" AND 0 = 1 UNION SELECT         information_schema.`COLUMNS`.TABLE_SCHEMA,        information_schema.`COLUMNS`.TABLE_NAME,        information_schema.`COLUMNS`.COLUMN_NAME,        information_schema.`COLUMNS`.IS_NULLABLE,        information_schema.`COLUMNS`.DATA_TYPE,        information_schema.`COLUMNS`.COLUMN_COMMENT,        information_schema.`COLUMNS`.COLUMN_KEY        FROM information_schema.`COLUMNS` WHERE information_schema.`COLUMNS`\n```\n\n\n\n### 03.获取数据库名称和当前用户名\n\n\n\n```sql\nSELECT\n\t{{需要的数据}}\nFROM AccountWHERE Account.UserName = \"user01\" UNION SELECT 1,2,version(),user(),database() -- \" AND Password = @Password\n```\n\n\n\n对于我的实验环境来说,返回的数据就是如下\n\n\n\n```text\nUserName  Password  Id      DeletedAt           CreatedAt1          2        8.0.21  root@192.168.42.1   SQL\n```\n\n\n\n### 04.新增数据\n\n\n\n获取到数据库的信息后,我们就可以通过注入SQL语句,达到新增数据的目的.比如,下面的SQL语句.\n\n\n\n```sql\nSELECT * FROM Account\nWHERE Account.UserName = \"user01\";INSERT INTO `SQL`.`Account`( `UserName`, `Password`, `CreatedAt`, `UpdatedAt`, `DeletedAt`) VALUES ('admin', 'md5(sasa)', '2021-01-03 17:03:51', '2021-01-03 17:03:54', '2021-01-03 17:03:57'); -- \" AND Password = @Password\n```\n\n\n\n通过上述的SQL注入,就可以在数据库为SQL,数据表为Account的表中插入一行数据.\n\n\n\n05.修改数据\n\n\n\n```sql\nSELECT * FROM Account\nWHERE Account.UserName = \"user01\";UPDATE `SQL`.`Account`SET  Password = 'md5(new_password)'WHERE `SQL`.`Account`.UserName = \"user01\" -- \" AND Password = @Password\n```\n\n\n\n通过上述的SQL注入,便可以达到修改其他用户密码的目的.恶意客户端修改密码之后,就可以登录,窃取相应的个人用户信息或者执行一些恶意操作.\n\n\n\n### 06.删除数据\n\n\n\n```sql\nSELECT * FROM Account\nWHERE Account.UserName = \"user01\";\n\nDELETE FROM `SQL`.`Account` -- \" AND Password = @Password\n```\n\n\n\n通过注入上述的SQL语句,可以达到在执行查询的同时, 清楚SQL.Account表.\n\n\n\n### 07.如何避免注入\n\n\n\nA.为每个账号非配一定的数据库权限.\n\nB.对于强类型语言,接口中的字符串参数需要转义处理.比如golang中的strconv.Quote.\n\nC.检查参数中是否包含着特殊字符.比如,;,#,--,/**/,',\"等信息.\n\nD.通过sqlmap工具进行盲注测试.","source":"_posts/technology-sense-sql-inject.md","raw":"---\ntitle: 技术场景之解决sql注入\ncover:  /img/technology-sense/sql_inject_title.png\nsubtitle: 技术场景之解决sql注入\ncategories: \"技术场景\"\ntags: \"技术场景\"\nauthor:\n  nick: 袁苏东\n  link: https://github.com/yuansudong\ntypora-root-url: images\n---\n\n以前的无知,造就了一场场线上事故,现在回想起来,不忍想象.而这篇文章,主要聊聊SQL注入.曾经的自己,因为没有对接口参数进行规范化处理,导致了数据库被恶意客户端把数据库爬得一干二净.当时非常气恼,现在回想起来,我还要谢谢那个人,谢谢你没有把数据库的数据全给我清空.\n\n\n\n### 1.什么是SQL注入\n\n\n\nSQL注入,指服务器接口对用户输入数据的合法性没有判断或过滤不严,导致恶意客户端可以通过在参数中加入SQL语句,从而欺骗数据库,达到非正常授权的操作.\n\n\n\n### 2.注入类型\n\n \n\n### 01.数字型注入\n\n\n\n当输入的参数为整型时，如ID、年龄、时间戳等，如果存在注入漏洞，则可以认为是数字型注入.\n\n\n\n数字型注入最多出现在ASP、PHP等弱类型语言中，弱类型语言会自动推导变量类型.\n\n\n\n比如，参数id=10，PHP会自动推导变量id的数据类型为int类型，那么id=8 and 1=1，则会推导为string类型，这是弱类型语言的特性.\n\n\n\n而对于Go,Java,C#这类强类型语言，如果试图把一个字符串转换为int类型，则会抛出异常，无法继续执行。所以，强类型的语言很少存在数字型注入漏洞 .\n\n\n\n### 02.字符型注入\n\n\n\n当输入参数为字符串时，称为字符型。数字型与字符型注入最大的区别在于：数字型不需要单引号闭合，而字符串类型一般要使用单引号来闭合.\n\n\n\n通过在字符型参数里,进行主动闭合.便可以让数据库忽略后续的查询条件.\n\n\n\n比如,登录场景.用户需要填写用户名和密码,通过服务器进行验证,倘若密码以及用户名,服务器便会方法令牌,允许用户登录.\n\n\n\n以前的一个同事大致是这么写的.\n\n\n\n```\nSELECT {{需要的数据}} FROM Account WHERE Account.UserName = @Username AND Account.Password = md5(@Password);\n```\n\n\n\n对于上面的SQL,只谈UserName不谈Password.\n\n\n\n恶意客户端,可以通过在参数UserName中,植入SQL语句,达到不输入密码,只要用户名在数据库中存在,就可以访问系统的目的.\n\n\n\n比如,恶意客户端在接口参数的UserName中,填入的是 admin\" -- ,而服务器接口也没有对字符串参数进行处理.\n\n\n\n直接将值放入SQL语句中,会构建出如下的SQL语句.\n\n\n\n```sql\nSELECT {{需要的数据}} FROM Account WHERE Account.UserName = \"admin\" --\" AND Account.Password = md5(@Password);\n```\n\n\n\n从上面的颜色就可以看出,通过此等输入方式,后面的SQL语句就被注释掉了.\n\n\n\n倘若根据这位同事的代码逻辑,这个登录接口就成了不需要密码登录的接口.\n\n\n\nsql注入能干什么用途?\n\n\n\n这一部分,我们以下列语句来事实SQL语句的注入,看一看SQL注入,到底能干些什么事情\n\n\n\n```sql\nSELECT * FROM Account WHERE Account.UserName = @UserName AND Password = @Password\n```\n\n\n\n### 01.通过SQL注入,获取数据库的版本\n\n\n\n```\nSELECT*FROM AccountWHERE Account.UserName = \"user01\"       AND mid(version(),1,3) = 8.0 -- \" AND Password = @Password\n```\n\n\n\n倘若能够正常返回,或者返回期望的错误码,则证明该数据库的版本是8.0\n\n\n\n### 02.获取数据表中的数据库信息\n\n\n\n```sql\nSELECT\n\t{{你需要的数据}}\nFROM AccountWHERE Account.UserName = \"user01\" AND 0 = 1 UNION SELECT         information_schema.`COLUMNS`.TABLE_SCHEMA,        information_schema.`COLUMNS`.TABLE_NAME,        information_schema.`COLUMNS`.COLUMN_NAME,        information_schema.`COLUMNS`.IS_NULLABLE,        information_schema.`COLUMNS`.DATA_TYPE,        information_schema.`COLUMNS`.COLUMN_COMMENT,        information_schema.`COLUMNS`.COLUMN_KEY        FROM information_schema.`COLUMNS` WHERE information_schema.`COLUMNS`\n```\n\n\n\n### 03.获取数据库名称和当前用户名\n\n\n\n```sql\nSELECT\n\t{{需要的数据}}\nFROM AccountWHERE Account.UserName = \"user01\" UNION SELECT 1,2,version(),user(),database() -- \" AND Password = @Password\n```\n\n\n\n对于我的实验环境来说,返回的数据就是如下\n\n\n\n```text\nUserName  Password  Id      DeletedAt           CreatedAt1          2        8.0.21  root@192.168.42.1   SQL\n```\n\n\n\n### 04.新增数据\n\n\n\n获取到数据库的信息后,我们就可以通过注入SQL语句,达到新增数据的目的.比如,下面的SQL语句.\n\n\n\n```sql\nSELECT * FROM Account\nWHERE Account.UserName = \"user01\";INSERT INTO `SQL`.`Account`( `UserName`, `Password`, `CreatedAt`, `UpdatedAt`, `DeletedAt`) VALUES ('admin', 'md5(sasa)', '2021-01-03 17:03:51', '2021-01-03 17:03:54', '2021-01-03 17:03:57'); -- \" AND Password = @Password\n```\n\n\n\n通过上述的SQL注入,就可以在数据库为SQL,数据表为Account的表中插入一行数据.\n\n\n\n05.修改数据\n\n\n\n```sql\nSELECT * FROM Account\nWHERE Account.UserName = \"user01\";UPDATE `SQL`.`Account`SET  Password = 'md5(new_password)'WHERE `SQL`.`Account`.UserName = \"user01\" -- \" AND Password = @Password\n```\n\n\n\n通过上述的SQL注入,便可以达到修改其他用户密码的目的.恶意客户端修改密码之后,就可以登录,窃取相应的个人用户信息或者执行一些恶意操作.\n\n\n\n### 06.删除数据\n\n\n\n```sql\nSELECT * FROM Account\nWHERE Account.UserName = \"user01\";\n\nDELETE FROM `SQL`.`Account` -- \" AND Password = @Password\n```\n\n\n\n通过注入上述的SQL语句,可以达到在执行查询的同时, 清楚SQL.Account表.\n\n\n\n### 07.如何避免注入\n\n\n\nA.为每个账号非配一定的数据库权限.\n\nB.对于强类型语言,接口中的字符串参数需要转义处理.比如golang中的strconv.Quote.\n\nC.检查参数中是否包含着特殊字符.比如,;,#,--,/**/,',\"等信息.\n\nD.通过sqlmap工具进行盲注测试.","slug":"technology-sense-sql-inject","published":1,"date":"2021-03-16T17:10:41.267Z","updated":"2021-03-16T20:46:40.127Z","_id":"ckmchg4jx001k7gvlgoy5fpn9","comments":1,"layout":"post","photos":[],"link":"","content":"<p>以前的无知,造就了一场场线上事故,现在回想起来,不忍想象.而这篇文章,主要聊聊SQL注入.曾经的自己,因为没有对接口参数进行规范化处理,导致了数据库被恶意客户端把数据库爬得一干二净.当时非常气恼,现在回想起来,我还要谢谢那个人,谢谢你没有把数据库的数据全给我清空.</p>\n<h3 id=\"1-什么是SQL注入\"><a href=\"#1-什么是SQL注入\" class=\"headerlink\" title=\"1.什么是SQL注入\"></a>1.什么是SQL注入</h3><p>SQL注入,指服务器接口对用户输入数据的合法性没有判断或过滤不严,导致恶意客户端可以通过在参数中加入SQL语句,从而欺骗数据库,达到非正常授权的操作.</p>\n<h3 id=\"2-注入类型\"><a href=\"#2-注入类型\" class=\"headerlink\" title=\"2.注入类型\"></a>2.注入类型</h3><h3 id=\"01-数字型注入\"><a href=\"#01-数字型注入\" class=\"headerlink\" title=\"01.数字型注入\"></a>01.数字型注入</h3><p>当输入的参数为整型时，如ID、年龄、时间戳等，如果存在注入漏洞，则可以认为是数字型注入.</p>\n<p>数字型注入最多出现在ASP、PHP等弱类型语言中，弱类型语言会自动推导变量类型.</p>\n<p>比如，参数id=10，PHP会自动推导变量id的数据类型为int类型，那么id=8 and 1=1，则会推导为string类型，这是弱类型语言的特性.</p>\n<p>而对于Go,Java,C#这类强类型语言，如果试图把一个字符串转换为int类型，则会抛出异常，无法继续执行。所以，强类型的语言很少存在数字型注入漏洞 .</p>\n<h3 id=\"02-字符型注入\"><a href=\"#02-字符型注入\" class=\"headerlink\" title=\"02.字符型注入\"></a>02.字符型注入</h3><p>当输入参数为字符串时，称为字符型。数字型与字符型注入最大的区别在于：数字型不需要单引号闭合，而字符串类型一般要使用单引号来闭合.</p>\n<p>通过在字符型参数里,进行主动闭合.便可以让数据库忽略后续的查询条件.</p>\n<p>比如,登录场景.用户需要填写用户名和密码,通过服务器进行验证,倘若密码以及用户名,服务器便会方法令牌,允许用户登录.</p>\n<p>以前的一个同事大致是这么写的.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT &#123;&#123;需要的数据&#125;&#125; FROM Account WHERE Account.UserName &#x3D; @Username AND Account.Password &#x3D; md5(@Password);</span><br></pre></td></tr></table></figure>\n\n\n\n<p>对于上面的SQL,只谈UserName不谈Password.</p>\n<p>恶意客户端,可以通过在参数UserName中,植入SQL语句,达到不输入密码,只要用户名在数据库中存在,就可以访问系统的目的.</p>\n<p>比如,恶意客户端在接口参数的UserName中,填入的是 admin” – ,而服务器接口也没有对字符串参数进行处理.</p>\n<p>直接将值放入SQL语句中,会构建出如下的SQL语句.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT &#123;&#123;需要的数据&#125;&#125; FROM Account WHERE Account.UserName = &quot;admin&quot; --&quot; AND Account.Password = md5(@Password);</span><br></pre></td></tr></table></figure>\n\n\n\n<p>从上面的颜色就可以看出,通过此等输入方式,后面的SQL语句就被注释掉了.</p>\n<p>倘若根据这位同事的代码逻辑,这个登录接口就成了不需要密码登录的接口.</p>\n<p>sql注入能干什么用途?</p>\n<p>这一部分,我们以下列语句来事实SQL语句的注入,看一看SQL注入,到底能干些什么事情</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> Account <span class=\"keyword\">WHERE</span> Account.UserName <span class=\"operator\">=</span> <span class=\"variable\">@UserName</span> <span class=\"keyword\">AND</span> Password <span class=\"operator\">=</span> <span class=\"variable\">@Password</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"01-通过SQL注入-获取数据库的版本\"><a href=\"#01-通过SQL注入-获取数据库的版本\" class=\"headerlink\" title=\"01.通过SQL注入,获取数据库的版本\"></a>01.通过SQL注入,获取数据库的版本</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT*FROM AccountWHERE Account.UserName &#x3D; &quot;user01&quot;       AND mid(version(),1,3) &#x3D; 8.0 -- &quot; AND Password &#x3D; @Password</span><br></pre></td></tr></table></figure>\n\n\n\n<p>倘若能够正常返回,或者返回期望的错误码,则证明该数据库的版本是8.0</p>\n<h3 id=\"02-获取数据表中的数据库信息\"><a href=\"#02-获取数据表中的数据库信息\" class=\"headerlink\" title=\"02.获取数据表中的数据库信息\"></a>02.获取数据表中的数据库信息</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">\t&#123;&#123;你需要的数据&#125;&#125;</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> AccountWHERE Account.UserName <span class=\"operator\">=</span> &quot;user01&quot; <span class=\"keyword\">AND</span> <span class=\"number\">0</span> <span class=\"operator\">=</span> <span class=\"number\">1</span> <span class=\"keyword\">UNION</span> <span class=\"keyword\">SELECT</span>         information_schema.`COLUMNS`.TABLE_SCHEMA,        information_schema.`COLUMNS`.TABLE_NAME,        information_schema.`COLUMNS`.COLUMN_NAME,        information_schema.`COLUMNS`.IS_NULLABLE,        information_schema.`COLUMNS`.DATA_TYPE,        information_schema.`COLUMNS`.COLUMN_COMMENT,        information_schema.`COLUMNS`.COLUMN_KEY        <span class=\"keyword\">FROM</span> information_schema.`COLUMNS` <span class=\"keyword\">WHERE</span> information_schema.`COLUMNS`</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"03-获取数据库名称和当前用户名\"><a href=\"#03-获取数据库名称和当前用户名\" class=\"headerlink\" title=\"03.获取数据库名称和当前用户名\"></a>03.获取数据库名称和当前用户名</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">\t&#123;&#123;需要的数据&#125;&#125;</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> AccountWHERE Account.UserName <span class=\"operator\">=</span> &quot;user01&quot; <span class=\"keyword\">UNION</span> <span class=\"keyword\">SELECT</span> <span class=\"number\">1</span>,<span class=\"number\">2</span>,version(),<span class=\"keyword\">user</span>(),database() <span class=\"comment\">-- &quot; AND Password = @Password</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>对于我的实验环境来说,返回的数据就是如下</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UserName  Password  Id      DeletedAt           CreatedAt1          2        8.0.21  root@192.168.42.1   SQL</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"04-新增数据\"><a href=\"#04-新增数据\" class=\"headerlink\" title=\"04.新增数据\"></a>04.新增数据</h3><p>获取到数据库的信息后,我们就可以通过注入SQL语句,达到新增数据的目的.比如,下面的SQL语句.</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> Account</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> Account.UserName <span class=\"operator\">=</span> &quot;user01&quot;;<span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `<span class=\"keyword\">SQL</span>`.`Account`( `UserName`, `Password`, `CreatedAt`, `UpdatedAt`, `DeletedAt`) <span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;admin&#x27;</span>, <span class=\"string\">&#x27;md5(sasa)&#x27;</span>, <span class=\"string\">&#x27;2021-01-03 17:03:51&#x27;</span>, <span class=\"string\">&#x27;2021-01-03 17:03:54&#x27;</span>, <span class=\"string\">&#x27;2021-01-03 17:03:57&#x27;</span>); <span class=\"comment\">-- &quot; AND Password = @Password</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>通过上述的SQL注入,就可以在数据库为SQL,数据表为Account的表中插入一行数据.</p>\n<p>05.修改数据</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> Account</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> Account.UserName <span class=\"operator\">=</span> &quot;user01&quot;;UPDATE `<span class=\"keyword\">SQL</span>`.`Account`<span class=\"keyword\">SET</span>  Password <span class=\"operator\">=</span> <span class=\"string\">&#x27;md5(new_password)&#x27;</span><span class=\"keyword\">WHERE</span> `<span class=\"keyword\">SQL</span>`.`Account`.UserName <span class=\"operator\">=</span> &quot;user01&quot; <span class=\"comment\">-- &quot; AND Password = @Password</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>通过上述的SQL注入,便可以达到修改其他用户密码的目的.恶意客户端修改密码之后,就可以登录,窃取相应的个人用户信息或者执行一些恶意操作.</p>\n<h3 id=\"06-删除数据\"><a href=\"#06-删除数据\" class=\"headerlink\" title=\"06.删除数据\"></a>06.删除数据</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> Account</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> Account.UserName <span class=\"operator\">=</span> &quot;user01&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> `<span class=\"keyword\">SQL</span>`.`Account` <span class=\"comment\">-- &quot; AND Password = @Password</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>通过注入上述的SQL语句,可以达到在执行查询的同时, 清楚SQL.Account表.</p>\n<h3 id=\"07-如何避免注入\"><a href=\"#07-如何避免注入\" class=\"headerlink\" title=\"07.如何避免注入\"></a>07.如何避免注入</h3><p>A.为每个账号非配一定的数据库权限.</p>\n<p>B.对于强类型语言,接口中的字符串参数需要转义处理.比如golang中的strconv.Quote.</p>\n<p>C.检查参数中是否包含着特殊字符.比如,;,#,–,/**/,’,”等信息.</p>\n<p>D.通过sqlmap工具进行盲注测试.</p>\n","site":{"data":{"contact":[{"title":"github","icon":"icon-github","link":"https://github.com/yuansudong"},{"title":"email","icon":"icon-email","link":"mailto:1145919989@qq.com"},{"title":"qq","icon":"icon-qq","link":"/atom.xml"}],"favicons":["<link rel=\"shortcut icon\" href=\"/img//favicon.ico\">","<link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/img//favicon-16x16.png\">","<link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/img//favicon-32x32.png\">","<link rel=\"icon\" type=\"image/png\" sizes=\"48x48\" href=\"/img//favicon-48x48.png\">","<link rel=\"manifest\" href=\"/img//manifest.json\">","<meta name=\"mobile-web-app-capable\" content=\"yes\">","<meta name=\"theme-color\" content=\"#fff\">","<meta name=\"application-name\">","<link rel=\"apple-touch-icon\" sizes=\"57x57\" href=\"/img//apple-touch-icon-57x57.png\">","<link rel=\"apple-touch-icon\" sizes=\"60x60\" href=\"/img//apple-touch-icon-60x60.png\">","<link rel=\"apple-touch-icon\" sizes=\"72x72\" href=\"/img//apple-touch-icon-72x72.png\">","<link rel=\"apple-touch-icon\" sizes=\"76x76\" href=\"/img//apple-touch-icon-76x76.png\">","<link rel=\"apple-touch-icon\" sizes=\"114x114\" href=\"/img//apple-touch-icon-114x114.png\">","<link rel=\"apple-touch-icon\" sizes=\"120x120\" href=\"/img//apple-touch-icon-120x120.png\">","<link rel=\"apple-touch-icon\" sizes=\"144x144\" href=\"/img//apple-touch-icon-144x144.png\">","<link rel=\"apple-touch-icon\" sizes=\"152x152\" href=\"/img//apple-touch-icon-152x152.png\">","<link rel=\"apple-touch-icon\" sizes=\"167x167\" href=\"/img//apple-touch-icon-167x167.png\">","<link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/img//apple-touch-icon-180x180.png\">","<link rel=\"apple-touch-icon\" sizes=\"1024x1024\" href=\"/img//apple-touch-icon-1024x1024.png\">","<meta name=\"apple-mobile-web-app-capable\" content=\"yes\">","<meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black-translucent\">","<meta name=\"apple-mobile-web-app-title\">","<meta name=\"msapplication-TileColor\" content=\"#fff\">","<meta name=\"msapplication-TileImage\" content=\"/img//mstile-144x144.png\">","<meta name=\"msapplication-config\" content=\"/img//browserconfig.xml\">"]}},"excerpt":"","more":"<p>以前的无知,造就了一场场线上事故,现在回想起来,不忍想象.而这篇文章,主要聊聊SQL注入.曾经的自己,因为没有对接口参数进行规范化处理,导致了数据库被恶意客户端把数据库爬得一干二净.当时非常气恼,现在回想起来,我还要谢谢那个人,谢谢你没有把数据库的数据全给我清空.</p>\n<h3 id=\"1-什么是SQL注入\"><a href=\"#1-什么是SQL注入\" class=\"headerlink\" title=\"1.什么是SQL注入\"></a>1.什么是SQL注入</h3><p>SQL注入,指服务器接口对用户输入数据的合法性没有判断或过滤不严,导致恶意客户端可以通过在参数中加入SQL语句,从而欺骗数据库,达到非正常授权的操作.</p>\n<h3 id=\"2-注入类型\"><a href=\"#2-注入类型\" class=\"headerlink\" title=\"2.注入类型\"></a>2.注入类型</h3><h3 id=\"01-数字型注入\"><a href=\"#01-数字型注入\" class=\"headerlink\" title=\"01.数字型注入\"></a>01.数字型注入</h3><p>当输入的参数为整型时，如ID、年龄、时间戳等，如果存在注入漏洞，则可以认为是数字型注入.</p>\n<p>数字型注入最多出现在ASP、PHP等弱类型语言中，弱类型语言会自动推导变量类型.</p>\n<p>比如，参数id=10，PHP会自动推导变量id的数据类型为int类型，那么id=8 and 1=1，则会推导为string类型，这是弱类型语言的特性.</p>\n<p>而对于Go,Java,C#这类强类型语言，如果试图把一个字符串转换为int类型，则会抛出异常，无法继续执行。所以，强类型的语言很少存在数字型注入漏洞 .</p>\n<h3 id=\"02-字符型注入\"><a href=\"#02-字符型注入\" class=\"headerlink\" title=\"02.字符型注入\"></a>02.字符型注入</h3><p>当输入参数为字符串时，称为字符型。数字型与字符型注入最大的区别在于：数字型不需要单引号闭合，而字符串类型一般要使用单引号来闭合.</p>\n<p>通过在字符型参数里,进行主动闭合.便可以让数据库忽略后续的查询条件.</p>\n<p>比如,登录场景.用户需要填写用户名和密码,通过服务器进行验证,倘若密码以及用户名,服务器便会方法令牌,允许用户登录.</p>\n<p>以前的一个同事大致是这么写的.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT &#123;&#123;需要的数据&#125;&#125; FROM Account WHERE Account.UserName &#x3D; @Username AND Account.Password &#x3D; md5(@Password);</span><br></pre></td></tr></table></figure>\n\n\n\n<p>对于上面的SQL,只谈UserName不谈Password.</p>\n<p>恶意客户端,可以通过在参数UserName中,植入SQL语句,达到不输入密码,只要用户名在数据库中存在,就可以访问系统的目的.</p>\n<p>比如,恶意客户端在接口参数的UserName中,填入的是 admin” – ,而服务器接口也没有对字符串参数进行处理.</p>\n<p>直接将值放入SQL语句中,会构建出如下的SQL语句.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT &#123;&#123;需要的数据&#125;&#125; FROM Account WHERE Account.UserName = &quot;admin&quot; --&quot; AND Account.Password = md5(@Password);</span><br></pre></td></tr></table></figure>\n\n\n\n<p>从上面的颜色就可以看出,通过此等输入方式,后面的SQL语句就被注释掉了.</p>\n<p>倘若根据这位同事的代码逻辑,这个登录接口就成了不需要密码登录的接口.</p>\n<p>sql注入能干什么用途?</p>\n<p>这一部分,我们以下列语句来事实SQL语句的注入,看一看SQL注入,到底能干些什么事情</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> Account <span class=\"keyword\">WHERE</span> Account.UserName <span class=\"operator\">=</span> <span class=\"variable\">@UserName</span> <span class=\"keyword\">AND</span> Password <span class=\"operator\">=</span> <span class=\"variable\">@Password</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"01-通过SQL注入-获取数据库的版本\"><a href=\"#01-通过SQL注入-获取数据库的版本\" class=\"headerlink\" title=\"01.通过SQL注入,获取数据库的版本\"></a>01.通过SQL注入,获取数据库的版本</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT*FROM AccountWHERE Account.UserName &#x3D; &quot;user01&quot;       AND mid(version(),1,3) &#x3D; 8.0 -- &quot; AND Password &#x3D; @Password</span><br></pre></td></tr></table></figure>\n\n\n\n<p>倘若能够正常返回,或者返回期望的错误码,则证明该数据库的版本是8.0</p>\n<h3 id=\"02-获取数据表中的数据库信息\"><a href=\"#02-获取数据表中的数据库信息\" class=\"headerlink\" title=\"02.获取数据表中的数据库信息\"></a>02.获取数据表中的数据库信息</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">\t&#123;&#123;你需要的数据&#125;&#125;</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> AccountWHERE Account.UserName <span class=\"operator\">=</span> &quot;user01&quot; <span class=\"keyword\">AND</span> <span class=\"number\">0</span> <span class=\"operator\">=</span> <span class=\"number\">1</span> <span class=\"keyword\">UNION</span> <span class=\"keyword\">SELECT</span>         information_schema.`COLUMNS`.TABLE_SCHEMA,        information_schema.`COLUMNS`.TABLE_NAME,        information_schema.`COLUMNS`.COLUMN_NAME,        information_schema.`COLUMNS`.IS_NULLABLE,        information_schema.`COLUMNS`.DATA_TYPE,        information_schema.`COLUMNS`.COLUMN_COMMENT,        information_schema.`COLUMNS`.COLUMN_KEY        <span class=\"keyword\">FROM</span> information_schema.`COLUMNS` <span class=\"keyword\">WHERE</span> information_schema.`COLUMNS`</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"03-获取数据库名称和当前用户名\"><a href=\"#03-获取数据库名称和当前用户名\" class=\"headerlink\" title=\"03.获取数据库名称和当前用户名\"></a>03.获取数据库名称和当前用户名</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">\t&#123;&#123;需要的数据&#125;&#125;</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> AccountWHERE Account.UserName <span class=\"operator\">=</span> &quot;user01&quot; <span class=\"keyword\">UNION</span> <span class=\"keyword\">SELECT</span> <span class=\"number\">1</span>,<span class=\"number\">2</span>,version(),<span class=\"keyword\">user</span>(),database() <span class=\"comment\">-- &quot; AND Password = @Password</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>对于我的实验环境来说,返回的数据就是如下</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UserName  Password  Id      DeletedAt           CreatedAt1          2        8.0.21  root@192.168.42.1   SQL</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"04-新增数据\"><a href=\"#04-新增数据\" class=\"headerlink\" title=\"04.新增数据\"></a>04.新增数据</h3><p>获取到数据库的信息后,我们就可以通过注入SQL语句,达到新增数据的目的.比如,下面的SQL语句.</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> Account</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> Account.UserName <span class=\"operator\">=</span> &quot;user01&quot;;<span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `<span class=\"keyword\">SQL</span>`.`Account`( `UserName`, `Password`, `CreatedAt`, `UpdatedAt`, `DeletedAt`) <span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;admin&#x27;</span>, <span class=\"string\">&#x27;md5(sasa)&#x27;</span>, <span class=\"string\">&#x27;2021-01-03 17:03:51&#x27;</span>, <span class=\"string\">&#x27;2021-01-03 17:03:54&#x27;</span>, <span class=\"string\">&#x27;2021-01-03 17:03:57&#x27;</span>); <span class=\"comment\">-- &quot; AND Password = @Password</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>通过上述的SQL注入,就可以在数据库为SQL,数据表为Account的表中插入一行数据.</p>\n<p>05.修改数据</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> Account</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> Account.UserName <span class=\"operator\">=</span> &quot;user01&quot;;UPDATE `<span class=\"keyword\">SQL</span>`.`Account`<span class=\"keyword\">SET</span>  Password <span class=\"operator\">=</span> <span class=\"string\">&#x27;md5(new_password)&#x27;</span><span class=\"keyword\">WHERE</span> `<span class=\"keyword\">SQL</span>`.`Account`.UserName <span class=\"operator\">=</span> &quot;user01&quot; <span class=\"comment\">-- &quot; AND Password = @Password</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>通过上述的SQL注入,便可以达到修改其他用户密码的目的.恶意客户端修改密码之后,就可以登录,窃取相应的个人用户信息或者执行一些恶意操作.</p>\n<h3 id=\"06-删除数据\"><a href=\"#06-删除数据\" class=\"headerlink\" title=\"06.删除数据\"></a>06.删除数据</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> Account</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> Account.UserName <span class=\"operator\">=</span> &quot;user01&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> `<span class=\"keyword\">SQL</span>`.`Account` <span class=\"comment\">-- &quot; AND Password = @Password</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>通过注入上述的SQL语句,可以达到在执行查询的同时, 清楚SQL.Account表.</p>\n<h3 id=\"07-如何避免注入\"><a href=\"#07-如何避免注入\" class=\"headerlink\" title=\"07.如何避免注入\"></a>07.如何避免注入</h3><p>A.为每个账号非配一定的数据库权限.</p>\n<p>B.对于强类型语言,接口中的字符串参数需要转义处理.比如golang中的strconv.Quote.</p>\n<p>C.检查参数中是否包含着特殊字符.比如,;,#,–,/**/,’,”等信息.</p>\n<p>D.通过sqlmap工具进行盲注测试.</p>\n"},{"title":"技术场景之解决排序引起的数据重复","cover":"/img/technology-sense/data_repeated_title.png","subtitle":"技术场景之解决排序引起的数据重复","author":{"nick":"袁苏东","link":"https://github.com/yuansudong"},"typora-root-url":"images","_content":"\n列表,在实际开发中是一个非常常见的功能.比如,广场,附近的人都是基于列表所展示的.但是,对于非个人数据的列表.比如广场,会时不时的出现重复卡片的问题.\n\n\n\n经过排查,发现出现重复数据的原因,是因为服务器接口返回的数据重复,从而导致客户端展示出有重复数据的问题,也导致了用户体验极差的结果.\n\n\n\n下面,就对于出现的原因进行分析\n\n\n\n在列表中,通常需要按照一个维度进行排序.下面以广场这个常见的功能模块进行说明.\n\n\n\n广场,其筛选条件包含着距离最近,点赞最多,最新发布,及其性别等一些列的筛选条件.\n\n\n\n其中,距离最近,点赞最多,最新发布为互斥条件,三者只能选其一,且三种都要通过排序来达到效果.\n\n\n\n距离最近,以用户发布动态的经纬度为准,计算两个点之间的距离,升序排序.其公式如下.\n\n\n\n```\nDistance = R*Arccos(sin(MLatA)*sin(MLatB)*cos(MLonA-MLonB) + cos(MLatA)*cos(MLatB))*Pi/180\n```\n\n\n\n点赞最多,以动态表中,字段为点赞的个数,进行降序排序.\n\n\n\n最新发布,以动态表中,创建时间为维度,进行降序排序.\n\n\n\n对于这些排序,在静态数据下,不会出现重复的ITEM.但是,倘若在浏览期间,有其他用户发布了最新的动态,此时对于在浏览期间的用户,便会看到有重复的ITEM出现.\n\n\n\n记得第一次遇见这类情形时,大脑中懵然一片.在模拟用户流程之后,得出了造成这一现象的原因是排序造成的.\n\n\n\n比如,现有一个有序列表[5,4,3,2,1],且列表中的数据不能被移除.\n\n\n\n用户A想浏览这个列表.其方式是通过每次从列表中获取两个ITEM,现在已经获取了2次,偏移量为4.第一次获取[5,4],第二次获取[3,2].\n\n\n\n就在此时,用户B向列表中插入了一个新的ITEM,其值为6.此时,这个有序列表就变成了[6,5,4,3,2,1]\n\n\n\n用户A第三次获取列表中的ITEM,通过前两次获取,用户A处于偏移量为4的位置.根据规则,第三次用户A拿到的数据为[2,1].即,用户A三次获得的数据为[5,4],[3,2],[2,1].\n\n\n\n下面我们就解决办法做出讨论\n\n\n\n#### 01.基于REDIS缓存\n\n\n\n通过redis中的list结构,为每个用户临时维护一个浏览的list.从而解决数据重复的问题.  \n\n\n\n优点:各类客户端以服务器为准,可以高度统一.\n\n\n\n缺点:基于缓存做,那么在一定时间间隔内,用户无法看到最新状态\n\n\n\n结论:产品不允许,且服务器内存消耗,不合适\n\n\n\n#### 02.服务器基于数据的临界值,进行筛选\n\n\n\n在SQL优化中,有一段经验,对于数据筛选排序,须尽量避免使用OFFSET,采用临界值的方式缩小数据集,进行TOPN查询.\n\n\n\n但是,需得注意的是,对于此类用法有一个前提,其排序字段需要有序性和唯一性.否则,会出现漏数据或者数据重复的问题.下面以最新发布为例.\n\n\n\n在最新发布中,按照创建时间降序排序. 而在APP设计中,产品并没有说明在1秒内,只允许一个用户发布动态.\n\n\n\n这也就决定了在1秒内可能会有N个用户发布动态,也就造成了创建时间的可重复性.\n\n\n\n下面是一个SQL的举例\n\n\n\n```\nselect {需要的数据} from user_dynamic where dynamic.create_at < {{客户端最后一条数据的时间戳}}   order by dynamic.create_at desc limit 50\n```\n\n\n\n对于上面的SQL语句,假设客户端给的时间戳为100,且在100这个时间戳内,有123条动态.如果用小于进行筛选,最大可漏数据为53.\n\n\n\n```\nselect {需要的数据} from user_dynamic where dynamic.create_at <= {{客户端最后一条数据的时间戳}}   order by dynamic.create_at desc limit 50\n```\n\n\n\n对于上面的sql语句,假设客户端给的时间戳为100,且在100这个时间戳内,有123条动态.如果用小于等于进行筛选,最大重复数据为无限.\n\n\n\n之所以无限,是因为我取50条,最后一条数据的时间戳还是100.这会造成无限循环.\n\n\n\n#### 03.客户端去重\n\n\n\n客户端在获取数据时,在本地维护一个set或者hashmap的数据集.其唯一key为动态的唯一ID.\n\n\n\n每次获取数据后,在展示之前,先通过set或者dictionary进行查询,发现有重复数据时,客户端不予以展示,并且会在广场的滚动视图的顶端对用户进行微小的提示.\n\n\n\n比如,有新动态啦! 有人距离你更进一步! 等一些列俏皮词汇,并且给与用户能回滚到最顶端,重新查看的功能.","source":"_posts/technology-sense-sql-order-repeated.md","raw":"---\ntitle: 技术场景之解决排序引起的数据重复\ncover:  /img/technology-sense/data_repeated_title.png\nsubtitle: 技术场景之解决排序引起的数据重复\ncategories: \"技术场景\"\ntags: \"技术场景\"\nauthor:\n  nick: 袁苏东\n  link: https://github.com/yuansudong\ntypora-root-url: images\n---\n\n列表,在实际开发中是一个非常常见的功能.比如,广场,附近的人都是基于列表所展示的.但是,对于非个人数据的列表.比如广场,会时不时的出现重复卡片的问题.\n\n\n\n经过排查,发现出现重复数据的原因,是因为服务器接口返回的数据重复,从而导致客户端展示出有重复数据的问题,也导致了用户体验极差的结果.\n\n\n\n下面,就对于出现的原因进行分析\n\n\n\n在列表中,通常需要按照一个维度进行排序.下面以广场这个常见的功能模块进行说明.\n\n\n\n广场,其筛选条件包含着距离最近,点赞最多,最新发布,及其性别等一些列的筛选条件.\n\n\n\n其中,距离最近,点赞最多,最新发布为互斥条件,三者只能选其一,且三种都要通过排序来达到效果.\n\n\n\n距离最近,以用户发布动态的经纬度为准,计算两个点之间的距离,升序排序.其公式如下.\n\n\n\n```\nDistance = R*Arccos(sin(MLatA)*sin(MLatB)*cos(MLonA-MLonB) + cos(MLatA)*cos(MLatB))*Pi/180\n```\n\n\n\n点赞最多,以动态表中,字段为点赞的个数,进行降序排序.\n\n\n\n最新发布,以动态表中,创建时间为维度,进行降序排序.\n\n\n\n对于这些排序,在静态数据下,不会出现重复的ITEM.但是,倘若在浏览期间,有其他用户发布了最新的动态,此时对于在浏览期间的用户,便会看到有重复的ITEM出现.\n\n\n\n记得第一次遇见这类情形时,大脑中懵然一片.在模拟用户流程之后,得出了造成这一现象的原因是排序造成的.\n\n\n\n比如,现有一个有序列表[5,4,3,2,1],且列表中的数据不能被移除.\n\n\n\n用户A想浏览这个列表.其方式是通过每次从列表中获取两个ITEM,现在已经获取了2次,偏移量为4.第一次获取[5,4],第二次获取[3,2].\n\n\n\n就在此时,用户B向列表中插入了一个新的ITEM,其值为6.此时,这个有序列表就变成了[6,5,4,3,2,1]\n\n\n\n用户A第三次获取列表中的ITEM,通过前两次获取,用户A处于偏移量为4的位置.根据规则,第三次用户A拿到的数据为[2,1].即,用户A三次获得的数据为[5,4],[3,2],[2,1].\n\n\n\n下面我们就解决办法做出讨论\n\n\n\n#### 01.基于REDIS缓存\n\n\n\n通过redis中的list结构,为每个用户临时维护一个浏览的list.从而解决数据重复的问题.  \n\n\n\n优点:各类客户端以服务器为准,可以高度统一.\n\n\n\n缺点:基于缓存做,那么在一定时间间隔内,用户无法看到最新状态\n\n\n\n结论:产品不允许,且服务器内存消耗,不合适\n\n\n\n#### 02.服务器基于数据的临界值,进行筛选\n\n\n\n在SQL优化中,有一段经验,对于数据筛选排序,须尽量避免使用OFFSET,采用临界值的方式缩小数据集,进行TOPN查询.\n\n\n\n但是,需得注意的是,对于此类用法有一个前提,其排序字段需要有序性和唯一性.否则,会出现漏数据或者数据重复的问题.下面以最新发布为例.\n\n\n\n在最新发布中,按照创建时间降序排序. 而在APP设计中,产品并没有说明在1秒内,只允许一个用户发布动态.\n\n\n\n这也就决定了在1秒内可能会有N个用户发布动态,也就造成了创建时间的可重复性.\n\n\n\n下面是一个SQL的举例\n\n\n\n```\nselect {需要的数据} from user_dynamic where dynamic.create_at < {{客户端最后一条数据的时间戳}}   order by dynamic.create_at desc limit 50\n```\n\n\n\n对于上面的SQL语句,假设客户端给的时间戳为100,且在100这个时间戳内,有123条动态.如果用小于进行筛选,最大可漏数据为53.\n\n\n\n```\nselect {需要的数据} from user_dynamic where dynamic.create_at <= {{客户端最后一条数据的时间戳}}   order by dynamic.create_at desc limit 50\n```\n\n\n\n对于上面的sql语句,假设客户端给的时间戳为100,且在100这个时间戳内,有123条动态.如果用小于等于进行筛选,最大重复数据为无限.\n\n\n\n之所以无限,是因为我取50条,最后一条数据的时间戳还是100.这会造成无限循环.\n\n\n\n#### 03.客户端去重\n\n\n\n客户端在获取数据时,在本地维护一个set或者hashmap的数据集.其唯一key为动态的唯一ID.\n\n\n\n每次获取数据后,在展示之前,先通过set或者dictionary进行查询,发现有重复数据时,客户端不予以展示,并且会在广场的滚动视图的顶端对用户进行微小的提示.\n\n\n\n比如,有新动态啦! 有人距离你更进一步! 等一些列俏皮词汇,并且给与用户能回滚到最顶端,重新查看的功能.","slug":"technology-sense-sql-order-repeated","published":1,"date":"2021-03-15T16:58:23.122Z","updated":"2021-03-15T17:04:57.959Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmchg4k0001o7gvlgccubjoi","content":"<p>列表,在实际开发中是一个非常常见的功能.比如,广场,附近的人都是基于列表所展示的.但是,对于非个人数据的列表.比如广场,会时不时的出现重复卡片的问题.</p>\n<p>经过排查,发现出现重复数据的原因,是因为服务器接口返回的数据重复,从而导致客户端展示出有重复数据的问题,也导致了用户体验极差的结果.</p>\n<p>下面,就对于出现的原因进行分析</p>\n<p>在列表中,通常需要按照一个维度进行排序.下面以广场这个常见的功能模块进行说明.</p>\n<p>广场,其筛选条件包含着距离最近,点赞最多,最新发布,及其性别等一些列的筛选条件.</p>\n<p>其中,距离最近,点赞最多,最新发布为互斥条件,三者只能选其一,且三种都要通过排序来达到效果.</p>\n<p>距离最近,以用户发布动态的经纬度为准,计算两个点之间的距离,升序排序.其公式如下.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Distance &#x3D; R*Arccos(sin(MLatA)*sin(MLatB)*cos(MLonA-MLonB) + cos(MLatA)*cos(MLatB))*Pi&#x2F;180</span><br></pre></td></tr></table></figure>\n\n\n\n<p>点赞最多,以动态表中,字段为点赞的个数,进行降序排序.</p>\n<p>最新发布,以动态表中,创建时间为维度,进行降序排序.</p>\n<p>对于这些排序,在静态数据下,不会出现重复的ITEM.但是,倘若在浏览期间,有其他用户发布了最新的动态,此时对于在浏览期间的用户,便会看到有重复的ITEM出现.</p>\n<p>记得第一次遇见这类情形时,大脑中懵然一片.在模拟用户流程之后,得出了造成这一现象的原因是排序造成的.</p>\n<p>比如,现有一个有序列表[5,4,3,2,1],且列表中的数据不能被移除.</p>\n<p>用户A想浏览这个列表.其方式是通过每次从列表中获取两个ITEM,现在已经获取了2次,偏移量为4.第一次获取[5,4],第二次获取[3,2].</p>\n<p>就在此时,用户B向列表中插入了一个新的ITEM,其值为6.此时,这个有序列表就变成了[6,5,4,3,2,1]</p>\n<p>用户A第三次获取列表中的ITEM,通过前两次获取,用户A处于偏移量为4的位置.根据规则,第三次用户A拿到的数据为[2,1].即,用户A三次获得的数据为[5,4],[3,2],[2,1].</p>\n<p>下面我们就解决办法做出讨论</p>\n<h4 id=\"01-基于REDIS缓存\"><a href=\"#01-基于REDIS缓存\" class=\"headerlink\" title=\"01.基于REDIS缓存\"></a>01.基于REDIS缓存</h4><p>通过redis中的list结构,为每个用户临时维护一个浏览的list.从而解决数据重复的问题.  </p>\n<p>优点:各类客户端以服务器为准,可以高度统一.</p>\n<p>缺点:基于缓存做,那么在一定时间间隔内,用户无法看到最新状态</p>\n<p>结论:产品不允许,且服务器内存消耗,不合适</p>\n<h4 id=\"02-服务器基于数据的临界值-进行筛选\"><a href=\"#02-服务器基于数据的临界值-进行筛选\" class=\"headerlink\" title=\"02.服务器基于数据的临界值,进行筛选\"></a>02.服务器基于数据的临界值,进行筛选</h4><p>在SQL优化中,有一段经验,对于数据筛选排序,须尽量避免使用OFFSET,采用临界值的方式缩小数据集,进行TOPN查询.</p>\n<p>但是,需得注意的是,对于此类用法有一个前提,其排序字段需要有序性和唯一性.否则,会出现漏数据或者数据重复的问题.下面以最新发布为例.</p>\n<p>在最新发布中,按照创建时间降序排序. 而在APP设计中,产品并没有说明在1秒内,只允许一个用户发布动态.</p>\n<p>这也就决定了在1秒内可能会有N个用户发布动态,也就造成了创建时间的可重复性.</p>\n<p>下面是一个SQL的举例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select &#123;需要的数据&#125; from user_dynamic where dynamic.create_at &lt; &#123;&#123;客户端最后一条数据的时间戳&#125;&#125;   order by dynamic.create_at desc limit 50</span><br></pre></td></tr></table></figure>\n\n\n\n<p>对于上面的SQL语句,假设客户端给的时间戳为100,且在100这个时间戳内,有123条动态.如果用小于进行筛选,最大可漏数据为53.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select &#123;需要的数据&#125; from user_dynamic where dynamic.create_at &lt;&#x3D; &#123;&#123;客户端最后一条数据的时间戳&#125;&#125;   order by dynamic.create_at desc limit 50</span><br></pre></td></tr></table></figure>\n\n\n\n<p>对于上面的sql语句,假设客户端给的时间戳为100,且在100这个时间戳内,有123条动态.如果用小于等于进行筛选,最大重复数据为无限.</p>\n<p>之所以无限,是因为我取50条,最后一条数据的时间戳还是100.这会造成无限循环.</p>\n<h4 id=\"03-客户端去重\"><a href=\"#03-客户端去重\" class=\"headerlink\" title=\"03.客户端去重\"></a>03.客户端去重</h4><p>客户端在获取数据时,在本地维护一个set或者hashmap的数据集.其唯一key为动态的唯一ID.</p>\n<p>每次获取数据后,在展示之前,先通过set或者dictionary进行查询,发现有重复数据时,客户端不予以展示,并且会在广场的滚动视图的顶端对用户进行微小的提示.</p>\n<p>比如,有新动态啦! 有人距离你更进一步! 等一些列俏皮词汇,并且给与用户能回滚到最顶端,重新查看的功能.</p>\n","site":{"data":{"contact":[{"title":"github","icon":"icon-github","link":"https://github.com/yuansudong"},{"title":"email","icon":"icon-email","link":"mailto:1145919989@qq.com"},{"title":"qq","icon":"icon-qq","link":"/atom.xml"}],"favicons":["<link rel=\"shortcut icon\" href=\"/img//favicon.ico\">","<link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/img//favicon-16x16.png\">","<link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/img//favicon-32x32.png\">","<link rel=\"icon\" type=\"image/png\" sizes=\"48x48\" href=\"/img//favicon-48x48.png\">","<link rel=\"manifest\" href=\"/img//manifest.json\">","<meta name=\"mobile-web-app-capable\" content=\"yes\">","<meta name=\"theme-color\" content=\"#fff\">","<meta name=\"application-name\">","<link rel=\"apple-touch-icon\" sizes=\"57x57\" href=\"/img//apple-touch-icon-57x57.png\">","<link rel=\"apple-touch-icon\" sizes=\"60x60\" href=\"/img//apple-touch-icon-60x60.png\">","<link rel=\"apple-touch-icon\" sizes=\"72x72\" href=\"/img//apple-touch-icon-72x72.png\">","<link rel=\"apple-touch-icon\" sizes=\"76x76\" href=\"/img//apple-touch-icon-76x76.png\">","<link rel=\"apple-touch-icon\" sizes=\"114x114\" href=\"/img//apple-touch-icon-114x114.png\">","<link rel=\"apple-touch-icon\" sizes=\"120x120\" href=\"/img//apple-touch-icon-120x120.png\">","<link rel=\"apple-touch-icon\" sizes=\"144x144\" href=\"/img//apple-touch-icon-144x144.png\">","<link rel=\"apple-touch-icon\" sizes=\"152x152\" href=\"/img//apple-touch-icon-152x152.png\">","<link rel=\"apple-touch-icon\" sizes=\"167x167\" href=\"/img//apple-touch-icon-167x167.png\">","<link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/img//apple-touch-icon-180x180.png\">","<link rel=\"apple-touch-icon\" sizes=\"1024x1024\" href=\"/img//apple-touch-icon-1024x1024.png\">","<meta name=\"apple-mobile-web-app-capable\" content=\"yes\">","<meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black-translucent\">","<meta name=\"apple-mobile-web-app-title\">","<meta name=\"msapplication-TileColor\" content=\"#fff\">","<meta name=\"msapplication-TileImage\" content=\"/img//mstile-144x144.png\">","<meta name=\"msapplication-config\" content=\"/img//browserconfig.xml\">"]}},"excerpt":"","more":"<p>列表,在实际开发中是一个非常常见的功能.比如,广场,附近的人都是基于列表所展示的.但是,对于非个人数据的列表.比如广场,会时不时的出现重复卡片的问题.</p>\n<p>经过排查,发现出现重复数据的原因,是因为服务器接口返回的数据重复,从而导致客户端展示出有重复数据的问题,也导致了用户体验极差的结果.</p>\n<p>下面,就对于出现的原因进行分析</p>\n<p>在列表中,通常需要按照一个维度进行排序.下面以广场这个常见的功能模块进行说明.</p>\n<p>广场,其筛选条件包含着距离最近,点赞最多,最新发布,及其性别等一些列的筛选条件.</p>\n<p>其中,距离最近,点赞最多,最新发布为互斥条件,三者只能选其一,且三种都要通过排序来达到效果.</p>\n<p>距离最近,以用户发布动态的经纬度为准,计算两个点之间的距离,升序排序.其公式如下.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Distance &#x3D; R*Arccos(sin(MLatA)*sin(MLatB)*cos(MLonA-MLonB) + cos(MLatA)*cos(MLatB))*Pi&#x2F;180</span><br></pre></td></tr></table></figure>\n\n\n\n<p>点赞最多,以动态表中,字段为点赞的个数,进行降序排序.</p>\n<p>最新发布,以动态表中,创建时间为维度,进行降序排序.</p>\n<p>对于这些排序,在静态数据下,不会出现重复的ITEM.但是,倘若在浏览期间,有其他用户发布了最新的动态,此时对于在浏览期间的用户,便会看到有重复的ITEM出现.</p>\n<p>记得第一次遇见这类情形时,大脑中懵然一片.在模拟用户流程之后,得出了造成这一现象的原因是排序造成的.</p>\n<p>比如,现有一个有序列表[5,4,3,2,1],且列表中的数据不能被移除.</p>\n<p>用户A想浏览这个列表.其方式是通过每次从列表中获取两个ITEM,现在已经获取了2次,偏移量为4.第一次获取[5,4],第二次获取[3,2].</p>\n<p>就在此时,用户B向列表中插入了一个新的ITEM,其值为6.此时,这个有序列表就变成了[6,5,4,3,2,1]</p>\n<p>用户A第三次获取列表中的ITEM,通过前两次获取,用户A处于偏移量为4的位置.根据规则,第三次用户A拿到的数据为[2,1].即,用户A三次获得的数据为[5,4],[3,2],[2,1].</p>\n<p>下面我们就解决办法做出讨论</p>\n<h4 id=\"01-基于REDIS缓存\"><a href=\"#01-基于REDIS缓存\" class=\"headerlink\" title=\"01.基于REDIS缓存\"></a>01.基于REDIS缓存</h4><p>通过redis中的list结构,为每个用户临时维护一个浏览的list.从而解决数据重复的问题.  </p>\n<p>优点:各类客户端以服务器为准,可以高度统一.</p>\n<p>缺点:基于缓存做,那么在一定时间间隔内,用户无法看到最新状态</p>\n<p>结论:产品不允许,且服务器内存消耗,不合适</p>\n<h4 id=\"02-服务器基于数据的临界值-进行筛选\"><a href=\"#02-服务器基于数据的临界值-进行筛选\" class=\"headerlink\" title=\"02.服务器基于数据的临界值,进行筛选\"></a>02.服务器基于数据的临界值,进行筛选</h4><p>在SQL优化中,有一段经验,对于数据筛选排序,须尽量避免使用OFFSET,采用临界值的方式缩小数据集,进行TOPN查询.</p>\n<p>但是,需得注意的是,对于此类用法有一个前提,其排序字段需要有序性和唯一性.否则,会出现漏数据或者数据重复的问题.下面以最新发布为例.</p>\n<p>在最新发布中,按照创建时间降序排序. 而在APP设计中,产品并没有说明在1秒内,只允许一个用户发布动态.</p>\n<p>这也就决定了在1秒内可能会有N个用户发布动态,也就造成了创建时间的可重复性.</p>\n<p>下面是一个SQL的举例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select &#123;需要的数据&#125; from user_dynamic where dynamic.create_at &lt; &#123;&#123;客户端最后一条数据的时间戳&#125;&#125;   order by dynamic.create_at desc limit 50</span><br></pre></td></tr></table></figure>\n\n\n\n<p>对于上面的SQL语句,假设客户端给的时间戳为100,且在100这个时间戳内,有123条动态.如果用小于进行筛选,最大可漏数据为53.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select &#123;需要的数据&#125; from user_dynamic where dynamic.create_at &lt;&#x3D; &#123;&#123;客户端最后一条数据的时间戳&#125;&#125;   order by dynamic.create_at desc limit 50</span><br></pre></td></tr></table></figure>\n\n\n\n<p>对于上面的sql语句,假设客户端给的时间戳为100,且在100这个时间戳内,有123条动态.如果用小于等于进行筛选,最大重复数据为无限.</p>\n<p>之所以无限,是因为我取50条,最后一条数据的时间戳还是100.这会造成无限循环.</p>\n<h4 id=\"03-客户端去重\"><a href=\"#03-客户端去重\" class=\"headerlink\" title=\"03.客户端去重\"></a>03.客户端去重</h4><p>客户端在获取数据时,在本地维护一个set或者hashmap的数据集.其唯一key为动态的唯一ID.</p>\n<p>每次获取数据后,在展示之前,先通过set或者dictionary进行查询,发现有重复数据时,客户端不予以展示,并且会在广场的滚动视图的顶端对用户进行微小的提示.</p>\n<p>比如,有新动态啦! 有人距离你更进一步! 等一些列俏皮词汇,并且给与用户能回滚到最顶端,重新查看的功能.</p>\n"},{"title":"技术场景之计算大文件hash值","cover":"/img/technology-sense/sum_big_file_hash_value_title.png","subtitle":"技术场景之计算大文件hash值","author":{"nick":"袁苏东","link":"https://github.com/yuansudong"},"typora-root-url":"images","_content":"\n在应用开发中,通常需要存储用户的图像,以及各式各样的文件.因此,一个应用通常伴随着文件上传服务.\n\n\n\n由于网络,或者人为的因素可能会终止文件的上传. 因此,上传的文件,都需要对文件求一个HASH值.\n\n\n\n该HASH值,可以用于避免重复上传.以及检验文件的完整性.\n\n\n\n有一个十分大的文件,比如64G.此时需要对该文件求HASH值,以事实HASH值,与参数中的HASH值验证,用于判定此时磁盘上的中间文件是否是一个完整的文件.\n\n\n\n在一些应用中,是不允许上传如此大的文件.倘若,用户上传了如此大的文件,可以从参数中获取上传的文件大小.根据文件大小是否超过指定的阈值.\n\n\n\n如果超过,则拒绝该文件的上传.如果没有,则接受该文件的上传.\n\n\n\n但是,在一些极端的应用中,用户就是要上传如此大的文件.这使得程序必须去解决大文件带来的内存开销的问题.\n\n\n\n## 1.问题场景\n\n\n\n在文件上传的服务中,第一个版本,前辈采用了一次性读取文件数据到内存中.然后,将内存中的文件数据写到磁盘上,并求出一个MD5的HASH值.\n\n\n\n服务器通过该HASH值,与客户端所带的参数中的HASH值进行比较.倘若相等,则证明该文件是完整的.\n\n\n\n倘若不相等,则证明文件是不完整的.检测到不完整之后,向客户端返回相应的错误码.\n\n\n\n此种方式,对于小型文件,不会出问题.对于大型文件,肯定会出现内存不够用,从而触发LINUX的OOM.\n\n\n\n## 2.解决办法\n\n\n\n通过一番调研之后,发现除了一次性将数据交给HASH函数的方法之外,还有一种分块的方式.\n\n\n\nGO中的代码如下\n\n\n\n```go\n\nimport \"crypto/md5\"\nimport \"log\"\nimport \"fmt\"\n\nfunc main() {\n  md5h :=  md5.New()\n  body := make([]byte,1024)\n  md5h.Write(body)\n  log.Println(fmt.Sprintf(\"%x\",md5h.Sum(nil)))\n}\n\n```\n\n\n\n方法找到之后,就需要对其进行测试.通过GO中的基准测试,得出下列的数据.\n\n\n\n### 01.对10G文件进行压测\n\n\n\n```go\nRunning tool: C:\\Go\\bin\\go.exe test -benchmem -run=^$ -bench . blog.ysd.com\\compare_md5\n\n2021/02/09 13:29:05 f76fd62ea13fb9ba52b0d90be7f60f35\ngoos: windows\ngoarch: amd64\npkg: blog.ysd.com/compare_md5\nBenchmarkAllMd5-16              1  148678694500 ns/op  11394925680 B/op       872 allocs/op\n2021/02/09 13:31:05 f76fd62ea13fb9ba52b0d90be7f60f35\nBenchmarkBufMd5-16              1  118891937900 ns/op      7176 B/op        14 allocs/op\n2021/02/09 13:32:22 f76fd62ea13fb9ba52b0d90be7f60f35\nBenchmarkCopyMd5-16             1  77299399700 ns/op     36080 B/op        17 allocs/op\nPASS\nok    blog.ysd.com/compare_md5  347.011s\n```\n\n\n\n从上面可以看出,AllMd5花费时间,花费内存最多,其次是BufMd5,最后是CopyMd5.\n\n\n\n下面是相关代码\n\n\n\n```go\n\npackage compare_md5\n\nimport (\n  \"bufio\"\n  \"crypto/md5\"\n  \"fmt\"\n  \"io\"\n  \"io/ioutil\"\n  \"log\"\n  \"os\"\n)\n\nconst _FilePath = \"E://1//2.txt\"\n\n// ReadAllMd5 读取全部的md5\nfunc ReadAllMd5() {\n  data, err := ioutil.ReadFile(_FilePath)\n  if err != nil {\n    log.Fatalln(err.Error())\n  }\n  fmt.Sprintf(\"%x\", md5.Sum(data))\n}\n\n// BufMd5 具有缓冲区的md5\nfunc BufMd5() {\n  fileHandler, err := os.Open(_FilePath)\n  if err != nil {\n    log.Fatalln(err.Error())\n  }\n  defer fileHandler.Close()\n  reader := bufio.NewReader(fileHandler)\n  md5Handler := md5.New()\n  _, err = io.Copy(md5Handler, reader)\n  if err != nil {\n    log.Fatalln(err.Error())\n  }\n  fmt.Sprintf(\"%x\", md5Handler.Sum(nil))\n}\n\n// CopyMd5 使用md5拷贝的方式\nfunc CopyMd5() {\n  fileHandler, err := os.Open(_FilePath)\n  if err != nil {\n    log.Fatalln(err.Error())\n  }\n  defer fileHandler.Close()\n  md5Handler := md5.New()\n  _, err = io.Copy(md5Handler, fileHandler)\n  if err != nil {\n    log.Fatalln(err.Error())\n  }\n  fmt.Sprintf(\"%x\", md5Handler.Sum(nil))\n}\n```\n\n\n\n看了上面的代码是不是很奇怪.为什么一次性读取文件到内存,其执行速度为什么会那么慢.\n\n\n\n按理来说,不应该是越来越快么?\n\n\n\n在一番猜测下,应该是本机内存用尽,使用了SWAP导致.\n\n\n\n### 02.对一个9KB的文件进行基准测试\n\n\n\n```\npkg: blog.ysd.com/compare_md5\nBenchmarkAllMd5-16           2070      513634 ns/op     10337 B/op         8 allocs/op\nBenchmarkBufMd5-16           2833      498403 ns/op      5052 B/op         9 allocs/op\nBenchmarkCopyMd5-16          2695      428254 ns/op     33647 B/op         8 allocs/op\nPASS\nok    blog.ysd.com/compare_md5  6.117s\n```\n\n\n\n从上面的测试中,可以看出,BufMd5所用内存最少,其次是AllMd5,最后是CopyMd5.\n\n\n\n经过查看源代码.\n\n\n\nio.Copy() 该函数,会默认分配一个32K的缓冲区\n\n\n\n```\nfunc Copy(dst Writer, src Reader) (written int64, err error) {\n  return copyBuffer(dst, src, nil)\n}\nfunc copyBuffer(dst Writer, src Reader, buf []byte) (written int64, err error) {\n  if wt, ok := src.(WriterTo); ok {\n    return wt.WriteTo(dst)\n  }\n  if rt, ok := dst.(ReaderFrom); ok {\n    return rt.ReadFrom(src)\n  }\n  if buf == nil {\n    size := 32 * 1024 //  此处会分配一个32K的缓冲区\n    if l, ok := src.(*LimitedReader); ok && int64(size) > l.N {\n      if l.N < 1 {\n        size = 1\n      } else {\n        size = int(l.N)\n      }\n    }\n    buf = make([]byte, size)\n  }\n  for {\n    nr, er := src.Read(buf)\n    if nr > 0 {\n      nw, ew := dst.Write(buf[0:nr])\n      if nw > 0 {\n        written += int64(nw)\n      }\n      if ew != nil {\n        err = ew\n        break\n      }\n      if nr != nw {\n        err = ErrShortWrite\n        break\n      }\n    }\n    if er != nil {\n      if er != EOF {\n        err = er\n      }\n      break\n    }\n  }\n  return written, err\n}\n```\n\n\n\n而 bufio.NewReader(fileHandler),会默认分配一个4K的缓冲区.\n\n\n\n在一番比对下,最终采用用bufio.NewReader用于从socket中读取文件数据,在写入的过程中,计算md5值.\n\n\n\n只不过,使用了bufio.NewReaderSize(fileHandler,8K).即分配了一个8K的缓冲区.\n\n","source":"_posts/technology-sense-sum-big-file-hash-value.md","raw":"---\ntitle: 技术场景之计算大文件hash值\ncover:  /img/technology-sense/sum_big_file_hash_value_title.png\nsubtitle: 技术场景之计算大文件hash值\ncategories: \"技术场景\"\ntags: \"技术场景\"\nauthor:\n  nick: 袁苏东\n  link: https://github.com/yuansudong\ntypora-root-url: images\n---\n\n在应用开发中,通常需要存储用户的图像,以及各式各样的文件.因此,一个应用通常伴随着文件上传服务.\n\n\n\n由于网络,或者人为的因素可能会终止文件的上传. 因此,上传的文件,都需要对文件求一个HASH值.\n\n\n\n该HASH值,可以用于避免重复上传.以及检验文件的完整性.\n\n\n\n有一个十分大的文件,比如64G.此时需要对该文件求HASH值,以事实HASH值,与参数中的HASH值验证,用于判定此时磁盘上的中间文件是否是一个完整的文件.\n\n\n\n在一些应用中,是不允许上传如此大的文件.倘若,用户上传了如此大的文件,可以从参数中获取上传的文件大小.根据文件大小是否超过指定的阈值.\n\n\n\n如果超过,则拒绝该文件的上传.如果没有,则接受该文件的上传.\n\n\n\n但是,在一些极端的应用中,用户就是要上传如此大的文件.这使得程序必须去解决大文件带来的内存开销的问题.\n\n\n\n## 1.问题场景\n\n\n\n在文件上传的服务中,第一个版本,前辈采用了一次性读取文件数据到内存中.然后,将内存中的文件数据写到磁盘上,并求出一个MD5的HASH值.\n\n\n\n服务器通过该HASH值,与客户端所带的参数中的HASH值进行比较.倘若相等,则证明该文件是完整的.\n\n\n\n倘若不相等,则证明文件是不完整的.检测到不完整之后,向客户端返回相应的错误码.\n\n\n\n此种方式,对于小型文件,不会出问题.对于大型文件,肯定会出现内存不够用,从而触发LINUX的OOM.\n\n\n\n## 2.解决办法\n\n\n\n通过一番调研之后,发现除了一次性将数据交给HASH函数的方法之外,还有一种分块的方式.\n\n\n\nGO中的代码如下\n\n\n\n```go\n\nimport \"crypto/md5\"\nimport \"log\"\nimport \"fmt\"\n\nfunc main() {\n  md5h :=  md5.New()\n  body := make([]byte,1024)\n  md5h.Write(body)\n  log.Println(fmt.Sprintf(\"%x\",md5h.Sum(nil)))\n}\n\n```\n\n\n\n方法找到之后,就需要对其进行测试.通过GO中的基准测试,得出下列的数据.\n\n\n\n### 01.对10G文件进行压测\n\n\n\n```go\nRunning tool: C:\\Go\\bin\\go.exe test -benchmem -run=^$ -bench . blog.ysd.com\\compare_md5\n\n2021/02/09 13:29:05 f76fd62ea13fb9ba52b0d90be7f60f35\ngoos: windows\ngoarch: amd64\npkg: blog.ysd.com/compare_md5\nBenchmarkAllMd5-16              1  148678694500 ns/op  11394925680 B/op       872 allocs/op\n2021/02/09 13:31:05 f76fd62ea13fb9ba52b0d90be7f60f35\nBenchmarkBufMd5-16              1  118891937900 ns/op      7176 B/op        14 allocs/op\n2021/02/09 13:32:22 f76fd62ea13fb9ba52b0d90be7f60f35\nBenchmarkCopyMd5-16             1  77299399700 ns/op     36080 B/op        17 allocs/op\nPASS\nok    blog.ysd.com/compare_md5  347.011s\n```\n\n\n\n从上面可以看出,AllMd5花费时间,花费内存最多,其次是BufMd5,最后是CopyMd5.\n\n\n\n下面是相关代码\n\n\n\n```go\n\npackage compare_md5\n\nimport (\n  \"bufio\"\n  \"crypto/md5\"\n  \"fmt\"\n  \"io\"\n  \"io/ioutil\"\n  \"log\"\n  \"os\"\n)\n\nconst _FilePath = \"E://1//2.txt\"\n\n// ReadAllMd5 读取全部的md5\nfunc ReadAllMd5() {\n  data, err := ioutil.ReadFile(_FilePath)\n  if err != nil {\n    log.Fatalln(err.Error())\n  }\n  fmt.Sprintf(\"%x\", md5.Sum(data))\n}\n\n// BufMd5 具有缓冲区的md5\nfunc BufMd5() {\n  fileHandler, err := os.Open(_FilePath)\n  if err != nil {\n    log.Fatalln(err.Error())\n  }\n  defer fileHandler.Close()\n  reader := bufio.NewReader(fileHandler)\n  md5Handler := md5.New()\n  _, err = io.Copy(md5Handler, reader)\n  if err != nil {\n    log.Fatalln(err.Error())\n  }\n  fmt.Sprintf(\"%x\", md5Handler.Sum(nil))\n}\n\n// CopyMd5 使用md5拷贝的方式\nfunc CopyMd5() {\n  fileHandler, err := os.Open(_FilePath)\n  if err != nil {\n    log.Fatalln(err.Error())\n  }\n  defer fileHandler.Close()\n  md5Handler := md5.New()\n  _, err = io.Copy(md5Handler, fileHandler)\n  if err != nil {\n    log.Fatalln(err.Error())\n  }\n  fmt.Sprintf(\"%x\", md5Handler.Sum(nil))\n}\n```\n\n\n\n看了上面的代码是不是很奇怪.为什么一次性读取文件到内存,其执行速度为什么会那么慢.\n\n\n\n按理来说,不应该是越来越快么?\n\n\n\n在一番猜测下,应该是本机内存用尽,使用了SWAP导致.\n\n\n\n### 02.对一个9KB的文件进行基准测试\n\n\n\n```\npkg: blog.ysd.com/compare_md5\nBenchmarkAllMd5-16           2070      513634 ns/op     10337 B/op         8 allocs/op\nBenchmarkBufMd5-16           2833      498403 ns/op      5052 B/op         9 allocs/op\nBenchmarkCopyMd5-16          2695      428254 ns/op     33647 B/op         8 allocs/op\nPASS\nok    blog.ysd.com/compare_md5  6.117s\n```\n\n\n\n从上面的测试中,可以看出,BufMd5所用内存最少,其次是AllMd5,最后是CopyMd5.\n\n\n\n经过查看源代码.\n\n\n\nio.Copy() 该函数,会默认分配一个32K的缓冲区\n\n\n\n```\nfunc Copy(dst Writer, src Reader) (written int64, err error) {\n  return copyBuffer(dst, src, nil)\n}\nfunc copyBuffer(dst Writer, src Reader, buf []byte) (written int64, err error) {\n  if wt, ok := src.(WriterTo); ok {\n    return wt.WriteTo(dst)\n  }\n  if rt, ok := dst.(ReaderFrom); ok {\n    return rt.ReadFrom(src)\n  }\n  if buf == nil {\n    size := 32 * 1024 //  此处会分配一个32K的缓冲区\n    if l, ok := src.(*LimitedReader); ok && int64(size) > l.N {\n      if l.N < 1 {\n        size = 1\n      } else {\n        size = int(l.N)\n      }\n    }\n    buf = make([]byte, size)\n  }\n  for {\n    nr, er := src.Read(buf)\n    if nr > 0 {\n      nw, ew := dst.Write(buf[0:nr])\n      if nw > 0 {\n        written += int64(nw)\n      }\n      if ew != nil {\n        err = ew\n        break\n      }\n      if nr != nw {\n        err = ErrShortWrite\n        break\n      }\n    }\n    if er != nil {\n      if er != EOF {\n        err = er\n      }\n      break\n    }\n  }\n  return written, err\n}\n```\n\n\n\n而 bufio.NewReader(fileHandler),会默认分配一个4K的缓冲区.\n\n\n\n在一番比对下,最终采用用bufio.NewReader用于从socket中读取文件数据,在写入的过程中,计算md5值.\n\n\n\n只不过,使用了bufio.NewReaderSize(fileHandler,8K).即分配了一个8K的缓冲区.\n\n","slug":"technology-sense-sum-big-file-hash-value","published":1,"date":"2021-03-16T18:21:06.028Z","updated":"2021-03-16T18:31:56.774Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmchg4ks002p7gvl6u81f9uc","content":"<p>在应用开发中,通常需要存储用户的图像,以及各式各样的文件.因此,一个应用通常伴随着文件上传服务.</p>\n<p>由于网络,或者人为的因素可能会终止文件的上传. 因此,上传的文件,都需要对文件求一个HASH值.</p>\n<p>该HASH值,可以用于避免重复上传.以及检验文件的完整性.</p>\n<p>有一个十分大的文件,比如64G.此时需要对该文件求HASH值,以事实HASH值,与参数中的HASH值验证,用于判定此时磁盘上的中间文件是否是一个完整的文件.</p>\n<p>在一些应用中,是不允许上传如此大的文件.倘若,用户上传了如此大的文件,可以从参数中获取上传的文件大小.根据文件大小是否超过指定的阈值.</p>\n<p>如果超过,则拒绝该文件的上传.如果没有,则接受该文件的上传.</p>\n<p>但是,在一些极端的应用中,用户就是要上传如此大的文件.这使得程序必须去解决大文件带来的内存开销的问题.</p>\n<h2 id=\"1-问题场景\"><a href=\"#1-问题场景\" class=\"headerlink\" title=\"1.问题场景\"></a>1.问题场景</h2><p>在文件上传的服务中,第一个版本,前辈采用了一次性读取文件数据到内存中.然后,将内存中的文件数据写到磁盘上,并求出一个MD5的HASH值.</p>\n<p>服务器通过该HASH值,与客户端所带的参数中的HASH值进行比较.倘若相等,则证明该文件是完整的.</p>\n<p>倘若不相等,则证明文件是不完整的.检测到不完整之后,向客户端返回相应的错误码.</p>\n<p>此种方式,对于小型文件,不会出问题.对于大型文件,肯定会出现内存不够用,从而触发LINUX的OOM.</p>\n<h2 id=\"2-解决办法\"><a href=\"#2-解决办法\" class=\"headerlink\" title=\"2.解决办法\"></a>2.解决办法</h2><p>通过一番调研之后,发现除了一次性将数据交给HASH函数的方法之外,还有一种分块的方式.</p>\n<p>GO中的代码如下</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;crypto/md5&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  md5h :=  md5.New()</span><br><span class=\"line\">  body := <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>,<span class=\"number\">1024</span>)</span><br><span class=\"line\">  md5h.Write(body)</span><br><span class=\"line\">  log.Println(fmt.Sprintf(<span class=\"string\">&quot;%x&quot;</span>,md5h.Sum(<span class=\"literal\">nil</span>)))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>方法找到之后,就需要对其进行测试.通过GO中的基准测试,得出下列的数据.</p>\n<h3 id=\"01-对10G文件进行压测\"><a href=\"#01-对10G文件进行压测\" class=\"headerlink\" title=\"01.对10G文件进行压测\"></a>01.对10G文件进行压测</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Running tool: C:\\Go\\bin\\<span class=\"keyword\">go</span>.exe test -benchmem -run=^$ -bench . blog.ysd.com\\compare_md5</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">02</span>/<span class=\"number\">09</span> <span class=\"number\">13</span>:<span class=\"number\">29</span>:<span class=\"number\">05</span> f76fd62ea13fb9ba52b0d90be7f60f35</span><br><span class=\"line\">goos: windows</span><br><span class=\"line\">goarch: amd64</span><br><span class=\"line\">pkg: blog.ysd.com/compare_md5</span><br><span class=\"line\">BenchmarkAllMd5<span class=\"number\">-16</span>              <span class=\"number\">1</span>  <span class=\"number\">148678694500</span> ns/op  <span class=\"number\">11394925680</span> B/op       <span class=\"number\">872</span> allocs/op</span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">02</span>/<span class=\"number\">09</span> <span class=\"number\">13</span>:<span class=\"number\">31</span>:<span class=\"number\">05</span> f76fd62ea13fb9ba52b0d90be7f60f35</span><br><span class=\"line\">BenchmarkBufMd5<span class=\"number\">-16</span>              <span class=\"number\">1</span>  <span class=\"number\">118891937900</span> ns/op      <span class=\"number\">7176</span> B/op        <span class=\"number\">14</span> allocs/op</span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">02</span>/<span class=\"number\">09</span> <span class=\"number\">13</span>:<span class=\"number\">32</span>:<span class=\"number\">22</span> f76fd62ea13fb9ba52b0d90be7f60f35</span><br><span class=\"line\">BenchmarkCopyMd5<span class=\"number\">-16</span>             <span class=\"number\">1</span>  <span class=\"number\">77299399700</span> ns/op     <span class=\"number\">36080</span> B/op        <span class=\"number\">17</span> allocs/op</span><br><span class=\"line\">PASS</span><br><span class=\"line\">ok    blog.ysd.com/compare_md5  <span class=\"number\">347.011</span>s</span><br></pre></td></tr></table></figure>\n\n\n\n<p>从上面可以看出,AllMd5花费时间,花费内存最多,其次是BufMd5,最后是CopyMd5.</p>\n<p>下面是相关代码</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> compare_md5</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">&quot;bufio&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;crypto/md5&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;io&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;io/ioutil&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;os&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> _FilePath = <span class=\"string\">&quot;E://1//2.txt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ReadAllMd5 读取全部的md5</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ReadAllMd5</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  data, err := ioutil.ReadFile(_FilePath)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    log.Fatalln(err.Error())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  fmt.Sprintf(<span class=\"string\">&quot;%x&quot;</span>, md5.Sum(data))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// BufMd5 具有缓冲区的md5</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BufMd5</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  fileHandler, err := os.Open(_FilePath)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    log.Fatalln(err.Error())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">defer</span> fileHandler.Close()</span><br><span class=\"line\">  reader := bufio.NewReader(fileHandler)</span><br><span class=\"line\">  md5Handler := md5.New()</span><br><span class=\"line\">  _, err = io.Copy(md5Handler, reader)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    log.Fatalln(err.Error())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  fmt.Sprintf(<span class=\"string\">&quot;%x&quot;</span>, md5Handler.Sum(<span class=\"literal\">nil</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// CopyMd5 使用md5拷贝的方式</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">CopyMd5</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  fileHandler, err := os.Open(_FilePath)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    log.Fatalln(err.Error())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">defer</span> fileHandler.Close()</span><br><span class=\"line\">  md5Handler := md5.New()</span><br><span class=\"line\">  _, err = io.Copy(md5Handler, fileHandler)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    log.Fatalln(err.Error())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  fmt.Sprintf(<span class=\"string\">&quot;%x&quot;</span>, md5Handler.Sum(<span class=\"literal\">nil</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>看了上面的代码是不是很奇怪.为什么一次性读取文件到内存,其执行速度为什么会那么慢.</p>\n<p>按理来说,不应该是越来越快么?</p>\n<p>在一番猜测下,应该是本机内存用尽,使用了SWAP导致.</p>\n<h3 id=\"02-对一个9KB的文件进行基准测试\"><a href=\"#02-对一个9KB的文件进行基准测试\" class=\"headerlink\" title=\"02.对一个9KB的文件进行基准测试\"></a>02.对一个9KB的文件进行基准测试</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pkg: blog.ysd.com&#x2F;compare_md5</span><br><span class=\"line\">BenchmarkAllMd5-16           2070      513634 ns&#x2F;op     10337 B&#x2F;op         8 allocs&#x2F;op</span><br><span class=\"line\">BenchmarkBufMd5-16           2833      498403 ns&#x2F;op      5052 B&#x2F;op         9 allocs&#x2F;op</span><br><span class=\"line\">BenchmarkCopyMd5-16          2695      428254 ns&#x2F;op     33647 B&#x2F;op         8 allocs&#x2F;op</span><br><span class=\"line\">PASS</span><br><span class=\"line\">ok    blog.ysd.com&#x2F;compare_md5  6.117s</span><br></pre></td></tr></table></figure>\n\n\n\n<p>从上面的测试中,可以看出,BufMd5所用内存最少,其次是AllMd5,最后是CopyMd5.</p>\n<p>经过查看源代码.</p>\n<p>io.Copy() 该函数,会默认分配一个32K的缓冲区</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func Copy(dst Writer, src Reader) (written int64, err error) &#123;</span><br><span class=\"line\">  return copyBuffer(dst, src, nil)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func copyBuffer(dst Writer, src Reader, buf []byte) (written int64, err error) &#123;</span><br><span class=\"line\">  if wt, ok :&#x3D; src.(WriterTo); ok &#123;</span><br><span class=\"line\">    return wt.WriteTo(dst)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  if rt, ok :&#x3D; dst.(ReaderFrom); ok &#123;</span><br><span class=\"line\">    return rt.ReadFrom(src)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  if buf &#x3D;&#x3D; nil &#123;</span><br><span class=\"line\">    size :&#x3D; 32 * 1024 &#x2F;&#x2F;  此处会分配一个32K的缓冲区</span><br><span class=\"line\">    if l, ok :&#x3D; src.(*LimitedReader); ok &amp;&amp; int64(size) &gt; l.N &#123;</span><br><span class=\"line\">      if l.N &lt; 1 &#123;</span><br><span class=\"line\">        size &#x3D; 1</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        size &#x3D; int(l.N)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    buf &#x3D; make([]byte, size)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  for &#123;</span><br><span class=\"line\">    nr, er :&#x3D; src.Read(buf)</span><br><span class=\"line\">    if nr &gt; 0 &#123;</span><br><span class=\"line\">      nw, ew :&#x3D; dst.Write(buf[0:nr])</span><br><span class=\"line\">      if nw &gt; 0 &#123;</span><br><span class=\"line\">        written +&#x3D; int64(nw)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      if ew !&#x3D; nil &#123;</span><br><span class=\"line\">        err &#x3D; ew</span><br><span class=\"line\">        break</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      if nr !&#x3D; nw &#123;</span><br><span class=\"line\">        err &#x3D; ErrShortWrite</span><br><span class=\"line\">        break</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if er !&#x3D; nil &#123;</span><br><span class=\"line\">      if er !&#x3D; EOF &#123;</span><br><span class=\"line\">        err &#x3D; er</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      break</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return written, err</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>而 bufio.NewReader(fileHandler),会默认分配一个4K的缓冲区.</p>\n<p>在一番比对下,最终采用用bufio.NewReader用于从socket中读取文件数据,在写入的过程中,计算md5值.</p>\n<p>只不过,使用了bufio.NewReaderSize(fileHandler,8K).即分配了一个8K的缓冲区.</p>\n","site":{"data":{"contact":[{"title":"github","icon":"icon-github","link":"https://github.com/yuansudong"},{"title":"email","icon":"icon-email","link":"mailto:1145919989@qq.com"},{"title":"qq","icon":"icon-qq","link":"/atom.xml"}],"favicons":["<link rel=\"shortcut icon\" href=\"/img//favicon.ico\">","<link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/img//favicon-16x16.png\">","<link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/img//favicon-32x32.png\">","<link rel=\"icon\" type=\"image/png\" sizes=\"48x48\" href=\"/img//favicon-48x48.png\">","<link rel=\"manifest\" href=\"/img//manifest.json\">","<meta name=\"mobile-web-app-capable\" content=\"yes\">","<meta name=\"theme-color\" content=\"#fff\">","<meta name=\"application-name\">","<link rel=\"apple-touch-icon\" sizes=\"57x57\" href=\"/img//apple-touch-icon-57x57.png\">","<link rel=\"apple-touch-icon\" sizes=\"60x60\" href=\"/img//apple-touch-icon-60x60.png\">","<link rel=\"apple-touch-icon\" sizes=\"72x72\" href=\"/img//apple-touch-icon-72x72.png\">","<link rel=\"apple-touch-icon\" sizes=\"76x76\" href=\"/img//apple-touch-icon-76x76.png\">","<link rel=\"apple-touch-icon\" sizes=\"114x114\" href=\"/img//apple-touch-icon-114x114.png\">","<link rel=\"apple-touch-icon\" sizes=\"120x120\" href=\"/img//apple-touch-icon-120x120.png\">","<link rel=\"apple-touch-icon\" sizes=\"144x144\" href=\"/img//apple-touch-icon-144x144.png\">","<link rel=\"apple-touch-icon\" sizes=\"152x152\" href=\"/img//apple-touch-icon-152x152.png\">","<link rel=\"apple-touch-icon\" sizes=\"167x167\" href=\"/img//apple-touch-icon-167x167.png\">","<link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/img//apple-touch-icon-180x180.png\">","<link rel=\"apple-touch-icon\" sizes=\"1024x1024\" href=\"/img//apple-touch-icon-1024x1024.png\">","<meta name=\"apple-mobile-web-app-capable\" content=\"yes\">","<meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black-translucent\">","<meta name=\"apple-mobile-web-app-title\">","<meta name=\"msapplication-TileColor\" content=\"#fff\">","<meta name=\"msapplication-TileImage\" content=\"/img//mstile-144x144.png\">","<meta name=\"msapplication-config\" content=\"/img//browserconfig.xml\">"]}},"excerpt":"","more":"<p>在应用开发中,通常需要存储用户的图像,以及各式各样的文件.因此,一个应用通常伴随着文件上传服务.</p>\n<p>由于网络,或者人为的因素可能会终止文件的上传. 因此,上传的文件,都需要对文件求一个HASH值.</p>\n<p>该HASH值,可以用于避免重复上传.以及检验文件的完整性.</p>\n<p>有一个十分大的文件,比如64G.此时需要对该文件求HASH值,以事实HASH值,与参数中的HASH值验证,用于判定此时磁盘上的中间文件是否是一个完整的文件.</p>\n<p>在一些应用中,是不允许上传如此大的文件.倘若,用户上传了如此大的文件,可以从参数中获取上传的文件大小.根据文件大小是否超过指定的阈值.</p>\n<p>如果超过,则拒绝该文件的上传.如果没有,则接受该文件的上传.</p>\n<p>但是,在一些极端的应用中,用户就是要上传如此大的文件.这使得程序必须去解决大文件带来的内存开销的问题.</p>\n<h2 id=\"1-问题场景\"><a href=\"#1-问题场景\" class=\"headerlink\" title=\"1.问题场景\"></a>1.问题场景</h2><p>在文件上传的服务中,第一个版本,前辈采用了一次性读取文件数据到内存中.然后,将内存中的文件数据写到磁盘上,并求出一个MD5的HASH值.</p>\n<p>服务器通过该HASH值,与客户端所带的参数中的HASH值进行比较.倘若相等,则证明该文件是完整的.</p>\n<p>倘若不相等,则证明文件是不完整的.检测到不完整之后,向客户端返回相应的错误码.</p>\n<p>此种方式,对于小型文件,不会出问题.对于大型文件,肯定会出现内存不够用,从而触发LINUX的OOM.</p>\n<h2 id=\"2-解决办法\"><a href=\"#2-解决办法\" class=\"headerlink\" title=\"2.解决办法\"></a>2.解决办法</h2><p>通过一番调研之后,发现除了一次性将数据交给HASH函数的方法之外,还有一种分块的方式.</p>\n<p>GO中的代码如下</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;crypto/md5&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  md5h :=  md5.New()</span><br><span class=\"line\">  body := <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>,<span class=\"number\">1024</span>)</span><br><span class=\"line\">  md5h.Write(body)</span><br><span class=\"line\">  log.Println(fmt.Sprintf(<span class=\"string\">&quot;%x&quot;</span>,md5h.Sum(<span class=\"literal\">nil</span>)))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>方法找到之后,就需要对其进行测试.通过GO中的基准测试,得出下列的数据.</p>\n<h3 id=\"01-对10G文件进行压测\"><a href=\"#01-对10G文件进行压测\" class=\"headerlink\" title=\"01.对10G文件进行压测\"></a>01.对10G文件进行压测</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Running tool: C:\\Go\\bin\\<span class=\"keyword\">go</span>.exe test -benchmem -run=^$ -bench . blog.ysd.com\\compare_md5</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">02</span>/<span class=\"number\">09</span> <span class=\"number\">13</span>:<span class=\"number\">29</span>:<span class=\"number\">05</span> f76fd62ea13fb9ba52b0d90be7f60f35</span><br><span class=\"line\">goos: windows</span><br><span class=\"line\">goarch: amd64</span><br><span class=\"line\">pkg: blog.ysd.com/compare_md5</span><br><span class=\"line\">BenchmarkAllMd5<span class=\"number\">-16</span>              <span class=\"number\">1</span>  <span class=\"number\">148678694500</span> ns/op  <span class=\"number\">11394925680</span> B/op       <span class=\"number\">872</span> allocs/op</span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">02</span>/<span class=\"number\">09</span> <span class=\"number\">13</span>:<span class=\"number\">31</span>:<span class=\"number\">05</span> f76fd62ea13fb9ba52b0d90be7f60f35</span><br><span class=\"line\">BenchmarkBufMd5<span class=\"number\">-16</span>              <span class=\"number\">1</span>  <span class=\"number\">118891937900</span> ns/op      <span class=\"number\">7176</span> B/op        <span class=\"number\">14</span> allocs/op</span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">02</span>/<span class=\"number\">09</span> <span class=\"number\">13</span>:<span class=\"number\">32</span>:<span class=\"number\">22</span> f76fd62ea13fb9ba52b0d90be7f60f35</span><br><span class=\"line\">BenchmarkCopyMd5<span class=\"number\">-16</span>             <span class=\"number\">1</span>  <span class=\"number\">77299399700</span> ns/op     <span class=\"number\">36080</span> B/op        <span class=\"number\">17</span> allocs/op</span><br><span class=\"line\">PASS</span><br><span class=\"line\">ok    blog.ysd.com/compare_md5  <span class=\"number\">347.011</span>s</span><br></pre></td></tr></table></figure>\n\n\n\n<p>从上面可以看出,AllMd5花费时间,花费内存最多,其次是BufMd5,最后是CopyMd5.</p>\n<p>下面是相关代码</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> compare_md5</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">&quot;bufio&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;crypto/md5&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;io&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;io/ioutil&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;os&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> _FilePath = <span class=\"string\">&quot;E://1//2.txt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ReadAllMd5 读取全部的md5</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ReadAllMd5</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  data, err := ioutil.ReadFile(_FilePath)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    log.Fatalln(err.Error())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  fmt.Sprintf(<span class=\"string\">&quot;%x&quot;</span>, md5.Sum(data))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// BufMd5 具有缓冲区的md5</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BufMd5</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  fileHandler, err := os.Open(_FilePath)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    log.Fatalln(err.Error())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">defer</span> fileHandler.Close()</span><br><span class=\"line\">  reader := bufio.NewReader(fileHandler)</span><br><span class=\"line\">  md5Handler := md5.New()</span><br><span class=\"line\">  _, err = io.Copy(md5Handler, reader)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    log.Fatalln(err.Error())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  fmt.Sprintf(<span class=\"string\">&quot;%x&quot;</span>, md5Handler.Sum(<span class=\"literal\">nil</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// CopyMd5 使用md5拷贝的方式</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">CopyMd5</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  fileHandler, err := os.Open(_FilePath)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    log.Fatalln(err.Error())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">defer</span> fileHandler.Close()</span><br><span class=\"line\">  md5Handler := md5.New()</span><br><span class=\"line\">  _, err = io.Copy(md5Handler, fileHandler)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    log.Fatalln(err.Error())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  fmt.Sprintf(<span class=\"string\">&quot;%x&quot;</span>, md5Handler.Sum(<span class=\"literal\">nil</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>看了上面的代码是不是很奇怪.为什么一次性读取文件到内存,其执行速度为什么会那么慢.</p>\n<p>按理来说,不应该是越来越快么?</p>\n<p>在一番猜测下,应该是本机内存用尽,使用了SWAP导致.</p>\n<h3 id=\"02-对一个9KB的文件进行基准测试\"><a href=\"#02-对一个9KB的文件进行基准测试\" class=\"headerlink\" title=\"02.对一个9KB的文件进行基准测试\"></a>02.对一个9KB的文件进行基准测试</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pkg: blog.ysd.com&#x2F;compare_md5</span><br><span class=\"line\">BenchmarkAllMd5-16           2070      513634 ns&#x2F;op     10337 B&#x2F;op         8 allocs&#x2F;op</span><br><span class=\"line\">BenchmarkBufMd5-16           2833      498403 ns&#x2F;op      5052 B&#x2F;op         9 allocs&#x2F;op</span><br><span class=\"line\">BenchmarkCopyMd5-16          2695      428254 ns&#x2F;op     33647 B&#x2F;op         8 allocs&#x2F;op</span><br><span class=\"line\">PASS</span><br><span class=\"line\">ok    blog.ysd.com&#x2F;compare_md5  6.117s</span><br></pre></td></tr></table></figure>\n\n\n\n<p>从上面的测试中,可以看出,BufMd5所用内存最少,其次是AllMd5,最后是CopyMd5.</p>\n<p>经过查看源代码.</p>\n<p>io.Copy() 该函数,会默认分配一个32K的缓冲区</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func Copy(dst Writer, src Reader) (written int64, err error) &#123;</span><br><span class=\"line\">  return copyBuffer(dst, src, nil)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func copyBuffer(dst Writer, src Reader, buf []byte) (written int64, err error) &#123;</span><br><span class=\"line\">  if wt, ok :&#x3D; src.(WriterTo); ok &#123;</span><br><span class=\"line\">    return wt.WriteTo(dst)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  if rt, ok :&#x3D; dst.(ReaderFrom); ok &#123;</span><br><span class=\"line\">    return rt.ReadFrom(src)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  if buf &#x3D;&#x3D; nil &#123;</span><br><span class=\"line\">    size :&#x3D; 32 * 1024 &#x2F;&#x2F;  此处会分配一个32K的缓冲区</span><br><span class=\"line\">    if l, ok :&#x3D; src.(*LimitedReader); ok &amp;&amp; int64(size) &gt; l.N &#123;</span><br><span class=\"line\">      if l.N &lt; 1 &#123;</span><br><span class=\"line\">        size &#x3D; 1</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        size &#x3D; int(l.N)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    buf &#x3D; make([]byte, size)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  for &#123;</span><br><span class=\"line\">    nr, er :&#x3D; src.Read(buf)</span><br><span class=\"line\">    if nr &gt; 0 &#123;</span><br><span class=\"line\">      nw, ew :&#x3D; dst.Write(buf[0:nr])</span><br><span class=\"line\">      if nw &gt; 0 &#123;</span><br><span class=\"line\">        written +&#x3D; int64(nw)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      if ew !&#x3D; nil &#123;</span><br><span class=\"line\">        err &#x3D; ew</span><br><span class=\"line\">        break</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      if nr !&#x3D; nw &#123;</span><br><span class=\"line\">        err &#x3D; ErrShortWrite</span><br><span class=\"line\">        break</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if er !&#x3D; nil &#123;</span><br><span class=\"line\">      if er !&#x3D; EOF &#123;</span><br><span class=\"line\">        err &#x3D; er</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      break</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return written, err</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>而 bufio.NewReader(fileHandler),会默认分配一个4K的缓冲区.</p>\n<p>在一番比对下,最终采用用bufio.NewReader用于从socket中读取文件数据,在写入的过程中,计算md5值.</p>\n<p>只不过,使用了bufio.NewReaderSize(fileHandler,8K).即分配了一个8K的缓冲区.</p>\n"},{"title":"聊聊golang中,如何开发一个protobuf plugin","cover":"/img/golang/protobuffer_plugin_title.png","subtitle":"聊聊golang中,如何开发一个protobuf plugin","author":{"nick":"袁苏东","link":"https://github.com/yuansudong"},"typora-root-url":"development-manual-jwt","_content":"\n以下是此次测试的protobuf文件.\n\n```protobuf\nsyntax = \"proto3\";\npackage service.account.v1;\noption go_package = \"github.com/yuansudong/protoc-gen-template/gen/gopb/service/account/normal/pbv1;pbv1\";\nimport \"google/api/annotations.proto\";\n// C2SInnerLogin 内部用户登录请求\nmessage C2SInnerLogin {\n  // UserName  用户名\n  string UserName = 1;\n  // Passsword 密码\n  string Password = 2;\n  // AppID 引用ID\n  string AppID = 3;\n\n}\n// S2CInnerLogin 内部用户登录响应\nmessage S2CInnerLogin {\n  // Token 访问令牌\n  string Token = 1;\n}\n// C2SInnerSignin 内部用户注册请求\nmessage C2SInnerSignin {\n  // UserName  用户名\n  string UserName = 1;\n  // Passsword 密码\n  string Password = 2;\n  // AppID 引用程序ID\n  string AppID = 3;\n}\n// S2CInnerUserSignin 注册时的响应\nmessage S2CInnerSignin {\n  string Token = 1;\n}\n// Account 账户服务V1版本\nservice Account {\n  // InnerLogin 公司渠道登录\n  rpc InnerLogin(C2SInnerLogin) returns (S2CInnerLogin) {\n    option (google.api.http) = {\n      post: \"/v1/inner/login\"\n      body: \"*\"\n    };\n  };\n  // InnerSignin 公司渠道注册\n  rpc InnerSignin(C2SInnerSignin) returns (S2CInnerSignin) {\n    option (google.api.http) = {\n      post: \"/v1/inner/signin\"\n      body: \"*\"\n    };\n  };\n}\n\n```\n\n\n\n## 1.解析流程\n\n\n\n### 01.protoc解析protobuf文件\n\n\n\n```bash\n${workspaceRoot}/protoc.exe \n        --proto_path=${workspaceRoot}/protos/v3 \n        --go_out=plugins=grpc:${env.GOPATH}/src \n        --template_out=lang=go:import_prefix=cccc:${env.GOPATH}/src \n        ${workspaceRoot}/protos/v3/models/address.proto\n```\n\n\n\n${workspaceRoot} 等价于工程的根目录\n\n${env.GOPATH} 等价于环境变量中的GOPATH\n\n\n\n此处需要注意的是，protobuf的插件有命令要求，必须以protoc-gen-[名称]的格式命名,否则protoc找不到.\n\n\n\n其中 --{{xxx}}_out 可以随意增加.\n\n\n\n比如:\n\n\n\ngo_out等价的protobuf的插件名称为protoc-gen-go.\n\n\n\ntemplate_out等价的protobuf的名称为protoc-gen-template.\n\n\n\nhaha_out等价的protobuf的名称为protoc-gen-haha\n\n\n\n### 02.protoc-gen-template解析数据\n\n\n\nprotoc解析完毕后,将序列化之后的二进制数据,以标准输入的方式传递给protoc-gen-template.\n\n\n\nprotoc-gen-template从标准输入读取二进制数据,读取完毕之后,进行反序列化,得到plugin.proto中的一个message,名为CodeGeneratorRequest\n\n\n\n其结构如下\n\n\n\n```go\ntype CodeGeneratorRequest struct {\n  FileToGenerate []string `protobuf:\"bytes,1,rep,name=file_to_generate,json=fileToGenerate\" json:\"file_to_generate,omitempty\"`\n  Parameter *string `protobuf:\"bytes,2,opt,name=parameter\" json:\"parameter,omitempty\"`\n  ProtoFile []*descriptorpb.FileDescriptorProto `protobuf:\"bytes,15,rep,name=proto_file,json=protoFile\" json:\"proto_file,omitempty\"`\n  CompilerVersion *Version `protobuf:\"bytes,3,opt,name=compiler_version,json=compilerVersion\" json:\"compiler_version,omitempty\"`\n}\n```\n\n\n\nFileToGenerate 进行编译的protobuf的名称,有多少protobuf文件,就有多个文件名,此处就是 ${workspaceRoot}/protos/v3/models/address.proto\n\n\n\nParameter 命令行传入的参数,对于此处就是lang=go;import_prefix=cc ,插件传参的格式如下.\n\n\n\n```ABAP\n\n--{{插件名称}}_out=lang={{命令行参数}}:{{生成文件路径}}\n\n比如:\n\n${workspaceRoot}/protoc.exe \n        --proto_path=${workspaceRoot}/protos/v3 \n        --template_out=lang=go;import_prefix=cccc:${env.GOPATH}/src \n        ${workspaceRoot}/protos/v3/models/address.proto\n其中lang=go;import_prefix=cc 就是命令行传入的参数\n```\n\n\n\nProtoFile 将protobuf数据,反序列化成了结构体数组,每个元素包含着一个proto文件的所有数据\n\n\n\nCompilerVersion 协议版本号\n\n\n\n样例代码如下:\n\n\n\n```go\n// GetRequest 用于从一个标准输入中,获取一个解析请求,io.Reader等价于os.Stdin\nfunc GetRequest(r io.Reader) (*plugin.CodeGeneratorRequest, error) {\n  input, err := ioutil.ReadAll(r)\n  if err != nil {\n    return nil, fmt.Errorf(\"读取标准输入失败: %v\", err)\n  }\n  req := new(plugin.CodeGeneratorRequest)\n  if err = proto.Unmarshal(input, req); err != nil {\n    return nil, fmt.Errorf(\"读取标准输入失败: %v\", err)\n  }\n  log.Println(\"参数是:\",req.Parameter)\n  return req, nil\n}\n```\n\n\n\n运行下列命令\n\n\n\n```bash\n\n${workspaceRoot}/protoc.exe \n        --proto_path=${workspaceRoot}/protos/v3 \n        --go_out=plugins=grpc:${env.GOPATH}/src \n        --template_out=lang=go;import_prefix=cccc:${env.GOPATH}/src \n        ${workspaceRoot}/protos/v3/models/address.proto\n```\n\n\n\n输出的结果为\n\n\n\n```\n2021/03/14 12:48:23 参数是: fix=go;import_prefix=cccc\n```\n\n\n\n### 03.解析File类型\n\n\n\nProtoFile的类型为descriptor.proto中的FileDescriptorProto.其结构如下.\n\n\n\n```go\n\ntype FileDescriptorProto struct {\n  // Name 文件名\n  Name    *string `protobuf:\"bytes,1,opt,name=name\" json:\"name,omitempty\"`       // file name, relative to root of source tree\n  // Package 包名\n  Package *string `protobuf:\"bytes,2,opt,name=package\" json:\"package,omitempty\"` // e.g. \"foo\", \"foo.bar\", etc.\n  // Dependency 该文件依赖哪些proto文件,比如本例中,依赖就有google/api/annotations.proto\n  Dependency []string `protobuf:\"bytes,3,rep,name=dependency\" json:\"dependency,omitempty\"` \n  PublicDependency []int32 `protobuf:\"varint,10,rep,name=public_dependency,json=publicDependency\" json:\"public_dependency,omitempty\"`\n  WeakDependency []int32 `protobuf:\"varint,11,rep,name=weak_dependency,json=weakDependency\" json:\"weak_dependency,omitempty\"`\n  // MessageType 该proto文件下的message类型\n  MessageType []*DescriptorProto        `protobuf:\"bytes,4,rep,name=message_type,json=messageType\" json:\"message_type,omitempty\"`\n  // EnumType 该proto文件下的enum类型\n  EnumType    []*EnumDescriptorProto    `protobuf:\"bytes,5,rep,name=enum_type,json=enumType\" json:\"enum_type,omitempty\"`\n  // Service 该proto文件下的message类型\n  Service     []*ServiceDescriptorProto `protobuf:\"bytes,6,rep,name=service\" json:\"service,omitempty\"`\n  // Extension 扩展\n  Extension   []*FieldDescriptorProto   `protobuf:\"bytes,7,rep,name=extension\" json:\"extension,omitempty\"`\n  // Options选项,比如go_package就是一个选项\n  Options     *FileOptions              `protobuf:\"bytes,8,opt,name=options\" json:\"options,omitempty\"`\n  // SourceCodeInfo 针对于optional的信息\n  SourceCodeInfo *SourceCodeInfo `protobuf:\"bytes,9,opt,name=source_code_info,json=sourceCodeInfo\" json:\"source_code_info,omitempty\"`\n  // syntax 指定是proto2,还是proto3\n  Syntax *string `protobuf:\"bytes,12,opt,name=syntax\" json:\"syntax,omitempty\"`\n}\n```\n\n\n\n样例demo代码:\n\n\n\n```go\n\nfunc (r *Registry) Load(req *plugin.CodeGeneratorRequest) error {\n  for _, file := range req.GetProtoFile() {\n    pkg := GoPackage{   \n    Path: r._GoPackagePath(file),\n    Name: r._DefaultGoPackageName(file),\n    }\n    if err := r.ReserveGoPackageAlias(pkg.Name, pkg.Path); err != nil {\n      for i := 0; ; i++ {\n        alias := fmt.Sprintf(\"%s_%d\", pkg.Name, i)\n        if err := r.ReserveGoPackageAlias(alias, pkg.Path); err == nil {\n          pkg.Alias = alias\n          break\n        }\n      }\n    }\n    f := &File{\n      FileDescriptorProto: file,\n      GoPkg:               pkg,\n    }\n    r._Files[file.GetName()] = f\n    r._RegisterMsg(f, nil, file.GetMessageType())\n    r._RegisterEnum(f, nil, file.GetEnumType())\n    }\n}\n```\n\n\n\n### 04.解析Message类型\n\n\n\nMessageType的元素类型为descriptor.proto中的DescriptorProto message,其结构如下\n\n\n\n```go\n\ntype DescriptorProto struct {\n  // Name 消息名,比如C2SInnerLogin\n  Name           *string                           `protobuf:\"bytes,1,opt,name=name\" json:\"name,omitempty\"`\n  // Field 该消息下有哪些字段\n  Field          []*FieldDescriptorProto           `protobuf:\"bytes,2,rep,name=field\" json:\"field,omitempty\"`\n  // Extension 该消息下有哪些扩展\n  Extension      []*FieldDescriptorProto           `protobuf:\"bytes,6,rep,name=extension\" json:\"extension,omitempty\"`\n  // NestedType该消息下有哪些嵌套类型\n  NestedType     []*DescriptorProto                `protobuf:\"bytes,3,rep,name=nested_type,json=nestedType\" json:\"nested_type,omitempty\"`\n  // EnumType 该消息下有哪些枚举类型\n  EnumType       []*EnumDescriptorProto            `protobuf:\"bytes,4,rep,name=enum_type,json=enumType\" json:\"enum_type,omitempty\"`\n  // ExtensionRange 该消息的扩展范围\n  ExtensionRange []*DescriptorProto_ExtensionRange `protobuf:\"bytes,5,rep,name=extension_range,json=extensionRange\" json:\"extension_range,omitempty\"`\n  // OneofDecl  该消息下oneof结构\n  OneofDecl      []*OneofDescriptorProto           `protobuf:\"bytes,8,rep,name=oneof_decl,json=oneofDecl\" json:\"oneof_decl,omitempty\"`\n  // Options 该消息下有哪些选项\n  Options        *MessageOptions                   `protobuf:\"bytes,7,opt,name=options\" json:\"options,omitempty\"`\n  // ReservedRange 预留范围\n  ReservedRange  []*DescriptorProto_ReservedRange  `protobuf:\"bytes,9,rep,name=reserved_range,json=reservedRange\" json:\"reserved_range,omitempty\"`\n  // ReservedName 预留名称\n  ReservedName []string `protobuf:\"bytes,10,rep,name=reserved_name,json=reservedName\" json:\"reserved_name,omitempty\"`\n}\n\n```\n\n\n\nField 的元素类型为descriptor.proto中的FieldDescriptorProto message,其结构如下\n\n\n\n```go\ntype FieldDescriptorProto struct {\n  // Name 字段名称\n  Name   *string                     `protobuf:\"bytes,1,opt,name=name\" json:\"name,omitempty\"`\n  // Number 字段索引,比如 int64 ha=1,其中1就为Number\n  Number *int32                      `protobuf:\"varint,3,opt,name=number\" json:\"number,omitempty\"`\n  // Label 用于指定该字段是required,repeated,optional 类型\n  Label  *FieldDescriptorProto_Label `protobuf:\"varint,4,opt,name=label,enum=google.protobuf.FieldDescriptorProto_Label\" json:\"label,omitempty\"`\n  // Type 指定字段的类型\n  Type *FieldDescriptorProto_Type `protobuf:\"varint,5,opt,name=type,enum=google.protobuf.FieldDescriptorProto_Type\" json:\"type,omitempty\"`\n  // TypeName 对于字段是message和enum类型的,这个代表和此种类型的名称\n  TypeName *string `protobuf:\"bytes,6,opt,name=type_name,json=typeName\" json:\"type_name,omitempty\"`\n  // Extendee  扩展相关\n  Extendee *string `protobuf:\"bytes,2,opt,name=extendee\" json:\"extendee,omitempty\"`\n  // DefaultValue 字段的默认值\n  DefaultValue *string `protobuf:\"bytes,7,opt,name=default_value,json=defaultValue\" json:\"default_value,omitempty\"`\n  // OneofIndex oneof类型的索引\n  OneofIndex *int32 `protobuf:\"varint,9,opt,name=oneof_index,json=oneofIndex\" json:\"oneof_index,omitempty\"`\n  // JsonName 该字段对应的JSON字符串\n  JsonName *string       `protobuf:\"bytes,10,opt,name=json_name,json=jsonName\" json:\"json_name,omitempty\"`\n  // Options 字段呃选项\n  Options  *FieldOptions `protobuf:\"bytes,8,opt,name=options\" json:\"options,omitempty\"`\n  Proto3Optional *bool `protobuf:\"varint,17,opt,name=proto3_optional,json=proto3Optional\" json:\"proto3_optional,omitempty\"`\n}\n```\n\n\n\n样例代码:\n\n\n\n```go\n\n// _RegisterMsg 注册message类型\nfunc (r *Registry) _RegisterMsg(file *File, outerPath []string, msgs []*descriptor.DescriptorProto) {\n  for i, md := range msgs {\n    m := &Message{\n      File:            file,\n      Outers:          outerPath,\n      DescriptorProto: md,\n      Index:           i,\n    }\n    for _, fd := range md.GetField() {\n      m.Fields = append(m.Fields, &Field{\n        Message:              m,\n        FieldDescriptorProto: fd,\n      })\n    }\n    file.Messages = append(file.Messages, m)\n    r._Msgs[m.FQMN()] = m\n    var outers []string\n    outers = append(outers, outerPath...)\n    outers = append(outers, m.GetName())\n    r._RegisterMsg(file, outers, m.GetNestedType())\n    r._RegisterEnum(file, outers, m.GetEnumType())\n  }\n}\n```\n\n\n\n### 05.解析枚举类型\n\n\n\nEnumType 的元素类型为descriptor.proto中的EnumDescriptorProto\n\nmessage,其结构如下\n\n\n\n```\ntype EnumDescriptorProto struct {  \n  // Name 枚举名称\n  Name    *string                     `protobuf:\"bytes,1,opt,name=name\" json:\"name,omitempty\"`\n  // Value 枚举值\n  Value   []*EnumValueDescriptorProto `protobuf:\"bytes,2,rep,name=value\" json:\"value,omitempty\"`\n  // Options 枚举选项\n  Options *EnumOptions                `protobuf:\"bytes,3,opt,name=options\" json:\"options,omitempty\"`\n  // ReservedRange 预留范围\n  ReservedRange []*EnumDescriptorProto_EnumReservedRange `protobuf:\"bytes,4,rep,name=reserved_range,json=reservedRange\" json:\"reserved_range,omitempty\"`\n  // ReservedName 预留名称\n  ReservedName []string `protobuf:\"bytes,5,rep,name=reserved_name,json=reservedName\" json:\"reserved_name,omitempty\"`\n}\n```\n\n\n\n样例代码如下\n\n\n\n```go\ntype MethodDescriptorProto struct {\n  // Name rpc的名称\n  Name *string `protobuf:\"bytes,1,opt,name=name\" json:\"name,omitempty\"`\n  // InputType rpc中的请求类型\n  InputType  *string        `protobuf:\"bytes,2,opt,name=input_type,json=inputType\" json:\"input_type,omitempty\"`\n  // OutputType rpc中的返回类型\n  OutputType *string        `protobuf:\"bytes,3,opt,name=output_type,json=outputType\" json:\"output_type,omitempty\"`\n  // Options rpc中的选项\n  Options    *MethodOptions `protobuf:\"bytes,4,opt,name=options\" json:\"options,omitempty\"`\n  // ClientStreaming 是否是客户端流模式\n  ClientStreaming *bool `protobuf:\"varint,5,opt,name=client_streaming,json=clientStreaming,def=0\" json:\"client_streaming,omitempty\"`\n  // ServerStreaming 是否是服务端流模式\n  ServerStreaming *bool `protobuf:\"varint,6,opt,name=server_streaming,json=serverStreaming,def=0\" json:\"server_streaming,omitempty\"`\n}\n```\n\n\n\n### 06.解析service类型\n\n\n\nservice 的元素类型为descriptor.proto中的ServiceDescriptorProto\n\n message,其结构如下\n\n\n\n```go\ntype ServiceDescriptorProto struct {\n  // Name service的名称\n  Name    *string                  `protobuf:\"bytes,1,opt,name=name\" json:\"name,omitempty\"`\n  // Method service包含的rpc方法\n  Method  []*MethodDescriptorProto `protobuf:\"bytes,2,rep,name=method\" json:\"method,omitempty\"`\n  // Options service中包含的选项\n  Options *ServiceOptions          `protobuf:\"bytes,3,opt,name=options\" json:\"options,omitempty\"`\n}\n```\n\n\n\nservice类型中rpc方法的类型为descriptor.proto中的MethodDescriptorProto message,其结构如下\n\n\n\n```go\ntype MethodDescriptorProto struct {\n  // Name rpc的名称\n  Name *string `protobuf:\"bytes,1,opt,name=name\" json:\"name,omitempty\"`\n  // InputType rpc中的请求类型\n  InputType  *string        `protobuf:\"bytes,2,opt,name=input_type,json=inputType\" json:\"input_type,omitempty\"`\n  // OutputType rpc中的返回类型\n  OutputType *string        `protobuf:\"bytes,3,opt,name=output_type,json=outputType\" json:\"output_type,omitempty\"`\n  // Options rpc中的选项\n  Options    *MethodOptions `protobuf:\"bytes,4,opt,name=options\" json:\"options,omitempty\"`\n  // ClientStreaming 是否是客户端流模式\n  ClientStreaming *bool `protobuf:\"varint,5,opt,name=client_streaming,json=clientStreaming,def=0\" json:\"client_streaming,omitempty\"`\n  // ServerStreaming 是否是服务端流模式\n  ServerStreaming *bool `protobuf:\"varint,6,opt,name=server_streaming,json=serverStreaming,def=0\" json:\"server_streaming,omitempty\"`\n}\n```\n\n\n\n样例代码:\n\n\n\n```go\nfunc (r *Registry) _LoadServices(file *File) error {\n  var svcs []*Service\n  for _, sd := range file.GetService() {\n    svc := &Service{\n      File:                   file,\n      ServiceDescriptorProto: sd,\n    }\n    for _, md := range sd.GetMethod() {\n      meth, err := r._NewMethod(svc, md)\n      if err != nil {\n        return err\n      }\n      svc.Methods = append(svc.Methods, meth)\n    }\n    if len(svc.Methods) == 0 {\n      continue\n    }\n    svcs = append(svcs, svc)\n  }\n  file.Services = svcs\n  return nil\n}\n```\n\n\n\n### 07.将要生成的代码数据包装成CodeGeneratorResponse_File\n\n\n\nCodeGeneratorResponse_File 位于plugin.proto文件中，其结构如下。\n\n\n\n```go\n// Represents a single generated file.\ntype CodeGeneratorResponse_File struct {\n    // Name 文件名\n\tName *string `protobuf:\"bytes,1,opt,name=name\" json:\"name,omitempty\"`\n    // InsertionPoint 目前还不知道用途\n\tInsertionPoint *string `protobuf:\"bytes,2,opt,name=insertion_point,json=insertionPoint\" json:\"insertion_point,omitempty\"`\n\t// Content 文件的内容\n\tContent *string `protobuf:\"bytes,15,opt,name=content\" json:\"content,omitempty\"`\n}\n```\n\n\n\n样例代码如下\n\n\n\n```go\n// GoTemplate 用于生成相关的模板\nfunc (g *gen) GoTemplate(file *gengo.File) *plugin.CodeGeneratorResponse_File {\n\tvar err error\n\tas := &Args{}\n\tas.Imports = make(map[string]bool)\n\tas.PackageName = file.GoPkg.Name\n\tas.DateTime = time.Now().Local().String()\n\tbuf := bytes.NewBuffer(make([]byte, 0, 40960))\n\trspFile := new(plugin.CodeGeneratorResponse_File)\n\tfor _, service := range file.Services {\n\t\tg.GoService(file, as, service)\n\t}\n\tif len(as.Services) != 0 {\n\t\tas.IsHave = true\n\t}\n\n\ttp := template.New(\"template.service\")\n\tif tp, err = tp.Parse(codeFileTemplate); err != nil {\n\t\tlog.Fatalln(err.Error())\n\t}\n\tif err = tp.Execute(buf, as); err != nil {\n\t\tlog.Fatalln(err.Error())\n\t}\n\tname, err := g.GetAllFilePath(file)\n\tif err != nil {\n\t\tlog.Println(PluginName, err.Error())\n\t\tos.Exit(-1)\n\t}\n\text := filepath.Ext(name)\n\tbase := strings.TrimSuffix(name, ext)\n\toutput := fmt.Sprintf(\"%s.pb.template.go\", base)\n\trspFile.Name = proto.String(output)\n\trspFile.Content = proto.String(buf.String())\n\treturn rspFile\n}\n```\n\n\n\n### 08.将自定义代码写回给protoc,让protoc生成文件\n\n\n\nprotobuf写回，是将数据包装成plugin.proto中的plugin.CodeGeneratorResponse结构，是向os.Stdout写入，写入之后会传给protoc,protoc会根据文件数据,将其输出到文件中。\n\nplugin.CodeGeneratorResponse结构如下。\n\n```go\n// 用于写一段代码到protoc\ntype CodeGeneratorResponse struct {\n\t// Error 用于向protoc返回数据\n\tError *string `protobuf:\"bytes,1,opt,name=error\" json:\"error,omitempty\"`\n\t// 目前还不知用途\n\tSupportedFeatures *uint64                       `protobuf:\"varint,2,opt,name=supported_features,json=supportedFeatures\" json:\"supported_features,omitempty\"`\n\t// 需要生成的文件,即返回的文件可以有多个\n    File              []*CodeGeneratorResponse_File `protobuf:\"bytes,15,rep,name=file\" json:\"file,omitempty\"`\n}\n\n```\n\n\n\n将这个结构，通过protobuf序列化之后，将得到的数据写入os.Stdout, 样例代码如下\n\n\n\n```go\n// WriteResponse 用于向标准输出中写数据\nfunc WriteResponse(rsp *plugin.CodeGeneratorResponse) {\n\tbuf, err := proto.Marshal(rsp)\n\tif err != nil {\n\t\tlog.Fatalln(err.Error())\n\t}\n\tif _, err := os.Stdout.Write(buf); err != nil {\n\t\tlog.Fatalln(err.Error())\n\t}\n}\n```\n\n至此,全篇解析完毕.\n\ndemo地址:github.com/yuansudong/protoc-gen-template","source":"_posts/golang-protobuffer-plugin.md","raw":"---\n\ntitle: 聊聊golang中,如何开发一个protobuf plugin\ncover: /img/golang/protobuffer_plugin_title.png\nsubtitle: 聊聊golang中,如何开发一个protobuf plugin\ncategories: \"GO语言\"\ntags: \"GO语言\"\nauthor:\n  nick: 袁苏东\n  link: https://github.com/yuansudong\ntypora-root-url: development-manual-jwt\n---\n\n以下是此次测试的protobuf文件.\n\n```protobuf\nsyntax = \"proto3\";\npackage service.account.v1;\noption go_package = \"github.com/yuansudong/protoc-gen-template/gen/gopb/service/account/normal/pbv1;pbv1\";\nimport \"google/api/annotations.proto\";\n// C2SInnerLogin 内部用户登录请求\nmessage C2SInnerLogin {\n  // UserName  用户名\n  string UserName = 1;\n  // Passsword 密码\n  string Password = 2;\n  // AppID 引用ID\n  string AppID = 3;\n\n}\n// S2CInnerLogin 内部用户登录响应\nmessage S2CInnerLogin {\n  // Token 访问令牌\n  string Token = 1;\n}\n// C2SInnerSignin 内部用户注册请求\nmessage C2SInnerSignin {\n  // UserName  用户名\n  string UserName = 1;\n  // Passsword 密码\n  string Password = 2;\n  // AppID 引用程序ID\n  string AppID = 3;\n}\n// S2CInnerUserSignin 注册时的响应\nmessage S2CInnerSignin {\n  string Token = 1;\n}\n// Account 账户服务V1版本\nservice Account {\n  // InnerLogin 公司渠道登录\n  rpc InnerLogin(C2SInnerLogin) returns (S2CInnerLogin) {\n    option (google.api.http) = {\n      post: \"/v1/inner/login\"\n      body: \"*\"\n    };\n  };\n  // InnerSignin 公司渠道注册\n  rpc InnerSignin(C2SInnerSignin) returns (S2CInnerSignin) {\n    option (google.api.http) = {\n      post: \"/v1/inner/signin\"\n      body: \"*\"\n    };\n  };\n}\n\n```\n\n\n\n## 1.解析流程\n\n\n\n### 01.protoc解析protobuf文件\n\n\n\n```bash\n${workspaceRoot}/protoc.exe \n        --proto_path=${workspaceRoot}/protos/v3 \n        --go_out=plugins=grpc:${env.GOPATH}/src \n        --template_out=lang=go:import_prefix=cccc:${env.GOPATH}/src \n        ${workspaceRoot}/protos/v3/models/address.proto\n```\n\n\n\n${workspaceRoot} 等价于工程的根目录\n\n${env.GOPATH} 等价于环境变量中的GOPATH\n\n\n\n此处需要注意的是，protobuf的插件有命令要求，必须以protoc-gen-[名称]的格式命名,否则protoc找不到.\n\n\n\n其中 --{{xxx}}_out 可以随意增加.\n\n\n\n比如:\n\n\n\ngo_out等价的protobuf的插件名称为protoc-gen-go.\n\n\n\ntemplate_out等价的protobuf的名称为protoc-gen-template.\n\n\n\nhaha_out等价的protobuf的名称为protoc-gen-haha\n\n\n\n### 02.protoc-gen-template解析数据\n\n\n\nprotoc解析完毕后,将序列化之后的二进制数据,以标准输入的方式传递给protoc-gen-template.\n\n\n\nprotoc-gen-template从标准输入读取二进制数据,读取完毕之后,进行反序列化,得到plugin.proto中的一个message,名为CodeGeneratorRequest\n\n\n\n其结构如下\n\n\n\n```go\ntype CodeGeneratorRequest struct {\n  FileToGenerate []string `protobuf:\"bytes,1,rep,name=file_to_generate,json=fileToGenerate\" json:\"file_to_generate,omitempty\"`\n  Parameter *string `protobuf:\"bytes,2,opt,name=parameter\" json:\"parameter,omitempty\"`\n  ProtoFile []*descriptorpb.FileDescriptorProto `protobuf:\"bytes,15,rep,name=proto_file,json=protoFile\" json:\"proto_file,omitempty\"`\n  CompilerVersion *Version `protobuf:\"bytes,3,opt,name=compiler_version,json=compilerVersion\" json:\"compiler_version,omitempty\"`\n}\n```\n\n\n\nFileToGenerate 进行编译的protobuf的名称,有多少protobuf文件,就有多个文件名,此处就是 ${workspaceRoot}/protos/v3/models/address.proto\n\n\n\nParameter 命令行传入的参数,对于此处就是lang=go;import_prefix=cc ,插件传参的格式如下.\n\n\n\n```ABAP\n\n--{{插件名称}}_out=lang={{命令行参数}}:{{生成文件路径}}\n\n比如:\n\n${workspaceRoot}/protoc.exe \n        --proto_path=${workspaceRoot}/protos/v3 \n        --template_out=lang=go;import_prefix=cccc:${env.GOPATH}/src \n        ${workspaceRoot}/protos/v3/models/address.proto\n其中lang=go;import_prefix=cc 就是命令行传入的参数\n```\n\n\n\nProtoFile 将protobuf数据,反序列化成了结构体数组,每个元素包含着一个proto文件的所有数据\n\n\n\nCompilerVersion 协议版本号\n\n\n\n样例代码如下:\n\n\n\n```go\n// GetRequest 用于从一个标准输入中,获取一个解析请求,io.Reader等价于os.Stdin\nfunc GetRequest(r io.Reader) (*plugin.CodeGeneratorRequest, error) {\n  input, err := ioutil.ReadAll(r)\n  if err != nil {\n    return nil, fmt.Errorf(\"读取标准输入失败: %v\", err)\n  }\n  req := new(plugin.CodeGeneratorRequest)\n  if err = proto.Unmarshal(input, req); err != nil {\n    return nil, fmt.Errorf(\"读取标准输入失败: %v\", err)\n  }\n  log.Println(\"参数是:\",req.Parameter)\n  return req, nil\n}\n```\n\n\n\n运行下列命令\n\n\n\n```bash\n\n${workspaceRoot}/protoc.exe \n        --proto_path=${workspaceRoot}/protos/v3 \n        --go_out=plugins=grpc:${env.GOPATH}/src \n        --template_out=lang=go;import_prefix=cccc:${env.GOPATH}/src \n        ${workspaceRoot}/protos/v3/models/address.proto\n```\n\n\n\n输出的结果为\n\n\n\n```\n2021/03/14 12:48:23 参数是: fix=go;import_prefix=cccc\n```\n\n\n\n### 03.解析File类型\n\n\n\nProtoFile的类型为descriptor.proto中的FileDescriptorProto.其结构如下.\n\n\n\n```go\n\ntype FileDescriptorProto struct {\n  // Name 文件名\n  Name    *string `protobuf:\"bytes,1,opt,name=name\" json:\"name,omitempty\"`       // file name, relative to root of source tree\n  // Package 包名\n  Package *string `protobuf:\"bytes,2,opt,name=package\" json:\"package,omitempty\"` // e.g. \"foo\", \"foo.bar\", etc.\n  // Dependency 该文件依赖哪些proto文件,比如本例中,依赖就有google/api/annotations.proto\n  Dependency []string `protobuf:\"bytes,3,rep,name=dependency\" json:\"dependency,omitempty\"` \n  PublicDependency []int32 `protobuf:\"varint,10,rep,name=public_dependency,json=publicDependency\" json:\"public_dependency,omitempty\"`\n  WeakDependency []int32 `protobuf:\"varint,11,rep,name=weak_dependency,json=weakDependency\" json:\"weak_dependency,omitempty\"`\n  // MessageType 该proto文件下的message类型\n  MessageType []*DescriptorProto        `protobuf:\"bytes,4,rep,name=message_type,json=messageType\" json:\"message_type,omitempty\"`\n  // EnumType 该proto文件下的enum类型\n  EnumType    []*EnumDescriptorProto    `protobuf:\"bytes,5,rep,name=enum_type,json=enumType\" json:\"enum_type,omitempty\"`\n  // Service 该proto文件下的message类型\n  Service     []*ServiceDescriptorProto `protobuf:\"bytes,6,rep,name=service\" json:\"service,omitempty\"`\n  // Extension 扩展\n  Extension   []*FieldDescriptorProto   `protobuf:\"bytes,7,rep,name=extension\" json:\"extension,omitempty\"`\n  // Options选项,比如go_package就是一个选项\n  Options     *FileOptions              `protobuf:\"bytes,8,opt,name=options\" json:\"options,omitempty\"`\n  // SourceCodeInfo 针对于optional的信息\n  SourceCodeInfo *SourceCodeInfo `protobuf:\"bytes,9,opt,name=source_code_info,json=sourceCodeInfo\" json:\"source_code_info,omitempty\"`\n  // syntax 指定是proto2,还是proto3\n  Syntax *string `protobuf:\"bytes,12,opt,name=syntax\" json:\"syntax,omitempty\"`\n}\n```\n\n\n\n样例demo代码:\n\n\n\n```go\n\nfunc (r *Registry) Load(req *plugin.CodeGeneratorRequest) error {\n  for _, file := range req.GetProtoFile() {\n    pkg := GoPackage{   \n    Path: r._GoPackagePath(file),\n    Name: r._DefaultGoPackageName(file),\n    }\n    if err := r.ReserveGoPackageAlias(pkg.Name, pkg.Path); err != nil {\n      for i := 0; ; i++ {\n        alias := fmt.Sprintf(\"%s_%d\", pkg.Name, i)\n        if err := r.ReserveGoPackageAlias(alias, pkg.Path); err == nil {\n          pkg.Alias = alias\n          break\n        }\n      }\n    }\n    f := &File{\n      FileDescriptorProto: file,\n      GoPkg:               pkg,\n    }\n    r._Files[file.GetName()] = f\n    r._RegisterMsg(f, nil, file.GetMessageType())\n    r._RegisterEnum(f, nil, file.GetEnumType())\n    }\n}\n```\n\n\n\n### 04.解析Message类型\n\n\n\nMessageType的元素类型为descriptor.proto中的DescriptorProto message,其结构如下\n\n\n\n```go\n\ntype DescriptorProto struct {\n  // Name 消息名,比如C2SInnerLogin\n  Name           *string                           `protobuf:\"bytes,1,opt,name=name\" json:\"name,omitempty\"`\n  // Field 该消息下有哪些字段\n  Field          []*FieldDescriptorProto           `protobuf:\"bytes,2,rep,name=field\" json:\"field,omitempty\"`\n  // Extension 该消息下有哪些扩展\n  Extension      []*FieldDescriptorProto           `protobuf:\"bytes,6,rep,name=extension\" json:\"extension,omitempty\"`\n  // NestedType该消息下有哪些嵌套类型\n  NestedType     []*DescriptorProto                `protobuf:\"bytes,3,rep,name=nested_type,json=nestedType\" json:\"nested_type,omitempty\"`\n  // EnumType 该消息下有哪些枚举类型\n  EnumType       []*EnumDescriptorProto            `protobuf:\"bytes,4,rep,name=enum_type,json=enumType\" json:\"enum_type,omitempty\"`\n  // ExtensionRange 该消息的扩展范围\n  ExtensionRange []*DescriptorProto_ExtensionRange `protobuf:\"bytes,5,rep,name=extension_range,json=extensionRange\" json:\"extension_range,omitempty\"`\n  // OneofDecl  该消息下oneof结构\n  OneofDecl      []*OneofDescriptorProto           `protobuf:\"bytes,8,rep,name=oneof_decl,json=oneofDecl\" json:\"oneof_decl,omitempty\"`\n  // Options 该消息下有哪些选项\n  Options        *MessageOptions                   `protobuf:\"bytes,7,opt,name=options\" json:\"options,omitempty\"`\n  // ReservedRange 预留范围\n  ReservedRange  []*DescriptorProto_ReservedRange  `protobuf:\"bytes,9,rep,name=reserved_range,json=reservedRange\" json:\"reserved_range,omitempty\"`\n  // ReservedName 预留名称\n  ReservedName []string `protobuf:\"bytes,10,rep,name=reserved_name,json=reservedName\" json:\"reserved_name,omitempty\"`\n}\n\n```\n\n\n\nField 的元素类型为descriptor.proto中的FieldDescriptorProto message,其结构如下\n\n\n\n```go\ntype FieldDescriptorProto struct {\n  // Name 字段名称\n  Name   *string                     `protobuf:\"bytes,1,opt,name=name\" json:\"name,omitempty\"`\n  // Number 字段索引,比如 int64 ha=1,其中1就为Number\n  Number *int32                      `protobuf:\"varint,3,opt,name=number\" json:\"number,omitempty\"`\n  // Label 用于指定该字段是required,repeated,optional 类型\n  Label  *FieldDescriptorProto_Label `protobuf:\"varint,4,opt,name=label,enum=google.protobuf.FieldDescriptorProto_Label\" json:\"label,omitempty\"`\n  // Type 指定字段的类型\n  Type *FieldDescriptorProto_Type `protobuf:\"varint,5,opt,name=type,enum=google.protobuf.FieldDescriptorProto_Type\" json:\"type,omitempty\"`\n  // TypeName 对于字段是message和enum类型的,这个代表和此种类型的名称\n  TypeName *string `protobuf:\"bytes,6,opt,name=type_name,json=typeName\" json:\"type_name,omitempty\"`\n  // Extendee  扩展相关\n  Extendee *string `protobuf:\"bytes,2,opt,name=extendee\" json:\"extendee,omitempty\"`\n  // DefaultValue 字段的默认值\n  DefaultValue *string `protobuf:\"bytes,7,opt,name=default_value,json=defaultValue\" json:\"default_value,omitempty\"`\n  // OneofIndex oneof类型的索引\n  OneofIndex *int32 `protobuf:\"varint,9,opt,name=oneof_index,json=oneofIndex\" json:\"oneof_index,omitempty\"`\n  // JsonName 该字段对应的JSON字符串\n  JsonName *string       `protobuf:\"bytes,10,opt,name=json_name,json=jsonName\" json:\"json_name,omitempty\"`\n  // Options 字段呃选项\n  Options  *FieldOptions `protobuf:\"bytes,8,opt,name=options\" json:\"options,omitempty\"`\n  Proto3Optional *bool `protobuf:\"varint,17,opt,name=proto3_optional,json=proto3Optional\" json:\"proto3_optional,omitempty\"`\n}\n```\n\n\n\n样例代码:\n\n\n\n```go\n\n// _RegisterMsg 注册message类型\nfunc (r *Registry) _RegisterMsg(file *File, outerPath []string, msgs []*descriptor.DescriptorProto) {\n  for i, md := range msgs {\n    m := &Message{\n      File:            file,\n      Outers:          outerPath,\n      DescriptorProto: md,\n      Index:           i,\n    }\n    for _, fd := range md.GetField() {\n      m.Fields = append(m.Fields, &Field{\n        Message:              m,\n        FieldDescriptorProto: fd,\n      })\n    }\n    file.Messages = append(file.Messages, m)\n    r._Msgs[m.FQMN()] = m\n    var outers []string\n    outers = append(outers, outerPath...)\n    outers = append(outers, m.GetName())\n    r._RegisterMsg(file, outers, m.GetNestedType())\n    r._RegisterEnum(file, outers, m.GetEnumType())\n  }\n}\n```\n\n\n\n### 05.解析枚举类型\n\n\n\nEnumType 的元素类型为descriptor.proto中的EnumDescriptorProto\n\nmessage,其结构如下\n\n\n\n```\ntype EnumDescriptorProto struct {  \n  // Name 枚举名称\n  Name    *string                     `protobuf:\"bytes,1,opt,name=name\" json:\"name,omitempty\"`\n  // Value 枚举值\n  Value   []*EnumValueDescriptorProto `protobuf:\"bytes,2,rep,name=value\" json:\"value,omitempty\"`\n  // Options 枚举选项\n  Options *EnumOptions                `protobuf:\"bytes,3,opt,name=options\" json:\"options,omitempty\"`\n  // ReservedRange 预留范围\n  ReservedRange []*EnumDescriptorProto_EnumReservedRange `protobuf:\"bytes,4,rep,name=reserved_range,json=reservedRange\" json:\"reserved_range,omitempty\"`\n  // ReservedName 预留名称\n  ReservedName []string `protobuf:\"bytes,5,rep,name=reserved_name,json=reservedName\" json:\"reserved_name,omitempty\"`\n}\n```\n\n\n\n样例代码如下\n\n\n\n```go\ntype MethodDescriptorProto struct {\n  // Name rpc的名称\n  Name *string `protobuf:\"bytes,1,opt,name=name\" json:\"name,omitempty\"`\n  // InputType rpc中的请求类型\n  InputType  *string        `protobuf:\"bytes,2,opt,name=input_type,json=inputType\" json:\"input_type,omitempty\"`\n  // OutputType rpc中的返回类型\n  OutputType *string        `protobuf:\"bytes,3,opt,name=output_type,json=outputType\" json:\"output_type,omitempty\"`\n  // Options rpc中的选项\n  Options    *MethodOptions `protobuf:\"bytes,4,opt,name=options\" json:\"options,omitempty\"`\n  // ClientStreaming 是否是客户端流模式\n  ClientStreaming *bool `protobuf:\"varint,5,opt,name=client_streaming,json=clientStreaming,def=0\" json:\"client_streaming,omitempty\"`\n  // ServerStreaming 是否是服务端流模式\n  ServerStreaming *bool `protobuf:\"varint,6,opt,name=server_streaming,json=serverStreaming,def=0\" json:\"server_streaming,omitempty\"`\n}\n```\n\n\n\n### 06.解析service类型\n\n\n\nservice 的元素类型为descriptor.proto中的ServiceDescriptorProto\n\n message,其结构如下\n\n\n\n```go\ntype ServiceDescriptorProto struct {\n  // Name service的名称\n  Name    *string                  `protobuf:\"bytes,1,opt,name=name\" json:\"name,omitempty\"`\n  // Method service包含的rpc方法\n  Method  []*MethodDescriptorProto `protobuf:\"bytes,2,rep,name=method\" json:\"method,omitempty\"`\n  // Options service中包含的选项\n  Options *ServiceOptions          `protobuf:\"bytes,3,opt,name=options\" json:\"options,omitempty\"`\n}\n```\n\n\n\nservice类型中rpc方法的类型为descriptor.proto中的MethodDescriptorProto message,其结构如下\n\n\n\n```go\ntype MethodDescriptorProto struct {\n  // Name rpc的名称\n  Name *string `protobuf:\"bytes,1,opt,name=name\" json:\"name,omitempty\"`\n  // InputType rpc中的请求类型\n  InputType  *string        `protobuf:\"bytes,2,opt,name=input_type,json=inputType\" json:\"input_type,omitempty\"`\n  // OutputType rpc中的返回类型\n  OutputType *string        `protobuf:\"bytes,3,opt,name=output_type,json=outputType\" json:\"output_type,omitempty\"`\n  // Options rpc中的选项\n  Options    *MethodOptions `protobuf:\"bytes,4,opt,name=options\" json:\"options,omitempty\"`\n  // ClientStreaming 是否是客户端流模式\n  ClientStreaming *bool `protobuf:\"varint,5,opt,name=client_streaming,json=clientStreaming,def=0\" json:\"client_streaming,omitempty\"`\n  // ServerStreaming 是否是服务端流模式\n  ServerStreaming *bool `protobuf:\"varint,6,opt,name=server_streaming,json=serverStreaming,def=0\" json:\"server_streaming,omitempty\"`\n}\n```\n\n\n\n样例代码:\n\n\n\n```go\nfunc (r *Registry) _LoadServices(file *File) error {\n  var svcs []*Service\n  for _, sd := range file.GetService() {\n    svc := &Service{\n      File:                   file,\n      ServiceDescriptorProto: sd,\n    }\n    for _, md := range sd.GetMethod() {\n      meth, err := r._NewMethod(svc, md)\n      if err != nil {\n        return err\n      }\n      svc.Methods = append(svc.Methods, meth)\n    }\n    if len(svc.Methods) == 0 {\n      continue\n    }\n    svcs = append(svcs, svc)\n  }\n  file.Services = svcs\n  return nil\n}\n```\n\n\n\n### 07.将要生成的代码数据包装成CodeGeneratorResponse_File\n\n\n\nCodeGeneratorResponse_File 位于plugin.proto文件中，其结构如下。\n\n\n\n```go\n// Represents a single generated file.\ntype CodeGeneratorResponse_File struct {\n    // Name 文件名\n\tName *string `protobuf:\"bytes,1,opt,name=name\" json:\"name,omitempty\"`\n    // InsertionPoint 目前还不知道用途\n\tInsertionPoint *string `protobuf:\"bytes,2,opt,name=insertion_point,json=insertionPoint\" json:\"insertion_point,omitempty\"`\n\t// Content 文件的内容\n\tContent *string `protobuf:\"bytes,15,opt,name=content\" json:\"content,omitempty\"`\n}\n```\n\n\n\n样例代码如下\n\n\n\n```go\n// GoTemplate 用于生成相关的模板\nfunc (g *gen) GoTemplate(file *gengo.File) *plugin.CodeGeneratorResponse_File {\n\tvar err error\n\tas := &Args{}\n\tas.Imports = make(map[string]bool)\n\tas.PackageName = file.GoPkg.Name\n\tas.DateTime = time.Now().Local().String()\n\tbuf := bytes.NewBuffer(make([]byte, 0, 40960))\n\trspFile := new(plugin.CodeGeneratorResponse_File)\n\tfor _, service := range file.Services {\n\t\tg.GoService(file, as, service)\n\t}\n\tif len(as.Services) != 0 {\n\t\tas.IsHave = true\n\t}\n\n\ttp := template.New(\"template.service\")\n\tif tp, err = tp.Parse(codeFileTemplate); err != nil {\n\t\tlog.Fatalln(err.Error())\n\t}\n\tif err = tp.Execute(buf, as); err != nil {\n\t\tlog.Fatalln(err.Error())\n\t}\n\tname, err := g.GetAllFilePath(file)\n\tif err != nil {\n\t\tlog.Println(PluginName, err.Error())\n\t\tos.Exit(-1)\n\t}\n\text := filepath.Ext(name)\n\tbase := strings.TrimSuffix(name, ext)\n\toutput := fmt.Sprintf(\"%s.pb.template.go\", base)\n\trspFile.Name = proto.String(output)\n\trspFile.Content = proto.String(buf.String())\n\treturn rspFile\n}\n```\n\n\n\n### 08.将自定义代码写回给protoc,让protoc生成文件\n\n\n\nprotobuf写回，是将数据包装成plugin.proto中的plugin.CodeGeneratorResponse结构，是向os.Stdout写入，写入之后会传给protoc,protoc会根据文件数据,将其输出到文件中。\n\nplugin.CodeGeneratorResponse结构如下。\n\n```go\n// 用于写一段代码到protoc\ntype CodeGeneratorResponse struct {\n\t// Error 用于向protoc返回数据\n\tError *string `protobuf:\"bytes,1,opt,name=error\" json:\"error,omitempty\"`\n\t// 目前还不知用途\n\tSupportedFeatures *uint64                       `protobuf:\"varint,2,opt,name=supported_features,json=supportedFeatures\" json:\"supported_features,omitempty\"`\n\t// 需要生成的文件,即返回的文件可以有多个\n    File              []*CodeGeneratorResponse_File `protobuf:\"bytes,15,rep,name=file\" json:\"file,omitempty\"`\n}\n\n```\n\n\n\n将这个结构，通过protobuf序列化之后，将得到的数据写入os.Stdout, 样例代码如下\n\n\n\n```go\n// WriteResponse 用于向标准输出中写数据\nfunc WriteResponse(rsp *plugin.CodeGeneratorResponse) {\n\tbuf, err := proto.Marshal(rsp)\n\tif err != nil {\n\t\tlog.Fatalln(err.Error())\n\t}\n\tif _, err := os.Stdout.Write(buf); err != nil {\n\t\tlog.Fatalln(err.Error())\n\t}\n}\n```\n\n至此,全篇解析完毕.\n\ndemo地址:github.com/yuansudong/protoc-gen-template","slug":"golang-protobuffer-plugin","published":1,"date":"2021-03-16T20:04:09.122Z","updated":"2021-03-16T20:32:36.551Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmchg4ku002q7gvl8ubvel07","content":"<p>以下是此次测试的protobuf文件.</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">syntax = <span class=\"string\">&quot;proto3&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">package</span> service.account.v1;</span><br><span class=\"line\"><span class=\"keyword\">option</span> go_package = <span class=\"string\">&quot;github.com/yuansudong/protoc-gen-template/gen/gopb/service/account/normal/pbv1;pbv1&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;google/api/annotations.proto&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// C2SInnerLogin 内部用户登录请求</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">message</span> <span class=\"title\">C2SInnerLogin</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// UserName  用户名</span></span><br><span class=\"line\">  <span class=\"built_in\">string</span> UserName = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"comment\">// Passsword 密码</span></span><br><span class=\"line\">  <span class=\"built_in\">string</span> Password = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"comment\">// AppID 引用ID</span></span><br><span class=\"line\">  <span class=\"built_in\">string</span> AppID = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// S2CInnerLogin 内部用户登录响应</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">message</span> <span class=\"title\">S2CInnerLogin</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Token 访问令牌</span></span><br><span class=\"line\">  <span class=\"built_in\">string</span> Token = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// C2SInnerSignin 内部用户注册请求</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">message</span> <span class=\"title\">C2SInnerSignin</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// UserName  用户名</span></span><br><span class=\"line\">  <span class=\"built_in\">string</span> UserName = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"comment\">// Passsword 密码</span></span><br><span class=\"line\">  <span class=\"built_in\">string</span> Password = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"comment\">// AppID 引用程序ID</span></span><br><span class=\"line\">  <span class=\"built_in\">string</span> AppID = <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// S2CInnerUserSignin 注册时的响应</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">message</span> <span class=\"title\">S2CInnerSignin</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">string</span> Token = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Account 账户服务V1版本</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">service</span> <span class=\"title\">Account</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// InnerLogin 公司渠道登录</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">rpc</span> InnerLogin(C2SInnerLogin) <span class=\"keyword\">returns</span> (S2CInnerLogin) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">option</span> (google.api.http) = &#123;</span><br><span class=\"line\">      post: <span class=\"string\">&quot;/v1/inner/login&quot;</span></span><br><span class=\"line\">      body: <span class=\"string\">&quot;*&quot;</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// InnerSignin 公司渠道注册</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">rpc</span> InnerSignin(C2SInnerSignin) <span class=\"keyword\">returns</span> (S2CInnerSignin) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">option</span> (google.api.http) = &#123;</span><br><span class=\"line\">      post: <span class=\"string\">&quot;/v1/inner/signin&quot;</span></span><br><span class=\"line\">      body: <span class=\"string\">&quot;*&quot;</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"1-解析流程\"><a href=\"#1-解析流程\" class=\"headerlink\" title=\"1.解析流程\"></a>1.解析流程</h2><h3 id=\"01-protoc解析protobuf文件\"><a href=\"#01-protoc解析protobuf文件\" class=\"headerlink\" title=\"01.protoc解析protobuf文件\"></a>01.protoc解析protobuf文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$&#123;workspaceRoot&#125;</span>/protoc.exe </span><br><span class=\"line\">        --proto_path=<span class=\"variable\">$&#123;workspaceRoot&#125;</span>/protos/v3 </span><br><span class=\"line\">        --go_out=plugins=grpc:<span class=\"variable\">$&#123;env.GOPATH&#125;</span>/src </span><br><span class=\"line\">        --template_out=lang=go:import_prefix=cccc:<span class=\"variable\">$&#123;env.GOPATH&#125;</span>/src </span><br><span class=\"line\">        <span class=\"variable\">$&#123;workspaceRoot&#125;</span>/protos/v3/models/address.proto</span><br></pre></td></tr></table></figure>\n\n\n\n<p>${workspaceRoot} 等价于工程的根目录</p>\n<p>${env.GOPATH} 等价于环境变量中的GOPATH</p>\n<p>此处需要注意的是，protobuf的插件有命令要求，必须以protoc-gen-[名称]的格式命名,否则protoc找不到.</p>\n<p>其中 –_out 可以随意增加.</p>\n<p>比如:</p>\n<p>go_out等价的protobuf的插件名称为protoc-gen-go.</p>\n<p>template_out等价的protobuf的名称为protoc-gen-template.</p>\n<p>haha_out等价的protobuf的名称为protoc-gen-haha</p>\n<h3 id=\"02-protoc-gen-template解析数据\"><a href=\"#02-protoc-gen-template解析数据\" class=\"headerlink\" title=\"02.protoc-gen-template解析数据\"></a>02.protoc-gen-template解析数据</h3><p>protoc解析完毕后,将序列化之后的二进制数据,以标准输入的方式传递给protoc-gen-template.</p>\n<p>protoc-gen-template从标准输入读取二进制数据,读取完毕之后,进行反序列化,得到plugin.proto中的一个message,名为CodeGeneratorRequest</p>\n<p>其结构如下</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> CodeGeneratorRequest <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  FileToGenerate []<span class=\"keyword\">string</span> <span class=\"string\">`protobuf:&quot;bytes,1,rep,name=file_to_generate,json=fileToGenerate&quot; json:&quot;file_to_generate,omitempty&quot;`</span></span><br><span class=\"line\">  Parameter *<span class=\"keyword\">string</span> <span class=\"string\">`protobuf:&quot;bytes,2,opt,name=parameter&quot; json:&quot;parameter,omitempty&quot;`</span></span><br><span class=\"line\">  ProtoFile []*descriptorpb.FileDescriptorProto <span class=\"string\">`protobuf:&quot;bytes,15,rep,name=proto_file,json=protoFile&quot; json:&quot;proto_file,omitempty&quot;`</span></span><br><span class=\"line\">  CompilerVersion *Version <span class=\"string\">`protobuf:&quot;bytes,3,opt,name=compiler_version,json=compilerVersion&quot; json:&quot;compiler_version,omitempty&quot;`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>FileToGenerate 进行编译的protobuf的名称,有多少protobuf文件,就有多个文件名,此处就是 ${workspaceRoot}/protos/v3/models/address.proto</p>\n<p>Parameter 命令行传入的参数,对于此处就是lang=go;import_prefix=cc ,插件传参的格式如下.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">--&#123;&#123;插件名称&#125;&#125;_out&#x3D;lang&#x3D;&#123;&#123;命令行参数&#125;&#125;:&#123;&#123;生成文件路径&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">比如:</span><br><span class=\"line\"></span><br><span class=\"line\">$&#123;workspaceRoot&#125;&#x2F;protoc.exe </span><br><span class=\"line\">        --proto_path&#x3D;$&#123;workspaceRoot&#125;&#x2F;protos&#x2F;v3 </span><br><span class=\"line\">        --template_out&#x3D;lang&#x3D;go;import_prefix&#x3D;cccc:$&#123;env.GOPATH&#125;&#x2F;src </span><br><span class=\"line\">        $&#123;workspaceRoot&#125;&#x2F;protos&#x2F;v3&#x2F;models&#x2F;address.proto</span><br><span class=\"line\">其中lang&#x3D;go;import_prefix&#x3D;cc 就是命令行传入的参数</span><br></pre></td></tr></table></figure>\n\n\n\n<p>ProtoFile 将protobuf数据,反序列化成了结构体数组,每个元素包含着一个proto文件的所有数据</p>\n<p>CompilerVersion 协议版本号</p>\n<p>样例代码如下:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// GetRequest 用于从一个标准输入中,获取一个解析请求,io.Reader等价于os.Stdin</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">GetRequest</span><span class=\"params\">(r io.Reader)</span> <span class=\"params\">(*plugin.CodeGeneratorRequest, error)</span></span> &#123;</span><br><span class=\"line\">  input, err := ioutil.ReadAll(r)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, fmt.Errorf(<span class=\"string\">&quot;读取标准输入失败: %v&quot;</span>, err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  req := <span class=\"built_in\">new</span>(plugin.CodeGeneratorRequest)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err = proto.Unmarshal(input, req); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, fmt.Errorf(<span class=\"string\">&quot;读取标准输入失败: %v&quot;</span>, err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  log.Println(<span class=\"string\">&quot;参数是:&quot;</span>,req.Parameter)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> req, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>运行下列命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$&#123;workspaceRoot&#125;</span>/protoc.exe </span><br><span class=\"line\">        --proto_path=<span class=\"variable\">$&#123;workspaceRoot&#125;</span>/protos/v3 </span><br><span class=\"line\">        --go_out=plugins=grpc:<span class=\"variable\">$&#123;env.GOPATH&#125;</span>/src </span><br><span class=\"line\">        --template_out=lang=go;import_prefix=cccc:<span class=\"variable\">$&#123;env.GOPATH&#125;</span>/src </span><br><span class=\"line\">        <span class=\"variable\">$&#123;workspaceRoot&#125;</span>/protos/v3/models/address.proto</span><br></pre></td></tr></table></figure>\n\n\n\n<p>输出的结果为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2021&#x2F;03&#x2F;14 12:48:23 参数是: fix&#x3D;go;import_prefix&#x3D;cccc</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"03-解析File类型\"><a href=\"#03-解析File类型\" class=\"headerlink\" title=\"03.解析File类型\"></a>03.解析File类型</h3><p>ProtoFile的类型为descriptor.proto中的FileDescriptorProto.其结构如下.</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> FileDescriptorProto <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Name 文件名</span></span><br><span class=\"line\">  Name    *<span class=\"keyword\">string</span> <span class=\"string\">`protobuf:&quot;bytes,1,opt,name=name&quot; json:&quot;name,omitempty&quot;`</span>       <span class=\"comment\">// file name, relative to root of source tree</span></span><br><span class=\"line\">  <span class=\"comment\">// Package 包名</span></span><br><span class=\"line\">  Package *<span class=\"keyword\">string</span> <span class=\"string\">`protobuf:&quot;bytes,2,opt,name=package&quot; json:&quot;package,omitempty&quot;`</span> <span class=\"comment\">// e.g. &quot;foo&quot;, &quot;foo.bar&quot;, etc.</span></span><br><span class=\"line\">  <span class=\"comment\">// Dependency 该文件依赖哪些proto文件,比如本例中,依赖就有google/api/annotations.proto</span></span><br><span class=\"line\">  Dependency []<span class=\"keyword\">string</span> <span class=\"string\">`protobuf:&quot;bytes,3,rep,name=dependency&quot; json:&quot;dependency,omitempty&quot;`</span> </span><br><span class=\"line\">  PublicDependency []<span class=\"keyword\">int32</span> <span class=\"string\">`protobuf:&quot;varint,10,rep,name=public_dependency,json=publicDependency&quot; json:&quot;public_dependency,omitempty&quot;`</span></span><br><span class=\"line\">  WeakDependency []<span class=\"keyword\">int32</span> <span class=\"string\">`protobuf:&quot;varint,11,rep,name=weak_dependency,json=weakDependency&quot; json:&quot;weak_dependency,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// MessageType 该proto文件下的message类型</span></span><br><span class=\"line\">  MessageType []*DescriptorProto        <span class=\"string\">`protobuf:&quot;bytes,4,rep,name=message_type,json=messageType&quot; json:&quot;message_type,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// EnumType 该proto文件下的enum类型</span></span><br><span class=\"line\">  EnumType    []*EnumDescriptorProto    <span class=\"string\">`protobuf:&quot;bytes,5,rep,name=enum_type,json=enumType&quot; json:&quot;enum_type,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// Service 该proto文件下的message类型</span></span><br><span class=\"line\">  Service     []*ServiceDescriptorProto <span class=\"string\">`protobuf:&quot;bytes,6,rep,name=service&quot; json:&quot;service,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// Extension 扩展</span></span><br><span class=\"line\">  Extension   []*FieldDescriptorProto   <span class=\"string\">`protobuf:&quot;bytes,7,rep,name=extension&quot; json:&quot;extension,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// Options选项,比如go_package就是一个选项</span></span><br><span class=\"line\">  Options     *FileOptions              <span class=\"string\">`protobuf:&quot;bytes,8,opt,name=options&quot; json:&quot;options,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// SourceCodeInfo 针对于optional的信息</span></span><br><span class=\"line\">  SourceCodeInfo *SourceCodeInfo <span class=\"string\">`protobuf:&quot;bytes,9,opt,name=source_code_info,json=sourceCodeInfo&quot; json:&quot;source_code_info,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// syntax 指定是proto2,还是proto3</span></span><br><span class=\"line\">  Syntax *<span class=\"keyword\">string</span> <span class=\"string\">`protobuf:&quot;bytes,12,opt,name=syntax&quot; json:&quot;syntax,omitempty&quot;`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>样例demo代码:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(r *Registry)</span> <span class=\"title\">Load</span><span class=\"params\">(req *plugin.CodeGeneratorRequest)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> _, file := <span class=\"keyword\">range</span> req.GetProtoFile() &#123;</span><br><span class=\"line\">    pkg := GoPackage&#123;   </span><br><span class=\"line\">    Path: r._GoPackagePath(file),</span><br><span class=\"line\">    Name: r._DefaultGoPackageName(file),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err := r.ReserveGoPackageAlias(pkg.Name, pkg.Path); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; ; i++ &#123;</span><br><span class=\"line\">        alias := fmt.Sprintf(<span class=\"string\">&quot;%s_%d&quot;</span>, pkg.Name, i)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err := r.ReserveGoPackageAlias(alias, pkg.Path); err == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">          pkg.Alias = alias</span><br><span class=\"line\">          <span class=\"keyword\">break</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    f := &amp;File&#123;</span><br><span class=\"line\">      FileDescriptorProto: file,</span><br><span class=\"line\">      GoPkg:               pkg,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    r._Files[file.GetName()] = f</span><br><span class=\"line\">    r._RegisterMsg(f, <span class=\"literal\">nil</span>, file.GetMessageType())</span><br><span class=\"line\">    r._RegisterEnum(f, <span class=\"literal\">nil</span>, file.GetEnumType())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"04-解析Message类型\"><a href=\"#04-解析Message类型\" class=\"headerlink\" title=\"04.解析Message类型\"></a>04.解析Message类型</h3><p>MessageType的元素类型为descriptor.proto中的DescriptorProto message,其结构如下</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> DescriptorProto <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Name 消息名,比如C2SInnerLogin</span></span><br><span class=\"line\">  Name           *<span class=\"keyword\">string</span>                           <span class=\"string\">`protobuf:&quot;bytes,1,opt,name=name&quot; json:&quot;name,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// Field 该消息下有哪些字段</span></span><br><span class=\"line\">  Field          []*FieldDescriptorProto           <span class=\"string\">`protobuf:&quot;bytes,2,rep,name=field&quot; json:&quot;field,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// Extension 该消息下有哪些扩展</span></span><br><span class=\"line\">  Extension      []*FieldDescriptorProto           <span class=\"string\">`protobuf:&quot;bytes,6,rep,name=extension&quot; json:&quot;extension,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// NestedType该消息下有哪些嵌套类型</span></span><br><span class=\"line\">  NestedType     []*DescriptorProto                <span class=\"string\">`protobuf:&quot;bytes,3,rep,name=nested_type,json=nestedType&quot; json:&quot;nested_type,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// EnumType 该消息下有哪些枚举类型</span></span><br><span class=\"line\">  EnumType       []*EnumDescriptorProto            <span class=\"string\">`protobuf:&quot;bytes,4,rep,name=enum_type,json=enumType&quot; json:&quot;enum_type,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// ExtensionRange 该消息的扩展范围</span></span><br><span class=\"line\">  ExtensionRange []*DescriptorProto_ExtensionRange <span class=\"string\">`protobuf:&quot;bytes,5,rep,name=extension_range,json=extensionRange&quot; json:&quot;extension_range,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// OneofDecl  该消息下oneof结构</span></span><br><span class=\"line\">  OneofDecl      []*OneofDescriptorProto           <span class=\"string\">`protobuf:&quot;bytes,8,rep,name=oneof_decl,json=oneofDecl&quot; json:&quot;oneof_decl,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// Options 该消息下有哪些选项</span></span><br><span class=\"line\">  Options        *MessageOptions                   <span class=\"string\">`protobuf:&quot;bytes,7,opt,name=options&quot; json:&quot;options,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// ReservedRange 预留范围</span></span><br><span class=\"line\">  ReservedRange  []*DescriptorProto_ReservedRange  <span class=\"string\">`protobuf:&quot;bytes,9,rep,name=reserved_range,json=reservedRange&quot; json:&quot;reserved_range,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// ReservedName 预留名称</span></span><br><span class=\"line\">  ReservedName []<span class=\"keyword\">string</span> <span class=\"string\">`protobuf:&quot;bytes,10,rep,name=reserved_name,json=reservedName&quot; json:&quot;reserved_name,omitempty&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>Field 的元素类型为descriptor.proto中的FieldDescriptorProto message,其结构如下</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> FieldDescriptorProto <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Name 字段名称</span></span><br><span class=\"line\">  Name   *<span class=\"keyword\">string</span>                     <span class=\"string\">`protobuf:&quot;bytes,1,opt,name=name&quot; json:&quot;name,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// Number 字段索引,比如 int64 ha=1,其中1就为Number</span></span><br><span class=\"line\">  Number *<span class=\"keyword\">int32</span>                      <span class=\"string\">`protobuf:&quot;varint,3,opt,name=number&quot; json:&quot;number,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// Label 用于指定该字段是required,repeated,optional 类型</span></span><br><span class=\"line\">  Label  *FieldDescriptorProto_Label <span class=\"string\">`protobuf:&quot;varint,4,opt,name=label,enum=google.protobuf.FieldDescriptorProto_Label&quot; json:&quot;label,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// Type 指定字段的类型</span></span><br><span class=\"line\">  Type *FieldDescriptorProto_Type <span class=\"string\">`protobuf:&quot;varint,5,opt,name=type,enum=google.protobuf.FieldDescriptorProto_Type&quot; json:&quot;type,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// TypeName 对于字段是message和enum类型的,这个代表和此种类型的名称</span></span><br><span class=\"line\">  TypeName *<span class=\"keyword\">string</span> <span class=\"string\">`protobuf:&quot;bytes,6,opt,name=type_name,json=typeName&quot; json:&quot;type_name,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// Extendee  扩展相关</span></span><br><span class=\"line\">  Extendee *<span class=\"keyword\">string</span> <span class=\"string\">`protobuf:&quot;bytes,2,opt,name=extendee&quot; json:&quot;extendee,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// DefaultValue 字段的默认值</span></span><br><span class=\"line\">  DefaultValue *<span class=\"keyword\">string</span> <span class=\"string\">`protobuf:&quot;bytes,7,opt,name=default_value,json=defaultValue&quot; json:&quot;default_value,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// OneofIndex oneof类型的索引</span></span><br><span class=\"line\">  OneofIndex *<span class=\"keyword\">int32</span> <span class=\"string\">`protobuf:&quot;varint,9,opt,name=oneof_index,json=oneofIndex&quot; json:&quot;oneof_index,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// JsonName 该字段对应的JSON字符串</span></span><br><span class=\"line\">  JsonName *<span class=\"keyword\">string</span>       <span class=\"string\">`protobuf:&quot;bytes,10,opt,name=json_name,json=jsonName&quot; json:&quot;json_name,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// Options 字段呃选项</span></span><br><span class=\"line\">  Options  *FieldOptions <span class=\"string\">`protobuf:&quot;bytes,8,opt,name=options&quot; json:&quot;options,omitempty&quot;`</span></span><br><span class=\"line\">  Proto3Optional *<span class=\"keyword\">bool</span> <span class=\"string\">`protobuf:&quot;varint,17,opt,name=proto3_optional,json=proto3Optional&quot; json:&quot;proto3_optional,omitempty&quot;`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>样例代码:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// _RegisterMsg 注册message类型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(r *Registry)</span> _<span class=\"title\">RegisterMsg</span><span class=\"params\">(file *File, outerPath []<span class=\"keyword\">string</span>, msgs []*descriptor.DescriptorProto)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> i, md := <span class=\"keyword\">range</span> msgs &#123;</span><br><span class=\"line\">    m := &amp;Message&#123;</span><br><span class=\"line\">      File:            file,</span><br><span class=\"line\">      Outers:          outerPath,</span><br><span class=\"line\">      DescriptorProto: md,</span><br><span class=\"line\">      Index:           i,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, fd := <span class=\"keyword\">range</span> md.GetField() &#123;</span><br><span class=\"line\">      m.Fields = <span class=\"built_in\">append</span>(m.Fields, &amp;Field&#123;</span><br><span class=\"line\">        Message:              m,</span><br><span class=\"line\">        FieldDescriptorProto: fd,</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    file.Messages = <span class=\"built_in\">append</span>(file.Messages, m)</span><br><span class=\"line\">    r._Msgs[m.FQMN()] = m</span><br><span class=\"line\">    <span class=\"keyword\">var</span> outers []<span class=\"keyword\">string</span></span><br><span class=\"line\">    outers = <span class=\"built_in\">append</span>(outers, outerPath...)</span><br><span class=\"line\">    outers = <span class=\"built_in\">append</span>(outers, m.GetName())</span><br><span class=\"line\">    r._RegisterMsg(file, outers, m.GetNestedType())</span><br><span class=\"line\">    r._RegisterEnum(file, outers, m.GetEnumType())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"05-解析枚举类型\"><a href=\"#05-解析枚举类型\" class=\"headerlink\" title=\"05.解析枚举类型\"></a>05.解析枚举类型</h3><p>EnumType 的元素类型为descriptor.proto中的EnumDescriptorProto</p>\n<p>message,其结构如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type EnumDescriptorProto struct &#123;  </span><br><span class=\"line\">  &#x2F;&#x2F; Name 枚举名称</span><br><span class=\"line\">  Name    *string                     &#96;protobuf:&quot;bytes,1,opt,name&#x3D;name&quot; json:&quot;name,omitempty&quot;&#96;</span><br><span class=\"line\">  &#x2F;&#x2F; Value 枚举值</span><br><span class=\"line\">  Value   []*EnumValueDescriptorProto &#96;protobuf:&quot;bytes,2,rep,name&#x3D;value&quot; json:&quot;value,omitempty&quot;&#96;</span><br><span class=\"line\">  &#x2F;&#x2F; Options 枚举选项</span><br><span class=\"line\">  Options *EnumOptions                &#96;protobuf:&quot;bytes,3,opt,name&#x3D;options&quot; json:&quot;options,omitempty&quot;&#96;</span><br><span class=\"line\">  &#x2F;&#x2F; ReservedRange 预留范围</span><br><span class=\"line\">  ReservedRange []*EnumDescriptorProto_EnumReservedRange &#96;protobuf:&quot;bytes,4,rep,name&#x3D;reserved_range,json&#x3D;reservedRange&quot; json:&quot;reserved_range,omitempty&quot;&#96;</span><br><span class=\"line\">  &#x2F;&#x2F; ReservedName 预留名称</span><br><span class=\"line\">  ReservedName []string &#96;protobuf:&quot;bytes,5,rep,name&#x3D;reserved_name,json&#x3D;reservedName&quot; json:&quot;reserved_name,omitempty&quot;&#96;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>样例代码如下</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> MethodDescriptorProto <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Name rpc的名称</span></span><br><span class=\"line\">  Name *<span class=\"keyword\">string</span> <span class=\"string\">`protobuf:&quot;bytes,1,opt,name=name&quot; json:&quot;name,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// InputType rpc中的请求类型</span></span><br><span class=\"line\">  InputType  *<span class=\"keyword\">string</span>        <span class=\"string\">`protobuf:&quot;bytes,2,opt,name=input_type,json=inputType&quot; json:&quot;input_type,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// OutputType rpc中的返回类型</span></span><br><span class=\"line\">  OutputType *<span class=\"keyword\">string</span>        <span class=\"string\">`protobuf:&quot;bytes,3,opt,name=output_type,json=outputType&quot; json:&quot;output_type,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// Options rpc中的选项</span></span><br><span class=\"line\">  Options    *MethodOptions <span class=\"string\">`protobuf:&quot;bytes,4,opt,name=options&quot; json:&quot;options,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// ClientStreaming 是否是客户端流模式</span></span><br><span class=\"line\">  ClientStreaming *<span class=\"keyword\">bool</span> <span class=\"string\">`protobuf:&quot;varint,5,opt,name=client_streaming,json=clientStreaming,def=0&quot; json:&quot;client_streaming,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// ServerStreaming 是否是服务端流模式</span></span><br><span class=\"line\">  ServerStreaming *<span class=\"keyword\">bool</span> <span class=\"string\">`protobuf:&quot;varint,6,opt,name=server_streaming,json=serverStreaming,def=0&quot; json:&quot;server_streaming,omitempty&quot;`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"06-解析service类型\"><a href=\"#06-解析service类型\" class=\"headerlink\" title=\"06.解析service类型\"></a>06.解析service类型</h3><p>service 的元素类型为descriptor.proto中的ServiceDescriptorProto</p>\n<p> message,其结构如下</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> ServiceDescriptorProto <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Name service的名称</span></span><br><span class=\"line\">  Name    *<span class=\"keyword\">string</span>                  <span class=\"string\">`protobuf:&quot;bytes,1,opt,name=name&quot; json:&quot;name,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// Method service包含的rpc方法</span></span><br><span class=\"line\">  Method  []*MethodDescriptorProto <span class=\"string\">`protobuf:&quot;bytes,2,rep,name=method&quot; json:&quot;method,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// Options service中包含的选项</span></span><br><span class=\"line\">  Options *ServiceOptions          <span class=\"string\">`protobuf:&quot;bytes,3,opt,name=options&quot; json:&quot;options,omitempty&quot;`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>service类型中rpc方法的类型为descriptor.proto中的MethodDescriptorProto message,其结构如下</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> MethodDescriptorProto <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Name rpc的名称</span></span><br><span class=\"line\">  Name *<span class=\"keyword\">string</span> <span class=\"string\">`protobuf:&quot;bytes,1,opt,name=name&quot; json:&quot;name,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// InputType rpc中的请求类型</span></span><br><span class=\"line\">  InputType  *<span class=\"keyword\">string</span>        <span class=\"string\">`protobuf:&quot;bytes,2,opt,name=input_type,json=inputType&quot; json:&quot;input_type,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// OutputType rpc中的返回类型</span></span><br><span class=\"line\">  OutputType *<span class=\"keyword\">string</span>        <span class=\"string\">`protobuf:&quot;bytes,3,opt,name=output_type,json=outputType&quot; json:&quot;output_type,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// Options rpc中的选项</span></span><br><span class=\"line\">  Options    *MethodOptions <span class=\"string\">`protobuf:&quot;bytes,4,opt,name=options&quot; json:&quot;options,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// ClientStreaming 是否是客户端流模式</span></span><br><span class=\"line\">  ClientStreaming *<span class=\"keyword\">bool</span> <span class=\"string\">`protobuf:&quot;varint,5,opt,name=client_streaming,json=clientStreaming,def=0&quot; json:&quot;client_streaming,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// ServerStreaming 是否是服务端流模式</span></span><br><span class=\"line\">  ServerStreaming *<span class=\"keyword\">bool</span> <span class=\"string\">`protobuf:&quot;varint,6,opt,name=server_streaming,json=serverStreaming,def=0&quot; json:&quot;server_streaming,omitempty&quot;`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>样例代码:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(r *Registry)</span> _<span class=\"title\">LoadServices</span><span class=\"params\">(file *File)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> svcs []*Service</span><br><span class=\"line\">  <span class=\"keyword\">for</span> _, sd := <span class=\"keyword\">range</span> file.GetService() &#123;</span><br><span class=\"line\">    svc := &amp;Service&#123;</span><br><span class=\"line\">      File:                   file,</span><br><span class=\"line\">      ServiceDescriptorProto: sd,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, md := <span class=\"keyword\">range</span> sd.GetMethod() &#123;</span><br><span class=\"line\">      meth, err := r._NewMethod(svc, md)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> err</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      svc.Methods = <span class=\"built_in\">append</span>(svc.Methods, meth)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(svc.Methods) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">continue</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    svcs = <span class=\"built_in\">append</span>(svcs, svc)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  file.Services = svcs</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"07-将要生成的代码数据包装成CodeGeneratorResponse-File\"><a href=\"#07-将要生成的代码数据包装成CodeGeneratorResponse-File\" class=\"headerlink\" title=\"07.将要生成的代码数据包装成CodeGeneratorResponse_File\"></a>07.将要生成的代码数据包装成CodeGeneratorResponse_File</h3><p>CodeGeneratorResponse_File 位于plugin.proto文件中，其结构如下。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Represents a single generated file.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> CodeGeneratorResponse_File <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Name 文件名</span></span><br><span class=\"line\">\tName *<span class=\"keyword\">string</span> <span class=\"string\">`protobuf:&quot;bytes,1,opt,name=name&quot; json:&quot;name,omitempty&quot;`</span></span><br><span class=\"line\">    <span class=\"comment\">// InsertionPoint 目前还不知道用途</span></span><br><span class=\"line\">\tInsertionPoint *<span class=\"keyword\">string</span> <span class=\"string\">`protobuf:&quot;bytes,2,opt,name=insertion_point,json=insertionPoint&quot; json:&quot;insertion_point,omitempty&quot;`</span></span><br><span class=\"line\">\t<span class=\"comment\">// Content 文件的内容</span></span><br><span class=\"line\">\tContent *<span class=\"keyword\">string</span> <span class=\"string\">`protobuf:&quot;bytes,15,opt,name=content&quot; json:&quot;content,omitempty&quot;`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>样例代码如下</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// GoTemplate 用于生成相关的模板</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(g *gen)</span> <span class=\"title\">GoTemplate</span><span class=\"params\">(file *gengo.File)</span> *<span class=\"title\">plugin</span>.<span class=\"title\">CodeGeneratorResponse_File</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> err error</span><br><span class=\"line\">\tas := &amp;Args&#123;&#125;</span><br><span class=\"line\">\tas.Imports = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">bool</span>)</span><br><span class=\"line\">\tas.PackageName = file.GoPkg.Name</span><br><span class=\"line\">\tas.DateTime = time.Now().Local().String()</span><br><span class=\"line\">\tbuf := bytes.NewBuffer(<span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, <span class=\"number\">0</span>, <span class=\"number\">40960</span>))</span><br><span class=\"line\">\trspFile := <span class=\"built_in\">new</span>(plugin.CodeGeneratorResponse_File)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, service := <span class=\"keyword\">range</span> file.Services &#123;</span><br><span class=\"line\">\t\tg.GoService(file, as, service)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(as.Services) != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tas.IsHave = <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttp := template.New(<span class=\"string\">&quot;template.service&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> tp, err = tp.Parse(codeFileTemplate); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatalln(err.Error())</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err = tp.Execute(buf, as); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatalln(err.Error())</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tname, err := g.GetAllFilePath(file)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Println(PluginName, err.Error())</span><br><span class=\"line\">\t\tos.Exit(<span class=\"number\">-1</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\text := filepath.Ext(name)</span><br><span class=\"line\">\tbase := strings.TrimSuffix(name, ext)</span><br><span class=\"line\">\toutput := fmt.Sprintf(<span class=\"string\">&quot;%s.pb.template.go&quot;</span>, base)</span><br><span class=\"line\">\trspFile.Name = proto.String(output)</span><br><span class=\"line\">\trspFile.Content = proto.String(buf.String())</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> rspFile</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"08-将自定义代码写回给protoc-让protoc生成文件\"><a href=\"#08-将自定义代码写回给protoc-让protoc生成文件\" class=\"headerlink\" title=\"08.将自定义代码写回给protoc,让protoc生成文件\"></a>08.将自定义代码写回给protoc,让protoc生成文件</h3><p>protobuf写回，是将数据包装成plugin.proto中的plugin.CodeGeneratorResponse结构，是向os.Stdout写入，写入之后会传给protoc,protoc会根据文件数据,将其输出到文件中。</p>\n<p>plugin.CodeGeneratorResponse结构如下。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 用于写一段代码到protoc</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> CodeGeneratorResponse <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Error 用于向protoc返回数据</span></span><br><span class=\"line\">\tError *<span class=\"keyword\">string</span> <span class=\"string\">`protobuf:&quot;bytes,1,opt,name=error&quot; json:&quot;error,omitempty&quot;`</span></span><br><span class=\"line\">\t<span class=\"comment\">// 目前还不知用途</span></span><br><span class=\"line\">\tSupportedFeatures *<span class=\"keyword\">uint64</span>                       <span class=\"string\">`protobuf:&quot;varint,2,opt,name=supported_features,json=supportedFeatures&quot; json:&quot;supported_features,omitempty&quot;`</span></span><br><span class=\"line\">\t<span class=\"comment\">// 需要生成的文件,即返回的文件可以有多个</span></span><br><span class=\"line\">    File              []*CodeGeneratorResponse_File <span class=\"string\">`protobuf:&quot;bytes,15,rep,name=file&quot; json:&quot;file,omitempty&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>将这个结构，通过protobuf序列化之后，将得到的数据写入os.Stdout, 样例代码如下</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// WriteResponse 用于向标准输出中写数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">WriteResponse</span><span class=\"params\">(rsp *plugin.CodeGeneratorResponse)</span></span> &#123;</span><br><span class=\"line\">\tbuf, err := proto.Marshal(rsp)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatalln(err.Error())</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> _, err := os.Stdout.Write(buf); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatalln(err.Error())</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>至此,全篇解析完毕.</p>\n<p>demo地址:github.com/yuansudong/protoc-gen-template</p>\n","site":{"data":{"contact":[{"title":"github","icon":"icon-github","link":"https://github.com/yuansudong"},{"title":"email","icon":"icon-email","link":"mailto:1145919989@qq.com"},{"title":"qq","icon":"icon-qq","link":"/atom.xml"}],"favicons":["<link rel=\"shortcut icon\" href=\"/img//favicon.ico\">","<link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/img//favicon-16x16.png\">","<link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/img//favicon-32x32.png\">","<link rel=\"icon\" type=\"image/png\" sizes=\"48x48\" href=\"/img//favicon-48x48.png\">","<link rel=\"manifest\" href=\"/img//manifest.json\">","<meta name=\"mobile-web-app-capable\" content=\"yes\">","<meta name=\"theme-color\" content=\"#fff\">","<meta name=\"application-name\">","<link rel=\"apple-touch-icon\" sizes=\"57x57\" href=\"/img//apple-touch-icon-57x57.png\">","<link rel=\"apple-touch-icon\" sizes=\"60x60\" href=\"/img//apple-touch-icon-60x60.png\">","<link rel=\"apple-touch-icon\" sizes=\"72x72\" href=\"/img//apple-touch-icon-72x72.png\">","<link rel=\"apple-touch-icon\" sizes=\"76x76\" href=\"/img//apple-touch-icon-76x76.png\">","<link rel=\"apple-touch-icon\" sizes=\"114x114\" href=\"/img//apple-touch-icon-114x114.png\">","<link rel=\"apple-touch-icon\" sizes=\"120x120\" href=\"/img//apple-touch-icon-120x120.png\">","<link rel=\"apple-touch-icon\" sizes=\"144x144\" href=\"/img//apple-touch-icon-144x144.png\">","<link rel=\"apple-touch-icon\" sizes=\"152x152\" href=\"/img//apple-touch-icon-152x152.png\">","<link rel=\"apple-touch-icon\" sizes=\"167x167\" href=\"/img//apple-touch-icon-167x167.png\">","<link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/img//apple-touch-icon-180x180.png\">","<link rel=\"apple-touch-icon\" sizes=\"1024x1024\" href=\"/img//apple-touch-icon-1024x1024.png\">","<meta name=\"apple-mobile-web-app-capable\" content=\"yes\">","<meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black-translucent\">","<meta name=\"apple-mobile-web-app-title\">","<meta name=\"msapplication-TileColor\" content=\"#fff\">","<meta name=\"msapplication-TileImage\" content=\"/img//mstile-144x144.png\">","<meta name=\"msapplication-config\" content=\"/img//browserconfig.xml\">"]}},"excerpt":"","more":"<p>以下是此次测试的protobuf文件.</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">syntax = <span class=\"string\">&quot;proto3&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">package</span> service.account.v1;</span><br><span class=\"line\"><span class=\"keyword\">option</span> go_package = <span class=\"string\">&quot;github.com/yuansudong/protoc-gen-template/gen/gopb/service/account/normal/pbv1;pbv1&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;google/api/annotations.proto&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// C2SInnerLogin 内部用户登录请求</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">message</span> <span class=\"title\">C2SInnerLogin</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// UserName  用户名</span></span><br><span class=\"line\">  <span class=\"built_in\">string</span> UserName = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"comment\">// Passsword 密码</span></span><br><span class=\"line\">  <span class=\"built_in\">string</span> Password = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"comment\">// AppID 引用ID</span></span><br><span class=\"line\">  <span class=\"built_in\">string</span> AppID = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// S2CInnerLogin 内部用户登录响应</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">message</span> <span class=\"title\">S2CInnerLogin</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Token 访问令牌</span></span><br><span class=\"line\">  <span class=\"built_in\">string</span> Token = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// C2SInnerSignin 内部用户注册请求</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">message</span> <span class=\"title\">C2SInnerSignin</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// UserName  用户名</span></span><br><span class=\"line\">  <span class=\"built_in\">string</span> UserName = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"comment\">// Passsword 密码</span></span><br><span class=\"line\">  <span class=\"built_in\">string</span> Password = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"comment\">// AppID 引用程序ID</span></span><br><span class=\"line\">  <span class=\"built_in\">string</span> AppID = <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// S2CInnerUserSignin 注册时的响应</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">message</span> <span class=\"title\">S2CInnerSignin</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">string</span> Token = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Account 账户服务V1版本</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">service</span> <span class=\"title\">Account</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// InnerLogin 公司渠道登录</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">rpc</span> InnerLogin(C2SInnerLogin) <span class=\"keyword\">returns</span> (S2CInnerLogin) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">option</span> (google.api.http) = &#123;</span><br><span class=\"line\">      post: <span class=\"string\">&quot;/v1/inner/login&quot;</span></span><br><span class=\"line\">      body: <span class=\"string\">&quot;*&quot;</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// InnerSignin 公司渠道注册</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">rpc</span> InnerSignin(C2SInnerSignin) <span class=\"keyword\">returns</span> (S2CInnerSignin) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">option</span> (google.api.http) = &#123;</span><br><span class=\"line\">      post: <span class=\"string\">&quot;/v1/inner/signin&quot;</span></span><br><span class=\"line\">      body: <span class=\"string\">&quot;*&quot;</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"1-解析流程\"><a href=\"#1-解析流程\" class=\"headerlink\" title=\"1.解析流程\"></a>1.解析流程</h2><h3 id=\"01-protoc解析protobuf文件\"><a href=\"#01-protoc解析protobuf文件\" class=\"headerlink\" title=\"01.protoc解析protobuf文件\"></a>01.protoc解析protobuf文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$&#123;workspaceRoot&#125;</span>/protoc.exe </span><br><span class=\"line\">        --proto_path=<span class=\"variable\">$&#123;workspaceRoot&#125;</span>/protos/v3 </span><br><span class=\"line\">        --go_out=plugins=grpc:<span class=\"variable\">$&#123;env.GOPATH&#125;</span>/src </span><br><span class=\"line\">        --template_out=lang=go:import_prefix=cccc:<span class=\"variable\">$&#123;env.GOPATH&#125;</span>/src </span><br><span class=\"line\">        <span class=\"variable\">$&#123;workspaceRoot&#125;</span>/protos/v3/models/address.proto</span><br></pre></td></tr></table></figure>\n\n\n\n<p>${workspaceRoot} 等价于工程的根目录</p>\n<p>${env.GOPATH} 等价于环境变量中的GOPATH</p>\n<p>此处需要注意的是，protobuf的插件有命令要求，必须以protoc-gen-[名称]的格式命名,否则protoc找不到.</p>\n<p>其中 –_out 可以随意增加.</p>\n<p>比如:</p>\n<p>go_out等价的protobuf的插件名称为protoc-gen-go.</p>\n<p>template_out等价的protobuf的名称为protoc-gen-template.</p>\n<p>haha_out等价的protobuf的名称为protoc-gen-haha</p>\n<h3 id=\"02-protoc-gen-template解析数据\"><a href=\"#02-protoc-gen-template解析数据\" class=\"headerlink\" title=\"02.protoc-gen-template解析数据\"></a>02.protoc-gen-template解析数据</h3><p>protoc解析完毕后,将序列化之后的二进制数据,以标准输入的方式传递给protoc-gen-template.</p>\n<p>protoc-gen-template从标准输入读取二进制数据,读取完毕之后,进行反序列化,得到plugin.proto中的一个message,名为CodeGeneratorRequest</p>\n<p>其结构如下</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> CodeGeneratorRequest <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  FileToGenerate []<span class=\"keyword\">string</span> <span class=\"string\">`protobuf:&quot;bytes,1,rep,name=file_to_generate,json=fileToGenerate&quot; json:&quot;file_to_generate,omitempty&quot;`</span></span><br><span class=\"line\">  Parameter *<span class=\"keyword\">string</span> <span class=\"string\">`protobuf:&quot;bytes,2,opt,name=parameter&quot; json:&quot;parameter,omitempty&quot;`</span></span><br><span class=\"line\">  ProtoFile []*descriptorpb.FileDescriptorProto <span class=\"string\">`protobuf:&quot;bytes,15,rep,name=proto_file,json=protoFile&quot; json:&quot;proto_file,omitempty&quot;`</span></span><br><span class=\"line\">  CompilerVersion *Version <span class=\"string\">`protobuf:&quot;bytes,3,opt,name=compiler_version,json=compilerVersion&quot; json:&quot;compiler_version,omitempty&quot;`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>FileToGenerate 进行编译的protobuf的名称,有多少protobuf文件,就有多个文件名,此处就是 ${workspaceRoot}/protos/v3/models/address.proto</p>\n<p>Parameter 命令行传入的参数,对于此处就是lang=go;import_prefix=cc ,插件传参的格式如下.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">--&#123;&#123;插件名称&#125;&#125;_out&#x3D;lang&#x3D;&#123;&#123;命令行参数&#125;&#125;:&#123;&#123;生成文件路径&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">比如:</span><br><span class=\"line\"></span><br><span class=\"line\">$&#123;workspaceRoot&#125;&#x2F;protoc.exe </span><br><span class=\"line\">        --proto_path&#x3D;$&#123;workspaceRoot&#125;&#x2F;protos&#x2F;v3 </span><br><span class=\"line\">        --template_out&#x3D;lang&#x3D;go;import_prefix&#x3D;cccc:$&#123;env.GOPATH&#125;&#x2F;src </span><br><span class=\"line\">        $&#123;workspaceRoot&#125;&#x2F;protos&#x2F;v3&#x2F;models&#x2F;address.proto</span><br><span class=\"line\">其中lang&#x3D;go;import_prefix&#x3D;cc 就是命令行传入的参数</span><br></pre></td></tr></table></figure>\n\n\n\n<p>ProtoFile 将protobuf数据,反序列化成了结构体数组,每个元素包含着一个proto文件的所有数据</p>\n<p>CompilerVersion 协议版本号</p>\n<p>样例代码如下:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// GetRequest 用于从一个标准输入中,获取一个解析请求,io.Reader等价于os.Stdin</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">GetRequest</span><span class=\"params\">(r io.Reader)</span> <span class=\"params\">(*plugin.CodeGeneratorRequest, error)</span></span> &#123;</span><br><span class=\"line\">  input, err := ioutil.ReadAll(r)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, fmt.Errorf(<span class=\"string\">&quot;读取标准输入失败: %v&quot;</span>, err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  req := <span class=\"built_in\">new</span>(plugin.CodeGeneratorRequest)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err = proto.Unmarshal(input, req); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, fmt.Errorf(<span class=\"string\">&quot;读取标准输入失败: %v&quot;</span>, err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  log.Println(<span class=\"string\">&quot;参数是:&quot;</span>,req.Parameter)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> req, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>运行下列命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$&#123;workspaceRoot&#125;</span>/protoc.exe </span><br><span class=\"line\">        --proto_path=<span class=\"variable\">$&#123;workspaceRoot&#125;</span>/protos/v3 </span><br><span class=\"line\">        --go_out=plugins=grpc:<span class=\"variable\">$&#123;env.GOPATH&#125;</span>/src </span><br><span class=\"line\">        --template_out=lang=go;import_prefix=cccc:<span class=\"variable\">$&#123;env.GOPATH&#125;</span>/src </span><br><span class=\"line\">        <span class=\"variable\">$&#123;workspaceRoot&#125;</span>/protos/v3/models/address.proto</span><br></pre></td></tr></table></figure>\n\n\n\n<p>输出的结果为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2021&#x2F;03&#x2F;14 12:48:23 参数是: fix&#x3D;go;import_prefix&#x3D;cccc</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"03-解析File类型\"><a href=\"#03-解析File类型\" class=\"headerlink\" title=\"03.解析File类型\"></a>03.解析File类型</h3><p>ProtoFile的类型为descriptor.proto中的FileDescriptorProto.其结构如下.</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> FileDescriptorProto <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Name 文件名</span></span><br><span class=\"line\">  Name    *<span class=\"keyword\">string</span> <span class=\"string\">`protobuf:&quot;bytes,1,opt,name=name&quot; json:&quot;name,omitempty&quot;`</span>       <span class=\"comment\">// file name, relative to root of source tree</span></span><br><span class=\"line\">  <span class=\"comment\">// Package 包名</span></span><br><span class=\"line\">  Package *<span class=\"keyword\">string</span> <span class=\"string\">`protobuf:&quot;bytes,2,opt,name=package&quot; json:&quot;package,omitempty&quot;`</span> <span class=\"comment\">// e.g. &quot;foo&quot;, &quot;foo.bar&quot;, etc.</span></span><br><span class=\"line\">  <span class=\"comment\">// Dependency 该文件依赖哪些proto文件,比如本例中,依赖就有google/api/annotations.proto</span></span><br><span class=\"line\">  Dependency []<span class=\"keyword\">string</span> <span class=\"string\">`protobuf:&quot;bytes,3,rep,name=dependency&quot; json:&quot;dependency,omitempty&quot;`</span> </span><br><span class=\"line\">  PublicDependency []<span class=\"keyword\">int32</span> <span class=\"string\">`protobuf:&quot;varint,10,rep,name=public_dependency,json=publicDependency&quot; json:&quot;public_dependency,omitempty&quot;`</span></span><br><span class=\"line\">  WeakDependency []<span class=\"keyword\">int32</span> <span class=\"string\">`protobuf:&quot;varint,11,rep,name=weak_dependency,json=weakDependency&quot; json:&quot;weak_dependency,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// MessageType 该proto文件下的message类型</span></span><br><span class=\"line\">  MessageType []*DescriptorProto        <span class=\"string\">`protobuf:&quot;bytes,4,rep,name=message_type,json=messageType&quot; json:&quot;message_type,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// EnumType 该proto文件下的enum类型</span></span><br><span class=\"line\">  EnumType    []*EnumDescriptorProto    <span class=\"string\">`protobuf:&quot;bytes,5,rep,name=enum_type,json=enumType&quot; json:&quot;enum_type,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// Service 该proto文件下的message类型</span></span><br><span class=\"line\">  Service     []*ServiceDescriptorProto <span class=\"string\">`protobuf:&quot;bytes,6,rep,name=service&quot; json:&quot;service,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// Extension 扩展</span></span><br><span class=\"line\">  Extension   []*FieldDescriptorProto   <span class=\"string\">`protobuf:&quot;bytes,7,rep,name=extension&quot; json:&quot;extension,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// Options选项,比如go_package就是一个选项</span></span><br><span class=\"line\">  Options     *FileOptions              <span class=\"string\">`protobuf:&quot;bytes,8,opt,name=options&quot; json:&quot;options,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// SourceCodeInfo 针对于optional的信息</span></span><br><span class=\"line\">  SourceCodeInfo *SourceCodeInfo <span class=\"string\">`protobuf:&quot;bytes,9,opt,name=source_code_info,json=sourceCodeInfo&quot; json:&quot;source_code_info,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// syntax 指定是proto2,还是proto3</span></span><br><span class=\"line\">  Syntax *<span class=\"keyword\">string</span> <span class=\"string\">`protobuf:&quot;bytes,12,opt,name=syntax&quot; json:&quot;syntax,omitempty&quot;`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>样例demo代码:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(r *Registry)</span> <span class=\"title\">Load</span><span class=\"params\">(req *plugin.CodeGeneratorRequest)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> _, file := <span class=\"keyword\">range</span> req.GetProtoFile() &#123;</span><br><span class=\"line\">    pkg := GoPackage&#123;   </span><br><span class=\"line\">    Path: r._GoPackagePath(file),</span><br><span class=\"line\">    Name: r._DefaultGoPackageName(file),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err := r.ReserveGoPackageAlias(pkg.Name, pkg.Path); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; ; i++ &#123;</span><br><span class=\"line\">        alias := fmt.Sprintf(<span class=\"string\">&quot;%s_%d&quot;</span>, pkg.Name, i)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err := r.ReserveGoPackageAlias(alias, pkg.Path); err == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">          pkg.Alias = alias</span><br><span class=\"line\">          <span class=\"keyword\">break</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    f := &amp;File&#123;</span><br><span class=\"line\">      FileDescriptorProto: file,</span><br><span class=\"line\">      GoPkg:               pkg,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    r._Files[file.GetName()] = f</span><br><span class=\"line\">    r._RegisterMsg(f, <span class=\"literal\">nil</span>, file.GetMessageType())</span><br><span class=\"line\">    r._RegisterEnum(f, <span class=\"literal\">nil</span>, file.GetEnumType())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"04-解析Message类型\"><a href=\"#04-解析Message类型\" class=\"headerlink\" title=\"04.解析Message类型\"></a>04.解析Message类型</h3><p>MessageType的元素类型为descriptor.proto中的DescriptorProto message,其结构如下</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> DescriptorProto <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Name 消息名,比如C2SInnerLogin</span></span><br><span class=\"line\">  Name           *<span class=\"keyword\">string</span>                           <span class=\"string\">`protobuf:&quot;bytes,1,opt,name=name&quot; json:&quot;name,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// Field 该消息下有哪些字段</span></span><br><span class=\"line\">  Field          []*FieldDescriptorProto           <span class=\"string\">`protobuf:&quot;bytes,2,rep,name=field&quot; json:&quot;field,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// Extension 该消息下有哪些扩展</span></span><br><span class=\"line\">  Extension      []*FieldDescriptorProto           <span class=\"string\">`protobuf:&quot;bytes,6,rep,name=extension&quot; json:&quot;extension,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// NestedType该消息下有哪些嵌套类型</span></span><br><span class=\"line\">  NestedType     []*DescriptorProto                <span class=\"string\">`protobuf:&quot;bytes,3,rep,name=nested_type,json=nestedType&quot; json:&quot;nested_type,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// EnumType 该消息下有哪些枚举类型</span></span><br><span class=\"line\">  EnumType       []*EnumDescriptorProto            <span class=\"string\">`protobuf:&quot;bytes,4,rep,name=enum_type,json=enumType&quot; json:&quot;enum_type,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// ExtensionRange 该消息的扩展范围</span></span><br><span class=\"line\">  ExtensionRange []*DescriptorProto_ExtensionRange <span class=\"string\">`protobuf:&quot;bytes,5,rep,name=extension_range,json=extensionRange&quot; json:&quot;extension_range,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// OneofDecl  该消息下oneof结构</span></span><br><span class=\"line\">  OneofDecl      []*OneofDescriptorProto           <span class=\"string\">`protobuf:&quot;bytes,8,rep,name=oneof_decl,json=oneofDecl&quot; json:&quot;oneof_decl,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// Options 该消息下有哪些选项</span></span><br><span class=\"line\">  Options        *MessageOptions                   <span class=\"string\">`protobuf:&quot;bytes,7,opt,name=options&quot; json:&quot;options,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// ReservedRange 预留范围</span></span><br><span class=\"line\">  ReservedRange  []*DescriptorProto_ReservedRange  <span class=\"string\">`protobuf:&quot;bytes,9,rep,name=reserved_range,json=reservedRange&quot; json:&quot;reserved_range,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// ReservedName 预留名称</span></span><br><span class=\"line\">  ReservedName []<span class=\"keyword\">string</span> <span class=\"string\">`protobuf:&quot;bytes,10,rep,name=reserved_name,json=reservedName&quot; json:&quot;reserved_name,omitempty&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>Field 的元素类型为descriptor.proto中的FieldDescriptorProto message,其结构如下</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> FieldDescriptorProto <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Name 字段名称</span></span><br><span class=\"line\">  Name   *<span class=\"keyword\">string</span>                     <span class=\"string\">`protobuf:&quot;bytes,1,opt,name=name&quot; json:&quot;name,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// Number 字段索引,比如 int64 ha=1,其中1就为Number</span></span><br><span class=\"line\">  Number *<span class=\"keyword\">int32</span>                      <span class=\"string\">`protobuf:&quot;varint,3,opt,name=number&quot; json:&quot;number,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// Label 用于指定该字段是required,repeated,optional 类型</span></span><br><span class=\"line\">  Label  *FieldDescriptorProto_Label <span class=\"string\">`protobuf:&quot;varint,4,opt,name=label,enum=google.protobuf.FieldDescriptorProto_Label&quot; json:&quot;label,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// Type 指定字段的类型</span></span><br><span class=\"line\">  Type *FieldDescriptorProto_Type <span class=\"string\">`protobuf:&quot;varint,5,opt,name=type,enum=google.protobuf.FieldDescriptorProto_Type&quot; json:&quot;type,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// TypeName 对于字段是message和enum类型的,这个代表和此种类型的名称</span></span><br><span class=\"line\">  TypeName *<span class=\"keyword\">string</span> <span class=\"string\">`protobuf:&quot;bytes,6,opt,name=type_name,json=typeName&quot; json:&quot;type_name,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// Extendee  扩展相关</span></span><br><span class=\"line\">  Extendee *<span class=\"keyword\">string</span> <span class=\"string\">`protobuf:&quot;bytes,2,opt,name=extendee&quot; json:&quot;extendee,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// DefaultValue 字段的默认值</span></span><br><span class=\"line\">  DefaultValue *<span class=\"keyword\">string</span> <span class=\"string\">`protobuf:&quot;bytes,7,opt,name=default_value,json=defaultValue&quot; json:&quot;default_value,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// OneofIndex oneof类型的索引</span></span><br><span class=\"line\">  OneofIndex *<span class=\"keyword\">int32</span> <span class=\"string\">`protobuf:&quot;varint,9,opt,name=oneof_index,json=oneofIndex&quot; json:&quot;oneof_index,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// JsonName 该字段对应的JSON字符串</span></span><br><span class=\"line\">  JsonName *<span class=\"keyword\">string</span>       <span class=\"string\">`protobuf:&quot;bytes,10,opt,name=json_name,json=jsonName&quot; json:&quot;json_name,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// Options 字段呃选项</span></span><br><span class=\"line\">  Options  *FieldOptions <span class=\"string\">`protobuf:&quot;bytes,8,opt,name=options&quot; json:&quot;options,omitempty&quot;`</span></span><br><span class=\"line\">  Proto3Optional *<span class=\"keyword\">bool</span> <span class=\"string\">`protobuf:&quot;varint,17,opt,name=proto3_optional,json=proto3Optional&quot; json:&quot;proto3_optional,omitempty&quot;`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>样例代码:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// _RegisterMsg 注册message类型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(r *Registry)</span> _<span class=\"title\">RegisterMsg</span><span class=\"params\">(file *File, outerPath []<span class=\"keyword\">string</span>, msgs []*descriptor.DescriptorProto)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> i, md := <span class=\"keyword\">range</span> msgs &#123;</span><br><span class=\"line\">    m := &amp;Message&#123;</span><br><span class=\"line\">      File:            file,</span><br><span class=\"line\">      Outers:          outerPath,</span><br><span class=\"line\">      DescriptorProto: md,</span><br><span class=\"line\">      Index:           i,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, fd := <span class=\"keyword\">range</span> md.GetField() &#123;</span><br><span class=\"line\">      m.Fields = <span class=\"built_in\">append</span>(m.Fields, &amp;Field&#123;</span><br><span class=\"line\">        Message:              m,</span><br><span class=\"line\">        FieldDescriptorProto: fd,</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    file.Messages = <span class=\"built_in\">append</span>(file.Messages, m)</span><br><span class=\"line\">    r._Msgs[m.FQMN()] = m</span><br><span class=\"line\">    <span class=\"keyword\">var</span> outers []<span class=\"keyword\">string</span></span><br><span class=\"line\">    outers = <span class=\"built_in\">append</span>(outers, outerPath...)</span><br><span class=\"line\">    outers = <span class=\"built_in\">append</span>(outers, m.GetName())</span><br><span class=\"line\">    r._RegisterMsg(file, outers, m.GetNestedType())</span><br><span class=\"line\">    r._RegisterEnum(file, outers, m.GetEnumType())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"05-解析枚举类型\"><a href=\"#05-解析枚举类型\" class=\"headerlink\" title=\"05.解析枚举类型\"></a>05.解析枚举类型</h3><p>EnumType 的元素类型为descriptor.proto中的EnumDescriptorProto</p>\n<p>message,其结构如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type EnumDescriptorProto struct &#123;  </span><br><span class=\"line\">  &#x2F;&#x2F; Name 枚举名称</span><br><span class=\"line\">  Name    *string                     &#96;protobuf:&quot;bytes,1,opt,name&#x3D;name&quot; json:&quot;name,omitempty&quot;&#96;</span><br><span class=\"line\">  &#x2F;&#x2F; Value 枚举值</span><br><span class=\"line\">  Value   []*EnumValueDescriptorProto &#96;protobuf:&quot;bytes,2,rep,name&#x3D;value&quot; json:&quot;value,omitempty&quot;&#96;</span><br><span class=\"line\">  &#x2F;&#x2F; Options 枚举选项</span><br><span class=\"line\">  Options *EnumOptions                &#96;protobuf:&quot;bytes,3,opt,name&#x3D;options&quot; json:&quot;options,omitempty&quot;&#96;</span><br><span class=\"line\">  &#x2F;&#x2F; ReservedRange 预留范围</span><br><span class=\"line\">  ReservedRange []*EnumDescriptorProto_EnumReservedRange &#96;protobuf:&quot;bytes,4,rep,name&#x3D;reserved_range,json&#x3D;reservedRange&quot; json:&quot;reserved_range,omitempty&quot;&#96;</span><br><span class=\"line\">  &#x2F;&#x2F; ReservedName 预留名称</span><br><span class=\"line\">  ReservedName []string &#96;protobuf:&quot;bytes,5,rep,name&#x3D;reserved_name,json&#x3D;reservedName&quot; json:&quot;reserved_name,omitempty&quot;&#96;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>样例代码如下</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> MethodDescriptorProto <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Name rpc的名称</span></span><br><span class=\"line\">  Name *<span class=\"keyword\">string</span> <span class=\"string\">`protobuf:&quot;bytes,1,opt,name=name&quot; json:&quot;name,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// InputType rpc中的请求类型</span></span><br><span class=\"line\">  InputType  *<span class=\"keyword\">string</span>        <span class=\"string\">`protobuf:&quot;bytes,2,opt,name=input_type,json=inputType&quot; json:&quot;input_type,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// OutputType rpc中的返回类型</span></span><br><span class=\"line\">  OutputType *<span class=\"keyword\">string</span>        <span class=\"string\">`protobuf:&quot;bytes,3,opt,name=output_type,json=outputType&quot; json:&quot;output_type,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// Options rpc中的选项</span></span><br><span class=\"line\">  Options    *MethodOptions <span class=\"string\">`protobuf:&quot;bytes,4,opt,name=options&quot; json:&quot;options,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// ClientStreaming 是否是客户端流模式</span></span><br><span class=\"line\">  ClientStreaming *<span class=\"keyword\">bool</span> <span class=\"string\">`protobuf:&quot;varint,5,opt,name=client_streaming,json=clientStreaming,def=0&quot; json:&quot;client_streaming,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// ServerStreaming 是否是服务端流模式</span></span><br><span class=\"line\">  ServerStreaming *<span class=\"keyword\">bool</span> <span class=\"string\">`protobuf:&quot;varint,6,opt,name=server_streaming,json=serverStreaming,def=0&quot; json:&quot;server_streaming,omitempty&quot;`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"06-解析service类型\"><a href=\"#06-解析service类型\" class=\"headerlink\" title=\"06.解析service类型\"></a>06.解析service类型</h3><p>service 的元素类型为descriptor.proto中的ServiceDescriptorProto</p>\n<p> message,其结构如下</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> ServiceDescriptorProto <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Name service的名称</span></span><br><span class=\"line\">  Name    *<span class=\"keyword\">string</span>                  <span class=\"string\">`protobuf:&quot;bytes,1,opt,name=name&quot; json:&quot;name,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// Method service包含的rpc方法</span></span><br><span class=\"line\">  Method  []*MethodDescriptorProto <span class=\"string\">`protobuf:&quot;bytes,2,rep,name=method&quot; json:&quot;method,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// Options service中包含的选项</span></span><br><span class=\"line\">  Options *ServiceOptions          <span class=\"string\">`protobuf:&quot;bytes,3,opt,name=options&quot; json:&quot;options,omitempty&quot;`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>service类型中rpc方法的类型为descriptor.proto中的MethodDescriptorProto message,其结构如下</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> MethodDescriptorProto <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Name rpc的名称</span></span><br><span class=\"line\">  Name *<span class=\"keyword\">string</span> <span class=\"string\">`protobuf:&quot;bytes,1,opt,name=name&quot; json:&quot;name,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// InputType rpc中的请求类型</span></span><br><span class=\"line\">  InputType  *<span class=\"keyword\">string</span>        <span class=\"string\">`protobuf:&quot;bytes,2,opt,name=input_type,json=inputType&quot; json:&quot;input_type,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// OutputType rpc中的返回类型</span></span><br><span class=\"line\">  OutputType *<span class=\"keyword\">string</span>        <span class=\"string\">`protobuf:&quot;bytes,3,opt,name=output_type,json=outputType&quot; json:&quot;output_type,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// Options rpc中的选项</span></span><br><span class=\"line\">  Options    *MethodOptions <span class=\"string\">`protobuf:&quot;bytes,4,opt,name=options&quot; json:&quot;options,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// ClientStreaming 是否是客户端流模式</span></span><br><span class=\"line\">  ClientStreaming *<span class=\"keyword\">bool</span> <span class=\"string\">`protobuf:&quot;varint,5,opt,name=client_streaming,json=clientStreaming,def=0&quot; json:&quot;client_streaming,omitempty&quot;`</span></span><br><span class=\"line\">  <span class=\"comment\">// ServerStreaming 是否是服务端流模式</span></span><br><span class=\"line\">  ServerStreaming *<span class=\"keyword\">bool</span> <span class=\"string\">`protobuf:&quot;varint,6,opt,name=server_streaming,json=serverStreaming,def=0&quot; json:&quot;server_streaming,omitempty&quot;`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>样例代码:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(r *Registry)</span> _<span class=\"title\">LoadServices</span><span class=\"params\">(file *File)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> svcs []*Service</span><br><span class=\"line\">  <span class=\"keyword\">for</span> _, sd := <span class=\"keyword\">range</span> file.GetService() &#123;</span><br><span class=\"line\">    svc := &amp;Service&#123;</span><br><span class=\"line\">      File:                   file,</span><br><span class=\"line\">      ServiceDescriptorProto: sd,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, md := <span class=\"keyword\">range</span> sd.GetMethod() &#123;</span><br><span class=\"line\">      meth, err := r._NewMethod(svc, md)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> err</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      svc.Methods = <span class=\"built_in\">append</span>(svc.Methods, meth)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(svc.Methods) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">continue</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    svcs = <span class=\"built_in\">append</span>(svcs, svc)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  file.Services = svcs</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"07-将要生成的代码数据包装成CodeGeneratorResponse-File\"><a href=\"#07-将要生成的代码数据包装成CodeGeneratorResponse-File\" class=\"headerlink\" title=\"07.将要生成的代码数据包装成CodeGeneratorResponse_File\"></a>07.将要生成的代码数据包装成CodeGeneratorResponse_File</h3><p>CodeGeneratorResponse_File 位于plugin.proto文件中，其结构如下。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Represents a single generated file.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> CodeGeneratorResponse_File <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Name 文件名</span></span><br><span class=\"line\">\tName *<span class=\"keyword\">string</span> <span class=\"string\">`protobuf:&quot;bytes,1,opt,name=name&quot; json:&quot;name,omitempty&quot;`</span></span><br><span class=\"line\">    <span class=\"comment\">// InsertionPoint 目前还不知道用途</span></span><br><span class=\"line\">\tInsertionPoint *<span class=\"keyword\">string</span> <span class=\"string\">`protobuf:&quot;bytes,2,opt,name=insertion_point,json=insertionPoint&quot; json:&quot;insertion_point,omitempty&quot;`</span></span><br><span class=\"line\">\t<span class=\"comment\">// Content 文件的内容</span></span><br><span class=\"line\">\tContent *<span class=\"keyword\">string</span> <span class=\"string\">`protobuf:&quot;bytes,15,opt,name=content&quot; json:&quot;content,omitempty&quot;`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>样例代码如下</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// GoTemplate 用于生成相关的模板</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(g *gen)</span> <span class=\"title\">GoTemplate</span><span class=\"params\">(file *gengo.File)</span> *<span class=\"title\">plugin</span>.<span class=\"title\">CodeGeneratorResponse_File</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> err error</span><br><span class=\"line\">\tas := &amp;Args&#123;&#125;</span><br><span class=\"line\">\tas.Imports = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">bool</span>)</span><br><span class=\"line\">\tas.PackageName = file.GoPkg.Name</span><br><span class=\"line\">\tas.DateTime = time.Now().Local().String()</span><br><span class=\"line\">\tbuf := bytes.NewBuffer(<span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, <span class=\"number\">0</span>, <span class=\"number\">40960</span>))</span><br><span class=\"line\">\trspFile := <span class=\"built_in\">new</span>(plugin.CodeGeneratorResponse_File)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, service := <span class=\"keyword\">range</span> file.Services &#123;</span><br><span class=\"line\">\t\tg.GoService(file, as, service)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(as.Services) != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tas.IsHave = <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttp := template.New(<span class=\"string\">&quot;template.service&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> tp, err = tp.Parse(codeFileTemplate); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatalln(err.Error())</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err = tp.Execute(buf, as); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatalln(err.Error())</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tname, err := g.GetAllFilePath(file)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Println(PluginName, err.Error())</span><br><span class=\"line\">\t\tos.Exit(<span class=\"number\">-1</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\text := filepath.Ext(name)</span><br><span class=\"line\">\tbase := strings.TrimSuffix(name, ext)</span><br><span class=\"line\">\toutput := fmt.Sprintf(<span class=\"string\">&quot;%s.pb.template.go&quot;</span>, base)</span><br><span class=\"line\">\trspFile.Name = proto.String(output)</span><br><span class=\"line\">\trspFile.Content = proto.String(buf.String())</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> rspFile</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"08-将自定义代码写回给protoc-让protoc生成文件\"><a href=\"#08-将自定义代码写回给protoc-让protoc生成文件\" class=\"headerlink\" title=\"08.将自定义代码写回给protoc,让protoc生成文件\"></a>08.将自定义代码写回给protoc,让protoc生成文件</h3><p>protobuf写回，是将数据包装成plugin.proto中的plugin.CodeGeneratorResponse结构，是向os.Stdout写入，写入之后会传给protoc,protoc会根据文件数据,将其输出到文件中。</p>\n<p>plugin.CodeGeneratorResponse结构如下。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 用于写一段代码到protoc</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> CodeGeneratorResponse <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Error 用于向protoc返回数据</span></span><br><span class=\"line\">\tError *<span class=\"keyword\">string</span> <span class=\"string\">`protobuf:&quot;bytes,1,opt,name=error&quot; json:&quot;error,omitempty&quot;`</span></span><br><span class=\"line\">\t<span class=\"comment\">// 目前还不知用途</span></span><br><span class=\"line\">\tSupportedFeatures *<span class=\"keyword\">uint64</span>                       <span class=\"string\">`protobuf:&quot;varint,2,opt,name=supported_features,json=supportedFeatures&quot; json:&quot;supported_features,omitempty&quot;`</span></span><br><span class=\"line\">\t<span class=\"comment\">// 需要生成的文件,即返回的文件可以有多个</span></span><br><span class=\"line\">    File              []*CodeGeneratorResponse_File <span class=\"string\">`protobuf:&quot;bytes,15,rep,name=file&quot; json:&quot;file,omitempty&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>将这个结构，通过protobuf序列化之后，将得到的数据写入os.Stdout, 样例代码如下</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// WriteResponse 用于向标准输出中写数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">WriteResponse</span><span class=\"params\">(rsp *plugin.CodeGeneratorResponse)</span></span> &#123;</span><br><span class=\"line\">\tbuf, err := proto.Marshal(rsp)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatalln(err.Error())</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> _, err := os.Stdout.Write(buf); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatalln(err.Error())</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>至此,全篇解析完毕.</p>\n<p>demo地址:github.com/yuansudong/protoc-gen-template</p>\n"},{"title":"基于hexo+github+自定义域名,搭建安全https的博客网站","cover":"/img/document-tool/hexo_title.png","subtitle":"基于hexo+github+自定义域名,搭建安全https的博客网站","author":{"nick":"袁苏东","link":"https://github.com/yuansudong"},"typora-root-url":"document-tool-hexo","_content":"\n## 1.github\n\n### 01.注册账号\n\n## 地址：https://www.github.com\n\n![image-20210317053248148](/image-20210317053248148.png)\n\n### 02.建立博客仓库\n\n\n\n博客仓库的建立是有要求的，其要求便是xxx.github.io。而xxx是你的个人名字或者组织名称，比如这里就是yuansudong。建立好之后，其格式如下。\n\n![image-20210317053920237](/image-20210317053920237.png)\n\n\n\n## 2.域名\n\n\n\n### 01.注册\n\n\n\n域名的注册，是为了自定义域名准备的。倘若你习惯以xxx.github.io访问自己的博客，可以跳过这一步。\n\n而个人的DNS是在腾讯云注册的，吐槽一句，腾讯云的使用体验，真的是其他xxx不能比的，google除外。\n\n地址：https://dnspod.cloud.tencent.com/?from=qcloudHpProductDns/\n\n![image-20210317054230880](/image-20210317054230880.png)\n\n个人挑了个最便宜的域名，以个人名称+top结尾，1元钱/首年。\n\n\n\n### 02.解析记录\n\n\n\n在域名解析完毕后，需要在DNSPOD那里添加两行解析记录，其解析记录的类型为CNAME,其目的是将自身域名解析成xxx.github.io.\n\n地址：https://console.cloud.tencent.com/cns\n\n![image-20210317054934953](/image-20210317054934953.png)\n\nwww 是为了解析www.yuansudong.top到yuansudong.github.io.\n\n@是为了解析yuansudong.top到yuansudong.github.io\n\n一定要加这两个解析，不然为自己的博客接入广告的时候，是个麻烦事情，比如Google Adsense\n\n\n\n## 3.hexo搭建\n\n### 01.安装node.js\n\n地址：http://nodejs.cn/download/\n\n![image-20210317055530921](/image-20210317055530921.png)\n\n\n\n测试命令\n\n```bash\nnode -v\n```\n\n为npm设置淘宝镜像\n\n```bash\nnpm config set registry https://registry.npm.taobao.org\n```\n\n验证\n\n```bash\nnpm config get registry \n```\n\n输出结果\n\n```bash\nD:\\>npm config get registry\nhttps://registry.npm.taobao.org/\n```\n\n### 02.全局安装hexo\n\n```\nnpm install -g hexo\n```\n\n### 03.在github上建立一个博客仓库\n\n在github上建立一个博客仓库的目的,是为了保存自身博客不丢失.前面的xxx.github.io仓库只是用来发布时的仓库.我个人的仓库名称为blog.\n\n![image-20210317061018866](/image-20210317061018866.png)\n\n### 04.克隆仓库\n\n#### 1)克隆仓库\n\n```bash\ngit clone https://www.github.com/yuansudong/blog.git\n```\n\n#### 2)hexo初始化\n\nhexo的初始化要求必须在一个空目录下,而blog仓库中,至少有.git文件夹.所以需要先建立一个文件夹之后再初始化\n\n```bash\nmkdir temp && cd temp && hexo init && npm install && hexo s -g\t\n```\n\n![image-20210317061959427](/image-20210317061959427.png)\n\n此时,你就可以通过在浏览器中打开http://localhost:4000进行对博客的访问了.我本地访问的页面如下\n\n![image-20210317062108396](/image-20210317062108396.png)\n\n### 05.美化hexo\n\nhexo安装完毕之后,下一步的事情就是要进行博客的美化工作,毕竟最原始的hexo,很难满足自身的意愿.\n\nhexo的主题地址可通过该链接进行访问:https://hexo.bootcss.com/themes/\n\n![image-20210317062709087](/image-20210317062709087.png)\n\n因为是演示文档,所以我随便选了一个主题,是https://github.com/Halyul/hexo-theme-mdui\n\n在hexo的根目录下,本人是temp,运行下列命令:\n\n```bash\ncd themes && git clone https://github.com/Halyul/hexo-theme-matery.git\n```\n\n\n\n克隆完毕后,将hexo根目录(temp下)的_config.yml打开,修改主题为hexo-theme-mudi,并修改一些相关的配置.\n\n![image-20210317070431369](/image-20210317070431369.png)\n\n\n\n输入下列命令验证结果\n\n```bash\nhexo s -g\n```\n\n![image-20210317070525288](/image-20210317070525288.png)\n\n至于其他的相关配置可以从github上的主页上查看.\n\n\n\n## 搜索引擎收录\n\n### 01.百度收录\n\n#### 1）安装百度收录插件\n\n```bash\nnpm install hexo-generator-baidu-sitemap --save\n```\n\n\n\n## 02.谷歌收录\n\n#### 1） 安装谷歌收录插件\n\n```bash\nnpm install hexo-generator-sitemap --save\n```\n\n","source":"_posts/document-tool-hexo.md","raw":"---\n\ntitle: 基于hexo+github+自定义域名,搭建安全https的博客网站\ncover: /img/document-tool/hexo_title.png\nsubtitle: 基于hexo+github+自定义域名,搭建安全https的博客网站\ncategories: \"文档工具\"\ntags: \"文档工具\"\nauthor:\n  nick: 袁苏东\n  link: https://github.com/yuansudong\ntypora-root-url: document-tool-hexo\n---\n\n## 1.github\n\n### 01.注册账号\n\n## 地址：https://www.github.com\n\n![image-20210317053248148](/image-20210317053248148.png)\n\n### 02.建立博客仓库\n\n\n\n博客仓库的建立是有要求的，其要求便是xxx.github.io。而xxx是你的个人名字或者组织名称，比如这里就是yuansudong。建立好之后，其格式如下。\n\n![image-20210317053920237](/image-20210317053920237.png)\n\n\n\n## 2.域名\n\n\n\n### 01.注册\n\n\n\n域名的注册，是为了自定义域名准备的。倘若你习惯以xxx.github.io访问自己的博客，可以跳过这一步。\n\n而个人的DNS是在腾讯云注册的，吐槽一句，腾讯云的使用体验，真的是其他xxx不能比的，google除外。\n\n地址：https://dnspod.cloud.tencent.com/?from=qcloudHpProductDns/\n\n![image-20210317054230880](/image-20210317054230880.png)\n\n个人挑了个最便宜的域名，以个人名称+top结尾，1元钱/首年。\n\n\n\n### 02.解析记录\n\n\n\n在域名解析完毕后，需要在DNSPOD那里添加两行解析记录，其解析记录的类型为CNAME,其目的是将自身域名解析成xxx.github.io.\n\n地址：https://console.cloud.tencent.com/cns\n\n![image-20210317054934953](/image-20210317054934953.png)\n\nwww 是为了解析www.yuansudong.top到yuansudong.github.io.\n\n@是为了解析yuansudong.top到yuansudong.github.io\n\n一定要加这两个解析，不然为自己的博客接入广告的时候，是个麻烦事情，比如Google Adsense\n\n\n\n## 3.hexo搭建\n\n### 01.安装node.js\n\n地址：http://nodejs.cn/download/\n\n![image-20210317055530921](/image-20210317055530921.png)\n\n\n\n测试命令\n\n```bash\nnode -v\n```\n\n为npm设置淘宝镜像\n\n```bash\nnpm config set registry https://registry.npm.taobao.org\n```\n\n验证\n\n```bash\nnpm config get registry \n```\n\n输出结果\n\n```bash\nD:\\>npm config get registry\nhttps://registry.npm.taobao.org/\n```\n\n### 02.全局安装hexo\n\n```\nnpm install -g hexo\n```\n\n### 03.在github上建立一个博客仓库\n\n在github上建立一个博客仓库的目的,是为了保存自身博客不丢失.前面的xxx.github.io仓库只是用来发布时的仓库.我个人的仓库名称为blog.\n\n![image-20210317061018866](/image-20210317061018866.png)\n\n### 04.克隆仓库\n\n#### 1)克隆仓库\n\n```bash\ngit clone https://www.github.com/yuansudong/blog.git\n```\n\n#### 2)hexo初始化\n\nhexo的初始化要求必须在一个空目录下,而blog仓库中,至少有.git文件夹.所以需要先建立一个文件夹之后再初始化\n\n```bash\nmkdir temp && cd temp && hexo init && npm install && hexo s -g\t\n```\n\n![image-20210317061959427](/image-20210317061959427.png)\n\n此时,你就可以通过在浏览器中打开http://localhost:4000进行对博客的访问了.我本地访问的页面如下\n\n![image-20210317062108396](/image-20210317062108396.png)\n\n### 05.美化hexo\n\nhexo安装完毕之后,下一步的事情就是要进行博客的美化工作,毕竟最原始的hexo,很难满足自身的意愿.\n\nhexo的主题地址可通过该链接进行访问:https://hexo.bootcss.com/themes/\n\n![image-20210317062709087](/image-20210317062709087.png)\n\n因为是演示文档,所以我随便选了一个主题,是https://github.com/Halyul/hexo-theme-mdui\n\n在hexo的根目录下,本人是temp,运行下列命令:\n\n```bash\ncd themes && git clone https://github.com/Halyul/hexo-theme-matery.git\n```\n\n\n\n克隆完毕后,将hexo根目录(temp下)的_config.yml打开,修改主题为hexo-theme-mudi,并修改一些相关的配置.\n\n![image-20210317070431369](/image-20210317070431369.png)\n\n\n\n输入下列命令验证结果\n\n```bash\nhexo s -g\n```\n\n![image-20210317070525288](/image-20210317070525288.png)\n\n至于其他的相关配置可以从github上的主页上查看.\n\n\n\n## 搜索引擎收录\n\n### 01.百度收录\n\n#### 1）安装百度收录插件\n\n```bash\nnpm install hexo-generator-baidu-sitemap --save\n```\n\n\n\n## 02.谷歌收录\n\n#### 1） 安装谷歌收录插件\n\n```bash\nnpm install hexo-generator-sitemap --save\n```\n\n","slug":"document-tool-hexo","published":1,"date":"2021-03-16T21:04:23.643Z","updated":"2021-03-16T23:06:03.557Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmcmmaqn0000mwvl2yor3e6p","content":"<h2 id=\"1-github\"><a href=\"#1-github\" class=\"headerlink\" title=\"1.github\"></a>1.github</h2><h3 id=\"01-注册账号\"><a href=\"#01-注册账号\" class=\"headerlink\" title=\"01.注册账号\"></a>01.注册账号</h3><h2 id=\"地址：https-www-github-com\"><a href=\"#地址：https-www-github-com\" class=\"headerlink\" title=\"地址：https://www.github.com\"></a>地址：<a href=\"https://www.github.com/\">https://www.github.com</a></h2><p><img src=\"/2021/document-tool-hexo/index/image-20210317053248148.png\" alt=\"image-20210317053248148\"></p>\n<h3 id=\"02-建立博客仓库\"><a href=\"#02-建立博客仓库\" class=\"headerlink\" title=\"02.建立博客仓库\"></a>02.建立博客仓库</h3><p>博客仓库的建立是有要求的，其要求便是xxx.github.io。而xxx是你的个人名字或者组织名称，比如这里就是yuansudong。建立好之后，其格式如下。</p>\n<p><img src=\"/2021/document-tool-hexo/index/image-20210317053920237.png\" alt=\"image-20210317053920237\"></p>\n<h2 id=\"2-域名\"><a href=\"#2-域名\" class=\"headerlink\" title=\"2.域名\"></a>2.域名</h2><h3 id=\"01-注册\"><a href=\"#01-注册\" class=\"headerlink\" title=\"01.注册\"></a>01.注册</h3><p>域名的注册，是为了自定义域名准备的。倘若你习惯以xxx.github.io访问自己的博客，可以跳过这一步。</p>\n<p>而个人的DNS是在腾讯云注册的，吐槽一句，腾讯云的使用体验，真的是其他xxx不能比的，google除外。</p>\n<p>地址：<a href=\"https://dnspod.cloud.tencent.com/?from=qcloudHpProductDns/\">https://dnspod.cloud.tencent.com/?from=qcloudHpProductDns/</a></p>\n<p><img src=\"/2021/document-tool-hexo/index/image-20210317054230880.png\" alt=\"image-20210317054230880\"></p>\n<p>个人挑了个最便宜的域名，以个人名称+top结尾，1元钱/首年。</p>\n<h3 id=\"02-解析记录\"><a href=\"#02-解析记录\" class=\"headerlink\" title=\"02.解析记录\"></a>02.解析记录</h3><p>在域名解析完毕后，需要在DNSPOD那里添加两行解析记录，其解析记录的类型为CNAME,其目的是将自身域名解析成xxx.github.io.</p>\n<p>地址：<a href=\"https://console.cloud.tencent.com/cns\">https://console.cloud.tencent.com/cns</a></p>\n<p><img src=\"/2021/document-tool-hexo/index/image-20210317054934953.png\" alt=\"image-20210317054934953\"></p>\n<p>www 是为了解析<a href=\"http://www.yuansudong.top到yuansudong.github.io/\">www.yuansudong.top到yuansudong.github.io</a>.</p>\n<p>@是为了解析yuansudong.top到yuansudong.github.io</p>\n<p>一定要加这两个解析，不然为自己的博客接入广告的时候，是个麻烦事情，比如Google Adsense</p>\n<h2 id=\"3-hexo搭建\"><a href=\"#3-hexo搭建\" class=\"headerlink\" title=\"3.hexo搭建\"></a>3.hexo搭建</h2><h3 id=\"01-安装node-js\"><a href=\"#01-安装node-js\" class=\"headerlink\" title=\"01.安装node.js\"></a>01.安装node.js</h3><p>地址：<a href=\"http://nodejs.cn/download/\">http://nodejs.cn/download/</a></p>\n<p><img src=\"/2021/document-tool-hexo/index/image-20210317055530921.png\" alt=\"image-20210317055530921\"></p>\n<p>测试命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -v</span><br></pre></td></tr></table></figure>\n\n<p>为npm设置淘宝镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n\n<p>验证</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config get registry </span><br></pre></td></tr></table></figure>\n\n<p>输出结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D:\\&gt;npm config get registry</span><br><span class=\"line\">https://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"02-全局安装hexo\"><a href=\"#02-全局安装hexo\" class=\"headerlink\" title=\"02.全局安装hexo\"></a>02.全局安装hexo</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"03-在github上建立一个博客仓库\"><a href=\"#03-在github上建立一个博客仓库\" class=\"headerlink\" title=\"03.在github上建立一个博客仓库\"></a>03.在github上建立一个博客仓库</h3><p>在github上建立一个博客仓库的目的,是为了保存自身博客不丢失.前面的xxx.github.io仓库只是用来发布时的仓库.我个人的仓库名称为blog.</p>\n<p><img src=\"/2021/document-tool-hexo/index/image-20210317061018866.png\" alt=\"image-20210317061018866\"></p>\n<h3 id=\"04-克隆仓库\"><a href=\"#04-克隆仓库\" class=\"headerlink\" title=\"04.克隆仓库\"></a>04.克隆仓库</h3><h4 id=\"1-克隆仓库\"><a href=\"#1-克隆仓库\" class=\"headerlink\" title=\"1)克隆仓库\"></a>1)克隆仓库</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://www.github.com/yuansudong/blog.git</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-hexo初始化\"><a href=\"#2-hexo初始化\" class=\"headerlink\" title=\"2)hexo初始化\"></a>2)hexo初始化</h4><p>hexo的初始化要求必须在一个空目录下,而blog仓库中,至少有.git文件夹.所以需要先建立一个文件夹之后再初始化</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir temp &amp;&amp; <span class=\"built_in\">cd</span> temp &amp;&amp; hexo init &amp;&amp; npm install &amp;&amp; hexo s -g\t</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2021/document-tool-hexo/index/image-20210317061959427.png\" alt=\"image-20210317061959427\"></p>\n<p>此时,你就可以通过在浏览器中打开<a href=\"http://localhost:4000进行对博客的访问了.我本地访问的页面如下\">http://localhost:4000进行对博客的访问了.我本地访问的页面如下</a></p>\n<p><img src=\"/2021/document-tool-hexo/index/image-20210317062108396.png\" alt=\"image-20210317062108396\"></p>\n<h3 id=\"05-美化hexo\"><a href=\"#05-美化hexo\" class=\"headerlink\" title=\"05.美化hexo\"></a>05.美化hexo</h3><p>hexo安装完毕之后,下一步的事情就是要进行博客的美化工作,毕竟最原始的hexo,很难满足自身的意愿.</p>\n<p>hexo的主题地址可通过该链接进行访问:<a href=\"https://hexo.bootcss.com/themes/\">https://hexo.bootcss.com/themes/</a></p>\n<p><img src=\"/2021/document-tool-hexo/index/image-20210317062709087.png\" alt=\"image-20210317062709087\"></p>\n<p>因为是演示文档,所以我随便选了一个主题,是<a href=\"https://github.com/Halyul/hexo-theme-mdui\">https://github.com/Halyul/hexo-theme-mdui</a></p>\n<p>在hexo的根目录下,本人是temp,运行下列命令:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> themes &amp;&amp; git <span class=\"built_in\">clone</span> https://github.com/Halyul/hexo-theme-matery.git</span><br></pre></td></tr></table></figure>\n\n\n\n<p>克隆完毕后,将hexo根目录(temp下)的_config.yml打开,修改主题为hexo-theme-mudi,并修改一些相关的配置.</p>\n<p><img src=\"/2021/document-tool-hexo/index/image-20210317070431369.png\" alt=\"image-20210317070431369\"></p>\n<p>输入下列命令验证结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s -g</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2021/document-tool-hexo/index/image-20210317070525288.png\" alt=\"image-20210317070525288\"></p>\n<p>至于其他的相关配置可以从github上的主页上查看.</p>\n<h2 id=\"搜索引擎收录\"><a href=\"#搜索引擎收录\" class=\"headerlink\" title=\"搜索引擎收录\"></a>搜索引擎收录</h2><h3 id=\"01-百度收录\"><a href=\"#01-百度收录\" class=\"headerlink\" title=\"01.百度收录\"></a>01.百度收录</h3><h4 id=\"1）安装百度收录插件\"><a href=\"#1）安装百度收录插件\" class=\"headerlink\" title=\"1）安装百度收录插件\"></a>1）安装百度收录插件</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"02-谷歌收录\"><a href=\"#02-谷歌收录\" class=\"headerlink\" title=\"02.谷歌收录\"></a>02.谷歌收录</h2><h4 id=\"1）-安装谷歌收录插件\"><a href=\"#1）-安装谷歌收录插件\" class=\"headerlink\" title=\"1） 安装谷歌收录插件\"></a>1） 安装谷歌收录插件</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"contact":[{"title":"github","icon":"icon-github","link":"https://github.com/yuansudong"},{"title":"email","icon":"icon-email","link":"mailto:1145919989@qq.com"},{"title":"qq","icon":"icon-qq","link":"/atom.xml"}],"favicons":["<link rel=\"shortcut icon\" href=\"/img//favicon.ico\">","<link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/img//favicon-16x16.png\">","<link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/img//favicon-32x32.png\">","<link rel=\"icon\" type=\"image/png\" sizes=\"48x48\" href=\"/img//favicon-48x48.png\">","<link rel=\"manifest\" href=\"/img//manifest.json\">","<meta name=\"mobile-web-app-capable\" content=\"yes\">","<meta name=\"theme-color\" content=\"#fff\">","<meta name=\"application-name\">","<link rel=\"apple-touch-icon\" sizes=\"57x57\" href=\"/img//apple-touch-icon-57x57.png\">","<link rel=\"apple-touch-icon\" sizes=\"60x60\" href=\"/img//apple-touch-icon-60x60.png\">","<link rel=\"apple-touch-icon\" sizes=\"72x72\" href=\"/img//apple-touch-icon-72x72.png\">","<link rel=\"apple-touch-icon\" sizes=\"76x76\" href=\"/img//apple-touch-icon-76x76.png\">","<link rel=\"apple-touch-icon\" sizes=\"114x114\" href=\"/img//apple-touch-icon-114x114.png\">","<link rel=\"apple-touch-icon\" sizes=\"120x120\" href=\"/img//apple-touch-icon-120x120.png\">","<link rel=\"apple-touch-icon\" sizes=\"144x144\" href=\"/img//apple-touch-icon-144x144.png\">","<link rel=\"apple-touch-icon\" sizes=\"152x152\" href=\"/img//apple-touch-icon-152x152.png\">","<link rel=\"apple-touch-icon\" sizes=\"167x167\" href=\"/img//apple-touch-icon-167x167.png\">","<link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/img//apple-touch-icon-180x180.png\">","<link rel=\"apple-touch-icon\" sizes=\"1024x1024\" href=\"/img//apple-touch-icon-1024x1024.png\">","<meta name=\"apple-mobile-web-app-capable\" content=\"yes\">","<meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black-translucent\">","<meta name=\"apple-mobile-web-app-title\">","<meta name=\"msapplication-TileColor\" content=\"#fff\">","<meta name=\"msapplication-TileImage\" content=\"/img//mstile-144x144.png\">","<meta name=\"msapplication-config\" content=\"/img//browserconfig.xml\">"]}},"excerpt":"","more":"<h2 id=\"1-github\"><a href=\"#1-github\" class=\"headerlink\" title=\"1.github\"></a>1.github</h2><h3 id=\"01-注册账号\"><a href=\"#01-注册账号\" class=\"headerlink\" title=\"01.注册账号\"></a>01.注册账号</h3><h2 id=\"地址：https-www-github-com\"><a href=\"#地址：https-www-github-com\" class=\"headerlink\" title=\"地址：https://www.github.com\"></a>地址：<a href=\"https://www.github.com/\">https://www.github.com</a></h2><p><img src=\"/2021/document-tool-hexo/index/image-20210317053248148.png\" alt=\"image-20210317053248148\"></p>\n<h3 id=\"02-建立博客仓库\"><a href=\"#02-建立博客仓库\" class=\"headerlink\" title=\"02.建立博客仓库\"></a>02.建立博客仓库</h3><p>博客仓库的建立是有要求的，其要求便是xxx.github.io。而xxx是你的个人名字或者组织名称，比如这里就是yuansudong。建立好之后，其格式如下。</p>\n<p><img src=\"/2021/document-tool-hexo/index/image-20210317053920237.png\" alt=\"image-20210317053920237\"></p>\n<h2 id=\"2-域名\"><a href=\"#2-域名\" class=\"headerlink\" title=\"2.域名\"></a>2.域名</h2><h3 id=\"01-注册\"><a href=\"#01-注册\" class=\"headerlink\" title=\"01.注册\"></a>01.注册</h3><p>域名的注册，是为了自定义域名准备的。倘若你习惯以xxx.github.io访问自己的博客，可以跳过这一步。</p>\n<p>而个人的DNS是在腾讯云注册的，吐槽一句，腾讯云的使用体验，真的是其他xxx不能比的，google除外。</p>\n<p>地址：<a href=\"https://dnspod.cloud.tencent.com/?from=qcloudHpProductDns/\">https://dnspod.cloud.tencent.com/?from=qcloudHpProductDns/</a></p>\n<p><img src=\"/2021/document-tool-hexo/index/image-20210317054230880.png\" alt=\"image-20210317054230880\"></p>\n<p>个人挑了个最便宜的域名，以个人名称+top结尾，1元钱/首年。</p>\n<h3 id=\"02-解析记录\"><a href=\"#02-解析记录\" class=\"headerlink\" title=\"02.解析记录\"></a>02.解析记录</h3><p>在域名解析完毕后，需要在DNSPOD那里添加两行解析记录，其解析记录的类型为CNAME,其目的是将自身域名解析成xxx.github.io.</p>\n<p>地址：<a href=\"https://console.cloud.tencent.com/cns\">https://console.cloud.tencent.com/cns</a></p>\n<p><img src=\"/2021/document-tool-hexo/index/image-20210317054934953.png\" alt=\"image-20210317054934953\"></p>\n<p>www 是为了解析<a href=\"http://www.yuansudong.top到yuansudong.github.io/\">www.yuansudong.top到yuansudong.github.io</a>.</p>\n<p>@是为了解析yuansudong.top到yuansudong.github.io</p>\n<p>一定要加这两个解析，不然为自己的博客接入广告的时候，是个麻烦事情，比如Google Adsense</p>\n<h2 id=\"3-hexo搭建\"><a href=\"#3-hexo搭建\" class=\"headerlink\" title=\"3.hexo搭建\"></a>3.hexo搭建</h2><h3 id=\"01-安装node-js\"><a href=\"#01-安装node-js\" class=\"headerlink\" title=\"01.安装node.js\"></a>01.安装node.js</h3><p>地址：<a href=\"http://nodejs.cn/download/\">http://nodejs.cn/download/</a></p>\n<p><img src=\"/2021/document-tool-hexo/index/image-20210317055530921.png\" alt=\"image-20210317055530921\"></p>\n<p>测试命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -v</span><br></pre></td></tr></table></figure>\n\n<p>为npm设置淘宝镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n\n<p>验证</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config get registry </span><br></pre></td></tr></table></figure>\n\n<p>输出结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D:\\&gt;npm config get registry</span><br><span class=\"line\">https://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"02-全局安装hexo\"><a href=\"#02-全局安装hexo\" class=\"headerlink\" title=\"02.全局安装hexo\"></a>02.全局安装hexo</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"03-在github上建立一个博客仓库\"><a href=\"#03-在github上建立一个博客仓库\" class=\"headerlink\" title=\"03.在github上建立一个博客仓库\"></a>03.在github上建立一个博客仓库</h3><p>在github上建立一个博客仓库的目的,是为了保存自身博客不丢失.前面的xxx.github.io仓库只是用来发布时的仓库.我个人的仓库名称为blog.</p>\n<p><img src=\"/2021/document-tool-hexo/index/image-20210317061018866.png\" alt=\"image-20210317061018866\"></p>\n<h3 id=\"04-克隆仓库\"><a href=\"#04-克隆仓库\" class=\"headerlink\" title=\"04.克隆仓库\"></a>04.克隆仓库</h3><h4 id=\"1-克隆仓库\"><a href=\"#1-克隆仓库\" class=\"headerlink\" title=\"1)克隆仓库\"></a>1)克隆仓库</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://www.github.com/yuansudong/blog.git</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-hexo初始化\"><a href=\"#2-hexo初始化\" class=\"headerlink\" title=\"2)hexo初始化\"></a>2)hexo初始化</h4><p>hexo的初始化要求必须在一个空目录下,而blog仓库中,至少有.git文件夹.所以需要先建立一个文件夹之后再初始化</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir temp &amp;&amp; <span class=\"built_in\">cd</span> temp &amp;&amp; hexo init &amp;&amp; npm install &amp;&amp; hexo s -g\t</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2021/document-tool-hexo/index/image-20210317061959427.png\" alt=\"image-20210317061959427\"></p>\n<p>此时,你就可以通过在浏览器中打开<a href=\"http://localhost:4000进行对博客的访问了.我本地访问的页面如下\">http://localhost:4000进行对博客的访问了.我本地访问的页面如下</a></p>\n<p><img src=\"/2021/document-tool-hexo/index/image-20210317062108396.png\" alt=\"image-20210317062108396\"></p>\n<h3 id=\"05-美化hexo\"><a href=\"#05-美化hexo\" class=\"headerlink\" title=\"05.美化hexo\"></a>05.美化hexo</h3><p>hexo安装完毕之后,下一步的事情就是要进行博客的美化工作,毕竟最原始的hexo,很难满足自身的意愿.</p>\n<p>hexo的主题地址可通过该链接进行访问:<a href=\"https://hexo.bootcss.com/themes/\">https://hexo.bootcss.com/themes/</a></p>\n<p><img src=\"/2021/document-tool-hexo/index/image-20210317062709087.png\" alt=\"image-20210317062709087\"></p>\n<p>因为是演示文档,所以我随便选了一个主题,是<a href=\"https://github.com/Halyul/hexo-theme-mdui\">https://github.com/Halyul/hexo-theme-mdui</a></p>\n<p>在hexo的根目录下,本人是temp,运行下列命令:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> themes &amp;&amp; git <span class=\"built_in\">clone</span> https://github.com/Halyul/hexo-theme-matery.git</span><br></pre></td></tr></table></figure>\n\n\n\n<p>克隆完毕后,将hexo根目录(temp下)的_config.yml打开,修改主题为hexo-theme-mudi,并修改一些相关的配置.</p>\n<p><img src=\"/2021/document-tool-hexo/index/image-20210317070431369.png\" alt=\"image-20210317070431369\"></p>\n<p>输入下列命令验证结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s -g</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2021/document-tool-hexo/index/image-20210317070525288.png\" alt=\"image-20210317070525288\"></p>\n<p>至于其他的相关配置可以从github上的主页上查看.</p>\n<h2 id=\"搜索引擎收录\"><a href=\"#搜索引擎收录\" class=\"headerlink\" title=\"搜索引擎收录\"></a>搜索引擎收录</h2><h3 id=\"01-百度收录\"><a href=\"#01-百度收录\" class=\"headerlink\" title=\"01.百度收录\"></a>01.百度收录</h3><h4 id=\"1）安装百度收录插件\"><a href=\"#1）安装百度收录插件\" class=\"headerlink\" title=\"1）安装百度收录插件\"></a>1）安装百度收录插件</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"02-谷歌收录\"><a href=\"#02-谷歌收录\" class=\"headerlink\" title=\"02.谷歌收录\"></a>02.谷歌收录</h2><h4 id=\"1）-安装谷歌收录插件\"><a href=\"#1）-安装谷歌收录插件\" class=\"headerlink\" title=\"1） 安装谷歌收录插件\"></a>1） 安装谷歌收录插件</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure>\n\n"}],"PostAsset":[{"_id":"source/_posts/development-manual-jwt/1.png","slug":"1.png","post":"ckmchg4ha00007gvldo3hb1dd","modified":0,"renderable":0},{"_id":"source/_posts/development-manual-jwt/2.png","slug":"2.png","post":"ckmchg4ha00007gvldo3hb1dd","modified":0,"renderable":0},{"_id":"source/_posts/development-manual-oath2/1.png","slug":"1.png","post":"ckmchg4hu00017gvlet9o9d8d","modified":0,"renderable":0},{"_id":"source/_posts/development-manual-oath2/2.png","slug":"2.png","post":"ckmchg4hu00017gvlet9o9d8d","modified":0,"renderable":0},{"_id":"source/_posts/development-manual-oath2/3.png","slug":"3.png","post":"ckmchg4hu00017gvlet9o9d8d","modified":0,"renderable":0},{"_id":"source/_posts/development-manual-oath2/7.png","slug":"7.png","post":"ckmchg4hu00017gvlet9o9d8d","modified":0,"renderable":0},{"_id":"source/_posts/development-manual-oath2/8.png","slug":"8.png","post":"ckmchg4hu00017gvlet9o9d8d","modified":0,"renderable":0},{"_id":"source/_posts/development-manual-oath2/title.png","slug":"title.png","post":"ckmchg4hu00017gvlet9o9d8d","modified":0,"renderable":0},{"_id":"source/_posts/hello-world/image-20210315203750702.png","slug":"image-20210315203750702.png","post":"ckmchg4im000h7gvl9kw9625p","modified":0,"renderable":0},{"_id":"source/_posts/network-deploy-git/acc.png","slug":"acc.png","post":"ckmchg4iw000o7gvl746bag5j","modified":0,"renderable":0},{"_id":"source/_posts/document-tool-hexo/image-20210317053248148.png","slug":"image-20210317053248148.png","post":"ckmcmmaqn0000mwvl2yor3e6p","modified":0,"renderable":0},{"_id":"source/_posts/document-tool-hexo/image-20210317053920237.png","slug":"image-20210317053920237.png","post":"ckmcmmaqn0000mwvl2yor3e6p","modified":0,"renderable":0},{"_id":"source/_posts/document-tool-hexo/image-20210317054230880.png","slug":"image-20210317054230880.png","post":"ckmcmmaqn0000mwvl2yor3e6p","modified":0,"renderable":0},{"_id":"source/_posts/document-tool-hexo/image-20210317054934953.png","slug":"image-20210317054934953.png","post":"ckmcmmaqn0000mwvl2yor3e6p","modified":0,"renderable":0},{"_id":"source/_posts/document-tool-hexo/image-20210317055530921.png","slug":"image-20210317055530921.png","post":"ckmcmmaqn0000mwvl2yor3e6p","modified":0,"renderable":0},{"_id":"source/_posts/document-tool-hexo/image-20210317061018866.png","slug":"image-20210317061018866.png","post":"ckmcmmaqn0000mwvl2yor3e6p","modified":0,"renderable":0},{"_id":"source/_posts/document-tool-hexo/image-20210317061959427.png","slug":"image-20210317061959427.png","post":"ckmcmmaqn0000mwvl2yor3e6p","modified":0,"renderable":0},{"_id":"source/_posts/document-tool-hexo/image-20210317062108396.png","slug":"image-20210317062108396.png","post":"ckmcmmaqn0000mwvl2yor3e6p","modified":0,"renderable":0},{"_id":"source/_posts/document-tool-hexo/image-20210317062709087.png","slug":"image-20210317062709087.png","post":"ckmcmmaqn0000mwvl2yor3e6p","modified":0,"renderable":0},{"_id":"source/_posts/document-tool-hexo/image-20210317070431369.png","slug":"image-20210317070431369.png","post":"ckmcmmaqn0000mwvl2yor3e6p","modified":0,"renderable":0},{"_id":"source/_posts/document-tool-hexo/image-20210317070525288.png","slug":"image-20210317070525288.png","post":"ckmcmmaqn0000mwvl2yor3e6p","modified":0,"renderable":0},{"_id":"source/_posts/document-tool-hexo/image1-20210317070525288.png","slug":"image1-20210317070525288.png","post":"ckmcmmaqn0000mwvl2yor3e6p","modified":1,"renderable":0},{"_id":"source/_posts/document-tool-hexo/image-20210317072305295.png","slug":"image-20210317072305295.png","post":"ckmcmmaqn0000mwvl2yor3e6p","modified":1,"renderable":0},{"_id":"source/_posts/document-tool-hexo/image-20210317072535305.png","slug":"image-20210317072535305.png","post":"ckmcmmaqn0000mwvl2yor3e6p","modified":1,"renderable":0},{"_id":"source/_posts/document-tool-hexo/image-20210317072646799.png","slug":"image-20210317072646799.png","post":"ckmcmmaqn0000mwvl2yor3e6p","modified":1,"renderable":0},{"_id":"source/_posts/document-tool-hexo/image-20210317072734400.png","slug":"image-20210317072734400.png","post":"ckmcmmaqn0000mwvl2yor3e6p","modified":1,"renderable":0},{"_id":"source/_posts/document-tool-hexo/image-20210317072836775.png","slug":"image-20210317072836775.png","post":"ckmcmmaqn0000mwvl2yor3e6p","modified":1,"renderable":0},{"_id":"source/_posts/document-tool-hexo/image-20210317073132318.png","slug":"image-20210317073132318.png","post":"ckmcmmaqn0000mwvl2yor3e6p","modified":1,"renderable":0}],"PostCategory":[{"post_id":"ckmchg4ha00007gvldo3hb1dd","category_id":"ckmchg4i000027gvldl6e0rt2","_id":"ckmchg4ik000e7gvl6aqde009"},{"post_id":"ckmchg4hu00017gvlet9o9d8d","category_id":"ckmchg4i000027gvldl6e0rt2","_id":"ckmchg4ir000j7gvl1x8f0g4v"},{"post_id":"ckmchg4i400047gvl9skw0vm9","category_id":"ckmchg4ij000d7gvlezs52glt","_id":"ckmchg4iy000q7gvla52k5ta8"},{"post_id":"ckmchg4i700057gvlg393d6md","category_id":"ckmchg4ij000d7gvlezs52glt","_id":"ckmchg4j3000w7gvl9qjsakun"},{"post_id":"ckmchg4i900067gvl06m65i4h","category_id":"ckmchg4ij000d7gvlezs52glt","_id":"ckmchg4ja00127gvlajh5cxo3"},{"post_id":"ckmchg4if000a7gvl405x5ba9","category_id":"ckmchg4ij000d7gvlezs52glt","_id":"ckmchg4jk00187gvl30se8b87"},{"post_id":"ckmchg4ii000c7gvl7hv7dpj9","category_id":"ckmchg4ij000d7gvlezs52glt","_id":"ckmchg4js001e7gvlam3y6kc4"},{"post_id":"ckmchg4jl001b7gvl8xap7d5r","category_id":"ckmchg4jk00177gvl8r7se7l9","_id":"ckmchg4jy001l7gvldhricaf6"},{"post_id":"ckmchg4im000h7gvl9kw9625p","category_id":"ckmchg4jk00177gvl8r7se7l9","_id":"ckmchg4k1001p7gvl18gfgoom"},{"post_id":"ckmchg4jq001d7gvl6a2k8itl","category_id":"ckmchg4jk00177gvl8r7se7l9","_id":"ckmchg4k3001s7gvl5u6y14xb"},{"post_id":"ckmchg4ju001h7gvlb9d97461","category_id":"ckmchg4jk00177gvl8r7se7l9","_id":"ckmchg4k4001v7gvlhxhd3n3y"},{"post_id":"ckmchg4iq000i7gvl3l0baufn","category_id":"ckmchg4jt001f7gvlamd5dwg7","_id":"ckmchg4k7001y7gvl4ok21bz6"},{"post_id":"ckmchg4jx001k7gvlgoy5fpn9","category_id":"ckmchg4jk00177gvl8r7se7l9","_id":"ckmchg4k800217gvl6e9m7x5j"},{"post_id":"ckmchg4k0001o7gvlgccubjoi","category_id":"ckmchg4jk00177gvl8r7se7l9","_id":"ckmchg4ka00247gvl7czd47yb"},{"post_id":"ckmchg4it000m7gvl2lrh0k1m","category_id":"ckmchg4jt001f7gvlamd5dwg7","_id":"ckmchg4ka00277gvl5kmj1p5e"},{"post_id":"ckmchg4iw000o7gvl746bag5j","category_id":"ckmchg4jt001f7gvlamd5dwg7","_id":"ckmchg4kc002a7gvl80v06e3o"},{"post_id":"ckmchg4iz000s7gvl30stcssh","category_id":"ckmchg4jt001f7gvlamd5dwg7","_id":"ckmchg4kf002d7gvl0juz9p6n"},{"post_id":"ckmchg4j1000u7gvldq34gyz7","category_id":"ckmchg4jt001f7gvlamd5dwg7","_id":"ckmchg4ki002h7gvle2d75ko9"},{"post_id":"ckmchg4j5000y7gvle5teajt1","category_id":"ckmchg4jk00177gvl8r7se7l9","_id":"ckmchg4kk002k7gvl67du9ym7"},{"post_id":"ckmchg4j800107gvl5876gasj","category_id":"ckmchg4jk00177gvl8r7se7l9","_id":"ckmchg4kl002m7gvl0lxkg0oo"},{"post_id":"ckmchg4jg00147gvl40z4ebhk","category_id":"ckmchg4jk00177gvl8r7se7l9","_id":"ckmchg4kl002n7gvl8sxj5f4s"},{"post_id":"ckmchg4ji00167gvl4tn28h0k","category_id":"ckmchg4jk00177gvl8r7se7l9","_id":"ckmchg4km002o7gvl24ql11ha"},{"post_id":"ckmchg4ks002p7gvl6u81f9uc","category_id":"ckmchg4jk00177gvl8r7se7l9","_id":"ckmchg4kw002t7gvl128h682v"},{"post_id":"ckmchg4ku002q7gvl8ubvel07","category_id":"ckmchg4ij000d7gvlezs52glt","_id":"ckmchg4kw002u7gvlg4bzc82d"},{"post_id":"ckmcmmaqn0000mwvl2yor3e6p","category_id":"ckmcmmaqw0001mwvl6cpd28q6","_id":"ckmcmmarf0004mwvl22tz1ibn"}],"PostTag":[{"post_id":"ckmchg4i700057gvlg393d6md","tag_id":"ckmchg4i300037gvles3z9yvu","_id":"ckmchg4if00097gvl0fsmbreo"},{"post_id":"ckmchg4ha00007gvldo3hb1dd","tag_id":"ckmchg4i300037gvles3z9yvu","_id":"ckmchg4ih000b7gvle7qsfu1m"},{"post_id":"ckmchg4hu00017gvlet9o9d8d","tag_id":"ckmchg4i300037gvles3z9yvu","_id":"ckmchg4im000g7gvl4rv30nxi"},{"post_id":"ckmchg4i400047gvl9skw0vm9","tag_id":"ckmchg4ik000f7gvl5pjk3i2p","_id":"ckmchg4iv000n7gvlgk4hdexd"},{"post_id":"ckmchg4i900067gvl06m65i4h","tag_id":"ckmchg4ik000f7gvl5pjk3i2p","_id":"ckmchg4j1000t7gvl0im4c628"},{"post_id":"ckmchg4if000a7gvl405x5ba9","tag_id":"ckmchg4ik000f7gvl5pjk3i2p","_id":"ckmchg4j6000z7gvl0p27emp3"},{"post_id":"ckmchg4ii000c7gvl7hv7dpj9","tag_id":"ckmchg4j3000x7gvl6hq71zsq","_id":"ckmchg4jh00157gvlcgg14cya"},{"post_id":"ckmchg4jg00147gvl40z4ebhk","tag_id":"ckmchg4jb00137gvld1elbzwn","_id":"ckmchg4jk00197gvl9nr76z8r"},{"post_id":"ckmchg4im000h7gvl9kw9625p","tag_id":"ckmchg4jb00137gvld1elbzwn","_id":"ckmchg4jn001c7gvld5p11sla"},{"post_id":"ckmchg4ji00167gvl4tn28h0k","tag_id":"ckmchg4jb00137gvld1elbzwn","_id":"ckmchg4jt001g7gvl1z0fcipg"},{"post_id":"ckmchg4jl001b7gvl8xap7d5r","tag_id":"ckmchg4jb00137gvld1elbzwn","_id":"ckmchg4jw001j7gvlgiow3i9o"},{"post_id":"ckmchg4jq001d7gvl6a2k8itl","tag_id":"ckmchg4jb00137gvld1elbzwn","_id":"ckmchg4jz001m7gvlfgc96wlw"},{"post_id":"ckmchg4iq000i7gvl3l0baufn","tag_id":"ckmchg4jl001a7gvldflm8k0k","_id":"ckmchg4k3001r7gvlefrz3quk"},{"post_id":"ckmchg4ju001h7gvlb9d97461","tag_id":"ckmchg4jb00137gvld1elbzwn","_id":"ckmchg4k4001t7gvl23ifg8fj"},{"post_id":"ckmchg4jx001k7gvlgoy5fpn9","tag_id":"ckmchg4jb00137gvld1elbzwn","_id":"ckmchg4k7001x7gvl4bf657rt"},{"post_id":"ckmchg4it000m7gvl2lrh0k1m","tag_id":"ckmchg4jl001a7gvldflm8k0k","_id":"ckmchg4k7001z7gvl9qrz7jt8"},{"post_id":"ckmchg4k0001o7gvlgccubjoi","tag_id":"ckmchg4jb00137gvld1elbzwn","_id":"ckmchg4k900237gvl5raka3q6"},{"post_id":"ckmchg4iw000o7gvl746bag5j","tag_id":"ckmchg4jl001a7gvldflm8k0k","_id":"ckmchg4ka00257gvlh3f8etbx"},{"post_id":"ckmchg4iz000s7gvl30stcssh","tag_id":"ckmchg4jl001a7gvldflm8k0k","_id":"ckmchg4kc00297gvlaf4q9ds8"},{"post_id":"ckmchg4j1000u7gvldq34gyz7","tag_id":"ckmchg4jl001a7gvldflm8k0k","_id":"ckmchg4kf002b7gvl06461i86"},{"post_id":"ckmchg4j5000y7gvle5teajt1","tag_id":"ckmchg4jb00137gvld1elbzwn","_id":"ckmchg4kh002f7gvlgl4cctgo"},{"post_id":"ckmchg4j800107gvl5876gasj","tag_id":"ckmchg4jb00137gvld1elbzwn","_id":"ckmchg4kj002i7gvlc5y4b82i"},{"post_id":"ckmchg4ks002p7gvl6u81f9uc","tag_id":"ckmchg4jb00137gvld1elbzwn","_id":"ckmchg4kv002r7gvl5e7kheb1"},{"post_id":"ckmchg4ku002q7gvl8ubvel07","tag_id":"ckmchg4ik000f7gvl5pjk3i2p","_id":"ckmchg4kw002s7gvl2h644i7z"},{"post_id":"ckmcmmaqn0000mwvl2yor3e6p","tag_id":"ckmcmmarc0002mwvl8kaj7dlh","_id":"ckmcmmare0003mwvldj1fflpe"}],"Tag":[{"name":"开发手册","_id":"ckmchg4i300037gvles3z9yvu"},{"name":"GO语言","_id":"ckmchg4ik000f7gvl5pjk3i2p"},{"name":"Go语言","_id":"ckmchg4j3000x7gvl6hq71zsq"},{"name":"技术场景","_id":"ckmchg4jb00137gvld1elbzwn"},{"name":"企业网络","_id":"ckmchg4jl001a7gvldflm8k0k"},{"name":"文档工具","_id":"ckmcmmarc0002mwvl8kaj7dlh"}]}}